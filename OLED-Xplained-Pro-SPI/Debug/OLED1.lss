
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000743c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040743c  0040743c  0001743c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  00407444  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000314  204009d0  00407e14  000209d0  2**2
                  ALLOC
  4 .stack        00002004  20400ce4  00408128  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402ce8  0040a12c  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001b812  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003ec7  00000000  00000000  0003c269  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000069bf  00000000  00000000  00040130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a78  00000000  00000000  00046aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac0  00000000  00000000  00047567  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002253f  00000000  00000000  00048027  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000108d4  00000000  00000000  0006a566  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000908f4  00000000  00000000  0007ae3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002314  00000000  00000000  0010b730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 2c 40 20 a5 14 40 00 a1 14 40 00 a1 14 40 00     .,@ ..@...@...@.
  400010:	a1 14 40 00 a1 14 40 00 a1 14 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a1 14 40 00 a1 14 40 00 00 00 00 00 a1 14 40 00     ..@...@.......@.
  40003c:	a1 14 40 00 a1 14 40 00 a1 14 40 00 c5 1a 40 00     ..@...@...@...@.
  40004c:	fd 19 40 00 a1 14 40 00 a1 14 40 00 a1 14 40 00     ..@...@...@...@.
  40005c:	a1 14 40 00 a1 14 40 00 00 00 00 00 05 10 40 00     ..@...@.......@.
  40006c:	19 10 40 00 2d 10 40 00 a1 14 40 00 a1 14 40 00     ..@.-.@...@...@.
  40007c:	a1 14 40 00 41 10 40 00 55 10 40 00 a1 14 40 00     ..@.A.@.U.@...@.
  40008c:	a1 14 40 00 a1 14 40 00 a1 14 40 00 a1 14 40 00     ..@...@...@...@.
  40009c:	85 19 40 00 ad 19 40 00 d5 19 40 00 a1 14 40 00     ..@...@...@...@.
  4000ac:	a1 14 40 00 a1 14 40 00 a1 14 40 00 a1 14 40 00     ..@...@...@...@.
  4000bc:	a1 14 40 00 a1 14 40 00 a1 14 40 00 a1 14 40 00     ..@...@...@...@.
  4000cc:	a1 14 40 00 00 00 00 00 a1 14 40 00 00 00 00 00     ..@.......@.....
  4000dc:	a1 14 40 00 a1 14 40 00 a1 14 40 00 a1 14 40 00     ..@...@...@...@.
  4000ec:	a1 14 40 00 a1 14 40 00 a1 14 40 00 a1 14 40 00     ..@...@...@...@.
  4000fc:	a1 14 40 00 a1 14 40 00 a1 14 40 00 a1 14 40 00     ..@...@...@...@.
  40010c:	a1 14 40 00 a1 14 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 a1 14 40 00 a1 14 40 00 a1 14 40 00     ......@...@...@.
  40012c:	a1 14 40 00 a1 14 40 00 00 00 00 00 a1 14 40 00     ..@...@.......@.
  40013c:	a1 14 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	00407444 	.word	0x00407444

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00407444 	.word	0x00407444
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	00407444 	.word	0x00407444
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr

004001c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4001c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001ca:	6884      	ldr	r4, [r0, #8]
  4001cc:	42a5      	cmp	r5, r4
  4001ce:	d003      	beq.n	4001d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001d2:	6884      	ldr	r4, [r0, #8]
  4001d4:	42ac      	cmp	r4, r5
  4001d6:	d1fb      	bne.n	4001d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4001d8:	b161      	cbz	r1, 4001f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4001de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4001e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4001e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4001ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4001ee:	bf18      	it	ne
  4001f0:	300c      	addne	r0, #12
  4001f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4001f4:	b142      	cbz	r2, 400208 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4001f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4001fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4001fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400202:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400206:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400208:	b143      	cbz	r3, 40021c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40020a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40020e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400212:	f004 040f 	and.w	r4, r4, #15
  400216:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40021a:	601c      	str	r4, [r3, #0]
	}
}
  40021c:	bc30      	pop	{r4, r5}
  40021e:	4770      	bx	lr

00400220 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400220:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400222:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400224:	f014 0f01 	tst.w	r4, #1
  400228:	d005      	beq.n	400236 <rtc_set_time+0x16>
  40022a:	290c      	cmp	r1, #12
  40022c:	d903      	bls.n	400236 <rtc_set_time+0x16>
			ul_hour -= 12;
  40022e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400230:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400234:	e000      	b.n	400238 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400236:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400238:	4c1c      	ldr	r4, [pc, #112]	; (4002ac <rtc_set_time+0x8c>)
  40023a:	fba4 5603 	umull	r5, r6, r4, r3
  40023e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400240:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400244:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400248:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40024c:	fba4 6502 	umull	r6, r5, r4, r2
  400250:	08ed      	lsrs	r5, r5, #3
  400252:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400256:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40025a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40025e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400262:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400264:	fba4 4201 	umull	r4, r2, r4, r1
  400268:	08d2      	lsrs	r2, r2, #3
  40026a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40026e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400272:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400276:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40027a:	6983      	ldr	r3, [r0, #24]
  40027c:	f013 0f04 	tst.w	r3, #4
  400280:	d0fb      	beq.n	40027a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400282:	6803      	ldr	r3, [r0, #0]
  400284:	f043 0301 	orr.w	r3, r3, #1
  400288:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40028a:	6983      	ldr	r3, [r0, #24]
  40028c:	f013 0f01 	tst.w	r3, #1
  400290:	d0fb      	beq.n	40028a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400292:	2301      	movs	r3, #1
  400294:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400296:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400298:	6803      	ldr	r3, [r0, #0]
  40029a:	f023 0301 	bic.w	r3, r3, #1
  40029e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4002a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002a2:	f000 0001 	and.w	r0, r0, #1
  4002a6:	bcf0      	pop	{r4, r5, r6, r7}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	cccccccd 	.word	0xcccccccd

004002b0 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4002b0:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002b2:	4d2a      	ldr	r5, [pc, #168]	; (40035c <rtc_set_date+0xac>)
  4002b4:	fba5 4603 	umull	r4, r6, r5, r3
  4002b8:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4002ba:	9c03      	ldr	r4, [sp, #12]
  4002bc:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002be:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4002c2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4002c6:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002ca:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4002ce:	fba5 6402 	umull	r6, r4, r5, r2
  4002d2:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002d4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4002d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4002dc:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002e0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4002e4:	4b1e      	ldr	r3, [pc, #120]	; (400360 <rtc_set_date+0xb0>)
  4002e6:	fba3 4301 	umull	r4, r3, r3, r1
  4002ea:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002ec:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4002f0:	4b1c      	ldr	r3, [pc, #112]	; (400364 <rtc_set_date+0xb4>)
  4002f2:	fba3 4301 	umull	r4, r3, r3, r1
  4002f6:	095b      	lsrs	r3, r3, #5
  4002f8:	fba5 6403 	umull	r6, r4, r5, r3
  4002fc:	08e4      	lsrs	r4, r4, #3
  4002fe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400302:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400306:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400308:	fba5 4301 	umull	r4, r3, r5, r1
  40030c:	08db      	lsrs	r3, r3, #3
  40030e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  400312:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400316:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40031a:	fba5 1503 	umull	r1, r5, r5, r3
  40031e:	08ed      	lsrs	r5, r5, #3
  400320:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400324:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400328:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40032c:	6983      	ldr	r3, [r0, #24]
  40032e:	f013 0f04 	tst.w	r3, #4
  400332:	d0fb      	beq.n	40032c <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  400334:	6803      	ldr	r3, [r0, #0]
  400336:	f043 0302 	orr.w	r3, r3, #2
  40033a:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40033c:	6983      	ldr	r3, [r0, #24]
  40033e:	f013 0f01 	tst.w	r3, #1
  400342:	d0fb      	beq.n	40033c <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400344:	2301      	movs	r3, #1
  400346:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400348:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  40034a:	6803      	ldr	r3, [r0, #0]
  40034c:	f023 0302 	bic.w	r3, r3, #2
  400350:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  400352:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400354:	f000 0002 	and.w	r0, r0, #2
  400358:	bc70      	pop	{r4, r5, r6}
  40035a:	4770      	bx	lr
  40035c:	cccccccd 	.word	0xcccccccd
  400360:	10624dd3 	.word	0x10624dd3
  400364:	51eb851f 	.word	0x51eb851f

00400368 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400368:	6980      	ldr	r0, [r0, #24]
}
  40036a:	4770      	bx	lr

0040036c <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  40036c:	61c1      	str	r1, [r0, #28]
  40036e:	4770      	bx	lr

00400370 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400370:	4b03      	ldr	r3, [pc, #12]	; (400380 <rtt_init+0x10>)
  400372:	681b      	ldr	r3, [r3, #0]
  400374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400378:	4319      	orrs	r1, r3
  40037a:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  40037c:	2000      	movs	r0, #0
  40037e:	4770      	bx	lr
  400380:	204009ec 	.word	0x204009ec

00400384 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  400384:	b941      	cbnz	r1, 400398 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  400386:	4a09      	ldr	r2, [pc, #36]	; (4003ac <rtt_sel_source+0x28>)
  400388:	6813      	ldr	r3, [r2, #0]
  40038a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  40038e:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400390:	6802      	ldr	r2, [r0, #0]
  400392:	4313      	orrs	r3, r2
  400394:	6003      	str	r3, [r0, #0]
  400396:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400398:	4a04      	ldr	r2, [pc, #16]	; (4003ac <rtt_sel_source+0x28>)
  40039a:	6813      	ldr	r3, [r2, #0]
  40039c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4003a0:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4003a2:	6802      	ldr	r2, [r0, #0]
  4003a4:	4313      	orrs	r3, r2
  4003a6:	6003      	str	r3, [r0, #0]
  4003a8:	4770      	bx	lr
  4003aa:	bf00      	nop
  4003ac:	204009ec 	.word	0x204009ec

004003b0 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4003b0:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4003b2:	4b03      	ldr	r3, [pc, #12]	; (4003c0 <rtt_enable_interrupt+0x10>)
  4003b4:	681b      	ldr	r3, [r3, #0]
  4003b6:	4319      	orrs	r1, r3
  4003b8:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  4003ba:	6001      	str	r1, [r0, #0]
  4003bc:	4770      	bx	lr
  4003be:	bf00      	nop
  4003c0:	204009ec 	.word	0x204009ec

004003c4 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  4003c4:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  4003c6:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4003ca:	4b02      	ldr	r3, [pc, #8]	; (4003d4 <rtt_disable_interrupt+0x10>)
  4003cc:	681b      	ldr	r3, [r3, #0]
  4003ce:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  4003d0:	6001      	str	r1, [r0, #0]
  4003d2:	4770      	bx	lr
  4003d4:	204009ec 	.word	0x204009ec

004003d8 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  4003d8:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  4003da:	6883      	ldr	r3, [r0, #8]
  4003dc:	429a      	cmp	r2, r3
  4003de:	d003      	beq.n	4003e8 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  4003e0:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  4003e2:	6883      	ldr	r3, [r0, #8]
  4003e4:	4293      	cmp	r3, r2
  4003e6:	d1fb      	bne.n	4003e0 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  4003e8:	4618      	mov	r0, r3
  4003ea:	4770      	bx	lr

004003ec <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  4003ec:	68c0      	ldr	r0, [r0, #12]
}
  4003ee:	4770      	bx	lr

004003f0 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  4003f0:	b570      	push	{r4, r5, r6, lr}
  4003f2:	4606      	mov	r6, r0
  4003f4:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  4003f6:	6804      	ldr	r4, [r0, #0]
  4003f8:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  4003fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400400:	4809      	ldr	r0, [pc, #36]	; (400428 <rtt_write_alarm_time+0x38>)
  400402:	4b0a      	ldr	r3, [pc, #40]	; (40042c <rtt_write_alarm_time+0x3c>)
  400404:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400406:	b92d      	cbnz	r5, 400414 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400408:	f04f 33ff 	mov.w	r3, #4294967295
  40040c:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  40040e:	b924      	cbnz	r4, 40041a <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400410:	2000      	movs	r0, #0
  400412:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400414:	3d01      	subs	r5, #1
  400416:	6075      	str	r5, [r6, #4]
  400418:	e7f9      	b.n	40040e <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  40041a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40041e:	4802      	ldr	r0, [pc, #8]	; (400428 <rtt_write_alarm_time+0x38>)
  400420:	4b03      	ldr	r3, [pc, #12]	; (400430 <rtt_write_alarm_time+0x40>)
  400422:	4798      	blx	r3
  400424:	e7f4      	b.n	400410 <rtt_write_alarm_time+0x20>
  400426:	bf00      	nop
  400428:	400e1830 	.word	0x400e1830
  40042c:	004003c5 	.word	0x004003c5
  400430:	004003b1 	.word	0x004003b1

00400434 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400434:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400436:	4b07      	ldr	r3, [pc, #28]	; (400454 <spi_enable_clock+0x20>)
  400438:	4298      	cmp	r0, r3
  40043a:	d003      	beq.n	400444 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40043c:	4b06      	ldr	r3, [pc, #24]	; (400458 <spi_enable_clock+0x24>)
  40043e:	4298      	cmp	r0, r3
  400440:	d004      	beq.n	40044c <spi_enable_clock+0x18>
  400442:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400444:	2015      	movs	r0, #21
  400446:	4b05      	ldr	r3, [pc, #20]	; (40045c <spi_enable_clock+0x28>)
  400448:	4798      	blx	r3
  40044a:	bd08      	pop	{r3, pc}
  40044c:	202a      	movs	r0, #42	; 0x2a
  40044e:	4b03      	ldr	r3, [pc, #12]	; (40045c <spi_enable_clock+0x28>)
  400450:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400452:	e7f6      	b.n	400442 <spi_enable_clock+0xe>
  400454:	40008000 	.word	0x40008000
  400458:	40058000 	.word	0x40058000
  40045c:	00401189 	.word	0x00401189

00400460 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400460:	6843      	ldr	r3, [r0, #4]
  400462:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400466:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400468:	6843      	ldr	r3, [r0, #4]
  40046a:	0409      	lsls	r1, r1, #16
  40046c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400470:	4319      	orrs	r1, r3
  400472:	6041      	str	r1, [r0, #4]
  400474:	4770      	bx	lr

00400476 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400476:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400478:	f643 2499 	movw	r4, #15001	; 0x3a99
  40047c:	6905      	ldr	r5, [r0, #16]
  40047e:	f015 0f02 	tst.w	r5, #2
  400482:	d103      	bne.n	40048c <spi_write+0x16>
		if (!timeout--) {
  400484:	3c01      	subs	r4, #1
  400486:	d1f9      	bne.n	40047c <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400488:	2001      	movs	r0, #1
  40048a:	e00c      	b.n	4004a6 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40048c:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40048e:	f014 0f02 	tst.w	r4, #2
  400492:	d006      	beq.n	4004a2 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400494:	0412      	lsls	r2, r2, #16
  400496:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40049a:	4311      	orrs	r1, r2
		if (uc_last) {
  40049c:	b10b      	cbz	r3, 4004a2 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40049e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4004a2:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4004a4:	2000      	movs	r0, #0
}
  4004a6:	bc30      	pop	{r4, r5}
  4004a8:	4770      	bx	lr

004004aa <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4004aa:	b932      	cbnz	r2, 4004ba <spi_set_clock_polarity+0x10>
  4004ac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4004b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004b2:	f023 0301 	bic.w	r3, r3, #1
  4004b6:	6303      	str	r3, [r0, #48]	; 0x30
  4004b8:	4770      	bx	lr
  4004ba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4004be:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004c0:	f043 0301 	orr.w	r3, r3, #1
  4004c4:	6303      	str	r3, [r0, #48]	; 0x30
  4004c6:	4770      	bx	lr

004004c8 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4004c8:	b932      	cbnz	r2, 4004d8 <spi_set_clock_phase+0x10>
  4004ca:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4004ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004d0:	f023 0302 	bic.w	r3, r3, #2
  4004d4:	6303      	str	r3, [r0, #48]	; 0x30
  4004d6:	4770      	bx	lr
  4004d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4004dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004de:	f043 0302 	orr.w	r3, r3, #2
  4004e2:	6303      	str	r3, [r0, #48]	; 0x30
  4004e4:	4770      	bx	lr

004004e6 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4004e6:	2a04      	cmp	r2, #4
  4004e8:	d003      	beq.n	4004f2 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4004ea:	b16a      	cbz	r2, 400508 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4004ec:	2a08      	cmp	r2, #8
  4004ee:	d016      	beq.n	40051e <spi_configure_cs_behavior+0x38>
  4004f0:	4770      	bx	lr
  4004f2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4004f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004f8:	f023 0308 	bic.w	r3, r3, #8
  4004fc:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4004fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400500:	f043 0304 	orr.w	r3, r3, #4
  400504:	6303      	str	r3, [r0, #48]	; 0x30
  400506:	4770      	bx	lr
  400508:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40050c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40050e:	f023 0308 	bic.w	r3, r3, #8
  400512:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400514:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400516:	f023 0304 	bic.w	r3, r3, #4
  40051a:	6303      	str	r3, [r0, #48]	; 0x30
  40051c:	4770      	bx	lr
  40051e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400522:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400524:	f043 0308 	orr.w	r3, r3, #8
  400528:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  40052a:	e7e1      	b.n	4004f0 <spi_configure_cs_behavior+0xa>

0040052c <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40052c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400530:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400536:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400538:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40053a:	431a      	orrs	r2, r3
  40053c:	630a      	str	r2, [r1, #48]	; 0x30
  40053e:	4770      	bx	lr

00400540 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400540:	1e43      	subs	r3, r0, #1
  400542:	4419      	add	r1, r3
  400544:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400548:	1e43      	subs	r3, r0, #1
  40054a:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40054c:	bf94      	ite	ls
  40054e:	b200      	sxthls	r0, r0
		return -1;
  400550:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400554:	4770      	bx	lr

00400556 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  400556:	b17a      	cbz	r2, 400578 <spi_set_baudrate_div+0x22>
{
  400558:	b410      	push	{r4}
  40055a:	4614      	mov	r4, r2
  40055c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400560:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400566:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400568:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40056a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40056e:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400570:	2000      	movs	r0, #0
}
  400572:	f85d 4b04 	ldr.w	r4, [sp], #4
  400576:	4770      	bx	lr
        return -1;
  400578:	f04f 30ff 	mov.w	r0, #4294967295
  40057c:	4770      	bx	lr

0040057e <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  40057e:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400580:	0189      	lsls	r1, r1, #6
  400582:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400584:	2402      	movs	r4, #2
  400586:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400588:	f04f 31ff 	mov.w	r1, #4294967295
  40058c:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40058e:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400590:	605a      	str	r2, [r3, #4]
}
  400592:	f85d 4b04 	ldr.w	r4, [sp], #4
  400596:	4770      	bx	lr

00400598 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400598:	0189      	lsls	r1, r1, #6
  40059a:	2305      	movs	r3, #5
  40059c:	5043      	str	r3, [r0, r1]
  40059e:	4770      	bx	lr

004005a0 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4005a0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4005a4:	61ca      	str	r2, [r1, #28]
  4005a6:	4770      	bx	lr

004005a8 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4005a8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4005ac:	624a      	str	r2, [r1, #36]	; 0x24
  4005ae:	4770      	bx	lr

004005b0 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4005b0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4005b4:	6a08      	ldr	r0, [r1, #32]
}
  4005b6:	4770      	bx	lr

004005b8 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4005b8:	b4f0      	push	{r4, r5, r6, r7}
  4005ba:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4005bc:	2402      	movs	r4, #2
  4005be:	9401      	str	r4, [sp, #4]
  4005c0:	2408      	movs	r4, #8
  4005c2:	9402      	str	r4, [sp, #8]
  4005c4:	2420      	movs	r4, #32
  4005c6:	9403      	str	r4, [sp, #12]
  4005c8:	2480      	movs	r4, #128	; 0x80
  4005ca:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4005cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4005ce:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4005d0:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  4005d2:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  4005d6:	d814      	bhi.n	400602 <tc_find_mck_divisor+0x4a>
  4005d8:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  4005da:	42a0      	cmp	r0, r4
  4005dc:	d217      	bcs.n	40060e <tc_find_mck_divisor+0x56>
  4005de:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  4005e0:	af01      	add	r7, sp, #4
  4005e2:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  4005e6:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4005ea:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4005ec:	4284      	cmp	r4, r0
  4005ee:	d30a      	bcc.n	400606 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4005f0:	4286      	cmp	r6, r0
  4005f2:	d90d      	bls.n	400610 <tc_find_mck_divisor+0x58>
			ul_index++) {
  4005f4:	3501      	adds	r5, #1
	for (ul_index = 0;
  4005f6:	2d05      	cmp	r5, #5
  4005f8:	d1f3      	bne.n	4005e2 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4005fa:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4005fc:	b006      	add	sp, #24
  4005fe:	bcf0      	pop	{r4, r5, r6, r7}
  400600:	4770      	bx	lr
			return 0;
  400602:	2000      	movs	r0, #0
  400604:	e7fa      	b.n	4005fc <tc_find_mck_divisor+0x44>
  400606:	2000      	movs	r0, #0
  400608:	e7f8      	b.n	4005fc <tc_find_mck_divisor+0x44>
	return 1;
  40060a:	2001      	movs	r0, #1
  40060c:	e7f6      	b.n	4005fc <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40060e:	2500      	movs	r5, #0
	if (p_uldiv) {
  400610:	b12a      	cbz	r2, 40061e <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400612:	a906      	add	r1, sp, #24
  400614:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400618:	f851 1c14 	ldr.w	r1, [r1, #-20]
  40061c:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  40061e:	2b00      	cmp	r3, #0
  400620:	d0f3      	beq.n	40060a <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400622:	601d      	str	r5, [r3, #0]
	return 1;
  400624:	2001      	movs	r0, #1
  400626:	e7e9      	b.n	4005fc <tc_find_mck_divisor+0x44>

00400628 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400628:	4b01      	ldr	r3, [pc, #4]	; (400630 <gfx_mono_set_framebuffer+0x8>)
  40062a:	6018      	str	r0, [r3, #0]
  40062c:	4770      	bx	lr
  40062e:	bf00      	nop
  400630:	204009f0 	.word	0x204009f0

00400634 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400634:	4b02      	ldr	r3, [pc, #8]	; (400640 <gfx_mono_framebuffer_put_byte+0xc>)
  400636:	681b      	ldr	r3, [r3, #0]
  400638:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  40063c:	5442      	strb	r2, [r0, r1]
  40063e:	4770      	bx	lr
  400640:	204009f0 	.word	0x204009f0

00400644 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400644:	4b02      	ldr	r3, [pc, #8]	; (400650 <gfx_mono_framebuffer_get_byte+0xc>)
  400646:	681b      	ldr	r3, [r3, #0]
  400648:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  40064c:	5c40      	ldrb	r0, [r0, r1]
  40064e:	4770      	bx	lr
  400650:	204009f0 	.word	0x204009f0

00400654 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400658:	1884      	adds	r4, r0, r2
  40065a:	2c80      	cmp	r4, #128	; 0x80
  40065c:	dd02      	ble.n	400664 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  40065e:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  400662:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  400664:	b322      	cbz	r2, 4006b0 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  400666:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400668:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  40066c:	2601      	movs	r6, #1
  40066e:	fa06 f101 	lsl.w	r1, r6, r1
  400672:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400674:	2b01      	cmp	r3, #1
  400676:	d01d      	beq.n	4006b4 <gfx_mono_generic_draw_horizontal_line+0x60>
  400678:	2b00      	cmp	r3, #0
  40067a:	d035      	beq.n	4006e8 <gfx_mono_generic_draw_horizontal_line+0x94>
  40067c:	2b02      	cmp	r3, #2
  40067e:	d117      	bne.n	4006b0 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400680:	3801      	subs	r0, #1
  400682:	b2c7      	uxtb	r7, r0
  400684:	19d4      	adds	r4, r2, r7
  400686:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400688:	f8df a090 	ldr.w	sl, [pc, #144]	; 40071c <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  40068c:	f04f 0900 	mov.w	r9, #0
  400690:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400720 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400694:	4621      	mov	r1, r4
  400696:	4628      	mov	r0, r5
  400698:	47d0      	blx	sl
			temp ^= pixelmask;
  40069a:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40069e:	464b      	mov	r3, r9
  4006a0:	b2d2      	uxtb	r2, r2
  4006a2:	4621      	mov	r1, r4
  4006a4:	4628      	mov	r0, r5
  4006a6:	47c0      	blx	r8
  4006a8:	3c01      	subs	r4, #1
  4006aa:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4006ac:	42bc      	cmp	r4, r7
  4006ae:	d1f1      	bne.n	400694 <gfx_mono_generic_draw_horizontal_line+0x40>
  4006b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006b4:	3801      	subs	r0, #1
  4006b6:	b2c7      	uxtb	r7, r0
  4006b8:	19d4      	adds	r4, r2, r7
  4006ba:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4006bc:	f8df a05c 	ldr.w	sl, [pc, #92]	; 40071c <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  4006c0:	f04f 0900 	mov.w	r9, #0
  4006c4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400720 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4006c8:	4621      	mov	r1, r4
  4006ca:	4628      	mov	r0, r5
  4006cc:	47d0      	blx	sl
			temp |= pixelmask;
  4006ce:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4006d2:	464b      	mov	r3, r9
  4006d4:	b2d2      	uxtb	r2, r2
  4006d6:	4621      	mov	r1, r4
  4006d8:	4628      	mov	r0, r5
  4006da:	47c0      	blx	r8
  4006dc:	3c01      	subs	r4, #1
  4006de:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4006e0:	42bc      	cmp	r4, r7
  4006e2:	d1f1      	bne.n	4006c8 <gfx_mono_generic_draw_horizontal_line+0x74>
  4006e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006e8:	3801      	subs	r0, #1
  4006ea:	b2c7      	uxtb	r7, r0
  4006ec:	19d4      	adds	r4, r2, r7
  4006ee:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4006f0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 40071c <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  4006f4:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  4006f6:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400720 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4006fa:	4621      	mov	r1, r4
  4006fc:	4628      	mov	r0, r5
  4006fe:	47c0      	blx	r8
			temp &= ~pixelmask;
  400700:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400704:	2300      	movs	r3, #0
  400706:	b2d2      	uxtb	r2, r2
  400708:	4621      	mov	r1, r4
  40070a:	4628      	mov	r0, r5
  40070c:	47c8      	blx	r9
  40070e:	3c01      	subs	r4, #1
  400710:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400712:	42bc      	cmp	r4, r7
  400714:	d1f1      	bne.n	4006fa <gfx_mono_generic_draw_horizontal_line+0xa6>
  400716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40071a:	bf00      	nop
  40071c:	00400955 	.word	0x00400955
  400720:	00400851 	.word	0x00400851

00400724 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400728:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  40072c:	b18b      	cbz	r3, 400752 <gfx_mono_generic_draw_filled_rect+0x2e>
  40072e:	461c      	mov	r4, r3
  400730:	4690      	mov	r8, r2
  400732:	4606      	mov	r6, r0
  400734:	1e4d      	subs	r5, r1, #1
  400736:	b2ed      	uxtb	r5, r5
  400738:	442c      	add	r4, r5
  40073a:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  40073c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400758 <gfx_mono_generic_draw_filled_rect+0x34>
  400740:	463b      	mov	r3, r7
  400742:	4642      	mov	r2, r8
  400744:	4621      	mov	r1, r4
  400746:	4630      	mov	r0, r6
  400748:	47c8      	blx	r9
  40074a:	3c01      	subs	r4, #1
  40074c:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  40074e:	42ac      	cmp	r4, r5
  400750:	d1f6      	bne.n	400740 <gfx_mono_generic_draw_filled_rect+0x1c>
  400752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400756:	bf00      	nop
  400758:	00400655 	.word	0x00400655

0040075c <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  40075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400760:	b083      	sub	sp, #12
  400762:	4604      	mov	r4, r0
  400764:	4688      	mov	r8, r1
  400766:	4691      	mov	r9, r2
  400768:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  40076a:	7a5b      	ldrb	r3, [r3, #9]
  40076c:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400770:	2100      	movs	r1, #0
  400772:	9100      	str	r1, [sp, #0]
  400774:	4649      	mov	r1, r9
  400776:	4640      	mov	r0, r8
  400778:	4d21      	ldr	r5, [pc, #132]	; (400800 <gfx_mono_draw_char+0xa4>)
  40077a:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  40077c:	f89b 3000 	ldrb.w	r3, [fp]
  400780:	b113      	cbz	r3, 400788 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400782:	b003      	add	sp, #12
  400784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400788:	f89b 2008 	ldrb.w	r2, [fp, #8]
  40078c:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  40078e:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  400792:	bf18      	it	ne
  400794:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400796:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  40079a:	f89b 700a 	ldrb.w	r7, [fp, #10]
  40079e:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  4007a0:	fb17 f70a 	smulbb	r7, r7, sl
  4007a4:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  4007a8:	f8db 3004 	ldr.w	r3, [fp, #4]
  4007ac:	fa13 f787 	uxtah	r7, r3, r7
  4007b0:	e01f      	b.n	4007f2 <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  4007b2:	0064      	lsls	r4, r4, #1
  4007b4:	b2e4      	uxtb	r4, r4
  4007b6:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  4007b8:	b2eb      	uxtb	r3, r5
  4007ba:	429e      	cmp	r6, r3
  4007bc:	d910      	bls.n	4007e0 <gfx_mono_draw_char+0x84>
  4007be:	b2eb      	uxtb	r3, r5
  4007c0:	eb08 0003 	add.w	r0, r8, r3
  4007c4:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  4007c6:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  4007ca:	bf08      	it	eq
  4007cc:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  4007d0:	f014 0f80 	tst.w	r4, #128	; 0x80
  4007d4:	d0ed      	beq.n	4007b2 <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  4007d6:	2201      	movs	r2, #1
  4007d8:	4649      	mov	r1, r9
  4007da:	4b0a      	ldr	r3, [pc, #40]	; (400804 <gfx_mono_draw_char+0xa8>)
  4007dc:	4798      	blx	r3
  4007de:	e7e8      	b.n	4007b2 <gfx_mono_draw_char+0x56>
		inc_y += 1;
  4007e0:	f109 0901 	add.w	r9, r9, #1
  4007e4:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  4007e8:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  4007ec:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  4007f0:	d0c7      	beq.n	400782 <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  4007f2:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  4007f6:	2e00      	cmp	r6, #0
  4007f8:	d0f2      	beq.n	4007e0 <gfx_mono_draw_char+0x84>
  4007fa:	2500      	movs	r5, #0
  4007fc:	462c      	mov	r4, r5
  4007fe:	e7de      	b.n	4007be <gfx_mono_draw_char+0x62>
  400800:	00400725 	.word	0x00400725
  400804:	004008f1 	.word	0x004008f1

00400808 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40080c:	4604      	mov	r4, r0
  40080e:	4690      	mov	r8, r2
  400810:	461d      	mov	r5, r3
  400812:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400814:	4f0d      	ldr	r7, [pc, #52]	; (40084c <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  400816:	460e      	mov	r6, r1
  400818:	e008      	b.n	40082c <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  40081a:	7a6a      	ldrb	r2, [r5, #9]
  40081c:	3201      	adds	r2, #1
  40081e:	4442      	add	r2, r8
  400820:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  400824:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  400826:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40082a:	b16b      	cbz	r3, 400848 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  40082c:	7820      	ldrb	r0, [r4, #0]
  40082e:	280a      	cmp	r0, #10
  400830:	d0f3      	beq.n	40081a <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  400832:	280d      	cmp	r0, #13
  400834:	d0f7      	beq.n	400826 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  400836:	462b      	mov	r3, r5
  400838:	4642      	mov	r2, r8
  40083a:	4649      	mov	r1, r9
  40083c:	47b8      	blx	r7
			x += font->width;
  40083e:	7a2b      	ldrb	r3, [r5, #8]
  400840:	4499      	add	r9, r3
  400842:	fa5f f989 	uxtb.w	r9, r9
  400846:	e7ee      	b.n	400826 <gfx_mono_draw_string+0x1e>
}
  400848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40084c:	0040075d 	.word	0x0040075d

00400850 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400850:	b570      	push	{r4, r5, r6, lr}
  400852:	4604      	mov	r4, r0
  400854:	460d      	mov	r5, r1
  400856:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400858:	b91b      	cbnz	r3, 400862 <gfx_mono_ssd1306_put_byte+0x12>
  40085a:	4b0d      	ldr	r3, [pc, #52]	; (400890 <gfx_mono_ssd1306_put_byte+0x40>)
  40085c:	4798      	blx	r3
  40085e:	42b0      	cmp	r0, r6
  400860:	d015      	beq.n	40088e <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400862:	4632      	mov	r2, r6
  400864:	4629      	mov	r1, r5
  400866:	4620      	mov	r0, r4
  400868:	4b0a      	ldr	r3, [pc, #40]	; (400894 <gfx_mono_ssd1306_put_byte+0x44>)
  40086a:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  40086c:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400870:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400874:	4c08      	ldr	r4, [pc, #32]	; (400898 <gfx_mono_ssd1306_put_byte+0x48>)
  400876:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400878:	f3c5 1002 	ubfx	r0, r5, #4, #3
  40087c:	f040 0010 	orr.w	r0, r0, #16
  400880:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400882:	f005 000f 	and.w	r0, r5, #15
  400886:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400888:	4630      	mov	r0, r6
  40088a:	4b04      	ldr	r3, [pc, #16]	; (40089c <gfx_mono_ssd1306_put_byte+0x4c>)
  40088c:	4798      	blx	r3
  40088e:	bd70      	pop	{r4, r5, r6, pc}
  400890:	00400645 	.word	0x00400645
  400894:	00400635 	.word	0x00400635
  400898:	00400961 	.word	0x00400961
  40089c:	00400b81 	.word	0x00400b81

004008a0 <gfx_mono_ssd1306_init>:
{
  4008a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  4008a4:	480d      	ldr	r0, [pc, #52]	; (4008dc <gfx_mono_ssd1306_init+0x3c>)
  4008a6:	4b0e      	ldr	r3, [pc, #56]	; (4008e0 <gfx_mono_ssd1306_init+0x40>)
  4008a8:	4798      	blx	r3
	ssd1306_init();
  4008aa:	4b0e      	ldr	r3, [pc, #56]	; (4008e4 <gfx_mono_ssd1306_init+0x44>)
  4008ac:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  4008ae:	2040      	movs	r0, #64	; 0x40
  4008b0:	4b0d      	ldr	r3, [pc, #52]	; (4008e8 <gfx_mono_ssd1306_init+0x48>)
  4008b2:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4008b4:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4008b6:	f04f 0801 	mov.w	r8, #1
  4008ba:	462f      	mov	r7, r5
  4008bc:	4e0b      	ldr	r6, [pc, #44]	; (4008ec <gfx_mono_ssd1306_init+0x4c>)
{
  4008be:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4008c0:	4643      	mov	r3, r8
  4008c2:	463a      	mov	r2, r7
  4008c4:	b2e1      	uxtb	r1, r4
  4008c6:	4628      	mov	r0, r5
  4008c8:	47b0      	blx	r6
  4008ca:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  4008cc:	2c80      	cmp	r4, #128	; 0x80
  4008ce:	d1f7      	bne.n	4008c0 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4008d0:	3501      	adds	r5, #1
  4008d2:	b2ed      	uxtb	r5, r5
  4008d4:	2d04      	cmp	r5, #4
  4008d6:	d1f2      	bne.n	4008be <gfx_mono_ssd1306_init+0x1e>
  4008d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008dc:	204009f4 	.word	0x204009f4
  4008e0:	00400629 	.word	0x00400629
  4008e4:	004009a1 	.word	0x004009a1
  4008e8:	00400961 	.word	0x00400961
  4008ec:	00400851 	.word	0x00400851

004008f0 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  4008f0:	09c3      	lsrs	r3, r0, #7
  4008f2:	d12a      	bne.n	40094a <gfx_mono_ssd1306_draw_pixel+0x5a>
  4008f4:	291f      	cmp	r1, #31
  4008f6:	d828      	bhi.n	40094a <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  4008f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4008fc:	4614      	mov	r4, r2
  4008fe:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400900:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400902:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400906:	2201      	movs	r2, #1
  400908:	fa02 f701 	lsl.w	r7, r2, r1
  40090c:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400910:	4601      	mov	r1, r0
  400912:	4630      	mov	r0, r6
  400914:	4b0d      	ldr	r3, [pc, #52]	; (40094c <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400916:	4798      	blx	r3
  400918:	4602      	mov	r2, r0
	switch (color) {
  40091a:	2c01      	cmp	r4, #1
  40091c:	d009      	beq.n	400932 <gfx_mono_ssd1306_draw_pixel+0x42>
  40091e:	b164      	cbz	r4, 40093a <gfx_mono_ssd1306_draw_pixel+0x4a>
  400920:	2c02      	cmp	r4, #2
  400922:	d00e      	beq.n	400942 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400924:	2300      	movs	r3, #0
  400926:	4629      	mov	r1, r5
  400928:	4630      	mov	r0, r6
  40092a:	4c09      	ldr	r4, [pc, #36]	; (400950 <gfx_mono_ssd1306_draw_pixel+0x60>)
  40092c:	47a0      	blx	r4
  40092e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400932:	ea48 0200 	orr.w	r2, r8, r0
  400936:	b2d2      	uxtb	r2, r2
		break;
  400938:	e7f4      	b.n	400924 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  40093a:	ea20 0207 	bic.w	r2, r0, r7
  40093e:	b2d2      	uxtb	r2, r2
		break;
  400940:	e7f0      	b.n	400924 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400942:	ea88 0200 	eor.w	r2, r8, r0
  400946:	b2d2      	uxtb	r2, r2
		break;
  400948:	e7ec      	b.n	400924 <gfx_mono_ssd1306_draw_pixel+0x34>
  40094a:	4770      	bx	lr
  40094c:	00400645 	.word	0x00400645
  400950:	00400851 	.word	0x00400851

00400954 <gfx_mono_ssd1306_get_byte>:
{
  400954:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400956:	4b01      	ldr	r3, [pc, #4]	; (40095c <gfx_mono_ssd1306_get_byte+0x8>)
  400958:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  40095a:	bd08      	pop	{r3, pc}
  40095c:	00400645 	.word	0x00400645

00400960 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400960:	b538      	push	{r3, r4, r5, lr}
  400962:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400964:	2208      	movs	r2, #8
  400966:	4b09      	ldr	r3, [pc, #36]	; (40098c <ssd1306_write_command+0x2c>)
  400968:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  40096a:	4c09      	ldr	r4, [pc, #36]	; (400990 <ssd1306_write_command+0x30>)
  40096c:	2101      	movs	r1, #1
  40096e:	4620      	mov	r0, r4
  400970:	4b08      	ldr	r3, [pc, #32]	; (400994 <ssd1306_write_command+0x34>)
  400972:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400974:	2301      	movs	r3, #1
  400976:	461a      	mov	r2, r3
  400978:	4629      	mov	r1, r5
  40097a:	4620      	mov	r0, r4
  40097c:	4c06      	ldr	r4, [pc, #24]	; (400998 <ssd1306_write_command+0x38>)
  40097e:	47a0      	blx	r4
	delay_us(10);
  400980:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400984:	4b05      	ldr	r3, [pc, #20]	; (40099c <ssd1306_write_command+0x3c>)
  400986:	4798      	blx	r3
  400988:	bd38      	pop	{r3, r4, r5, pc}
  40098a:	bf00      	nop
  40098c:	400e1000 	.word	0x400e1000
  400990:	40008000 	.word	0x40008000
  400994:	00400461 	.word	0x00400461
  400998:	00400477 	.word	0x00400477
  40099c:	20400001 	.word	0x20400001

004009a0 <ssd1306_init>:
{
  4009a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009a4:	4d66      	ldr	r5, [pc, #408]	; (400b40 <ssd1306_init+0x1a0>)
  4009a6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  4009aa:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009ac:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009b0:	4b64      	ldr	r3, [pc, #400]	; (400b44 <ssd1306_init+0x1a4>)
  4009b2:	2708      	movs	r7, #8
  4009b4:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009b6:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4009ba:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4009bc:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009c0:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009c2:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4009c4:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4009c8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  4009ca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4009ce:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009d0:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  4009d2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4009d6:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  4009d8:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4009da:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009de:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009e0:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4009e2:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4009e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4009e8:	f022 0208 	bic.w	r2, r2, #8
  4009ec:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009ee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4009f0:	f022 0208 	bic.w	r2, r2, #8
  4009f4:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4009f6:	601f      	str	r7, [r3, #0]
  4009f8:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4009fa:	631f      	str	r7, [r3, #48]	; 0x30
  4009fc:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4009fe:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400b7c <ssd1306_init+0x1dc>
  400a02:	2300      	movs	r3, #0
  400a04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400a08:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a0c:	4640      	mov	r0, r8
  400a0e:	4c4e      	ldr	r4, [pc, #312]	; (400b48 <ssd1306_init+0x1a8>)
  400a10:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400a12:	2300      	movs	r3, #0
  400a14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400a18:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a1c:	4640      	mov	r0, r8
  400a1e:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400a20:	2300      	movs	r3, #0
  400a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a26:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a2a:	4640      	mov	r0, r8
  400a2c:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400a2e:	2300      	movs	r3, #0
  400a30:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400a34:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a38:	4640      	mov	r0, r8
  400a3a:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400a3c:	2300      	movs	r3, #0
  400a3e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400a42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a46:	4640      	mov	r0, r8
  400a48:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400a4a:	2300      	movs	r3, #0
  400a4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a50:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a54:	4640      	mov	r0, r8
  400a56:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400a58:	4c3c      	ldr	r4, [pc, #240]	; (400b4c <ssd1306_init+0x1ac>)
  400a5a:	f04f 0902 	mov.w	r9, #2
  400a5e:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400a62:	f04f 0880 	mov.w	r8, #128	; 0x80
  400a66:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400a6a:	6863      	ldr	r3, [r4, #4]
  400a6c:	f043 0301 	orr.w	r3, r3, #1
  400a70:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400a72:	463a      	mov	r2, r7
  400a74:	2101      	movs	r1, #1
  400a76:	4620      	mov	r0, r4
  400a78:	4b35      	ldr	r3, [pc, #212]	; (400b50 <ssd1306_init+0x1b0>)
  400a7a:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400a7c:	2200      	movs	r2, #0
  400a7e:	2101      	movs	r1, #1
  400a80:	4620      	mov	r0, r4
  400a82:	4b34      	ldr	r3, [pc, #208]	; (400b54 <ssd1306_init+0x1b4>)
  400a84:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400a86:	2200      	movs	r2, #0
  400a88:	2101      	movs	r1, #1
  400a8a:	4620      	mov	r0, r4
  400a8c:	4b32      	ldr	r3, [pc, #200]	; (400b58 <ssd1306_init+0x1b8>)
  400a8e:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400a90:	6863      	ldr	r3, [r4, #4]
  400a92:	f023 0302 	bic.w	r3, r3, #2
  400a96:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400a98:	2200      	movs	r2, #0
  400a9a:	2101      	movs	r1, #1
  400a9c:	4620      	mov	r0, r4
  400a9e:	4b2f      	ldr	r3, [pc, #188]	; (400b5c <ssd1306_init+0x1bc>)
  400aa0:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400aa2:	6863      	ldr	r3, [r4, #4]
  400aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400aa8:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400aaa:	6863      	ldr	r3, [r4, #4]
  400aac:	f043 0310 	orr.w	r3, r3, #16
  400ab0:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  400ab2:	492b      	ldr	r1, [pc, #172]	; (400b60 <ssd1306_init+0x1c0>)
  400ab4:	482b      	ldr	r0, [pc, #172]	; (400b64 <ssd1306_init+0x1c4>)
  400ab6:	4b2c      	ldr	r3, [pc, #176]	; (400b68 <ssd1306_init+0x1c8>)
  400ab8:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400aba:	b2c2      	uxtb	r2, r0
  400abc:	2101      	movs	r1, #1
  400abe:	4620      	mov	r0, r4
  400ac0:	4b2a      	ldr	r3, [pc, #168]	; (400b6c <ssd1306_init+0x1cc>)
  400ac2:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400ac4:	4620      	mov	r0, r4
  400ac6:	4b2a      	ldr	r3, [pc, #168]	; (400b70 <ssd1306_init+0x1d0>)
  400ac8:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400aca:	2301      	movs	r3, #1
  400acc:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400ace:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400ad0:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400ad4:	4c27      	ldr	r4, [pc, #156]	; (400b74 <ssd1306_init+0x1d4>)
  400ad6:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ad8:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400ada:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400ade:	47a0      	blx	r4
  400ae0:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400ae2:	20a8      	movs	r0, #168	; 0xa8
  400ae4:	4c24      	ldr	r4, [pc, #144]	; (400b78 <ssd1306_init+0x1d8>)
  400ae6:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400ae8:	201f      	movs	r0, #31
  400aea:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400aec:	20d3      	movs	r0, #211	; 0xd3
  400aee:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400af0:	2000      	movs	r0, #0
  400af2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400af4:	2040      	movs	r0, #64	; 0x40
  400af6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400af8:	20a1      	movs	r0, #161	; 0xa1
  400afa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400afc:	20c8      	movs	r0, #200	; 0xc8
  400afe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400b00:	20da      	movs	r0, #218	; 0xda
  400b02:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400b04:	4648      	mov	r0, r9
  400b06:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400b08:	2081      	movs	r0, #129	; 0x81
  400b0a:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400b0c:	208f      	movs	r0, #143	; 0x8f
  400b0e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400b10:	20a4      	movs	r0, #164	; 0xa4
  400b12:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400b14:	20a6      	movs	r0, #166	; 0xa6
  400b16:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400b18:	20d5      	movs	r0, #213	; 0xd5
  400b1a:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400b1c:	4640      	mov	r0, r8
  400b1e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400b20:	208d      	movs	r0, #141	; 0x8d
  400b22:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400b24:	2014      	movs	r0, #20
  400b26:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400b28:	20db      	movs	r0, #219	; 0xdb
  400b2a:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400b2c:	2040      	movs	r0, #64	; 0x40
  400b2e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400b30:	20d9      	movs	r0, #217	; 0xd9
  400b32:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400b34:	20f1      	movs	r0, #241	; 0xf1
  400b36:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400b38:	20af      	movs	r0, #175	; 0xaf
  400b3a:	47a0      	blx	r4
  400b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400b40:	400e1200 	.word	0x400e1200
  400b44:	400e1000 	.word	0x400e1000
  400b48:	00400e69 	.word	0x00400e69
  400b4c:	40008000 	.word	0x40008000
  400b50:	004004e7 	.word	0x004004e7
  400b54:	004004ab 	.word	0x004004ab
  400b58:	004004c9 	.word	0x004004c9
  400b5c:	0040052d 	.word	0x0040052d
  400b60:	08f0d180 	.word	0x08f0d180
  400b64:	000f4240 	.word	0x000f4240
  400b68:	00400541 	.word	0x00400541
  400b6c:	00400557 	.word	0x00400557
  400b70:	00400435 	.word	0x00400435
  400b74:	20400001 	.word	0x20400001
  400b78:	00400961 	.word	0x00400961
  400b7c:	400e1400 	.word	0x400e1400

00400b80 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400b80:	b538      	push	{r3, r4, r5, lr}
  400b82:	4605      	mov	r5, r0
  400b84:	2208      	movs	r2, #8
  400b86:	4b09      	ldr	r3, [pc, #36]	; (400bac <ssd1306_write_data+0x2c>)
  400b88:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400b8a:	4c09      	ldr	r4, [pc, #36]	; (400bb0 <ssd1306_write_data+0x30>)
  400b8c:	2101      	movs	r1, #1
  400b8e:	4620      	mov	r0, r4
  400b90:	4b08      	ldr	r3, [pc, #32]	; (400bb4 <ssd1306_write_data+0x34>)
  400b92:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400b94:	2301      	movs	r3, #1
  400b96:	461a      	mov	r2, r3
  400b98:	4629      	mov	r1, r5
  400b9a:	4620      	mov	r0, r4
  400b9c:	4c06      	ldr	r4, [pc, #24]	; (400bb8 <ssd1306_write_data+0x38>)
  400b9e:	47a0      	blx	r4
	delay_us(10);
  400ba0:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400ba4:	4b05      	ldr	r3, [pc, #20]	; (400bbc <ssd1306_write_data+0x3c>)
  400ba6:	4798      	blx	r3
  400ba8:	bd38      	pop	{r3, r4, r5, pc}
  400baa:	bf00      	nop
  400bac:	400e1000 	.word	0x400e1000
  400bb0:	40008000 	.word	0x40008000
  400bb4:	00400461 	.word	0x00400461
  400bb8:	00400477 	.word	0x00400477
  400bbc:	20400001 	.word	0x20400001

00400bc0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400bc0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400bc2:	4810      	ldr	r0, [pc, #64]	; (400c04 <sysclk_init+0x44>)
  400bc4:	4b10      	ldr	r3, [pc, #64]	; (400c08 <sysclk_init+0x48>)
  400bc6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400bc8:	213e      	movs	r1, #62	; 0x3e
  400bca:	2000      	movs	r0, #0
  400bcc:	4b0f      	ldr	r3, [pc, #60]	; (400c0c <sysclk_init+0x4c>)
  400bce:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400bd0:	4c0f      	ldr	r4, [pc, #60]	; (400c10 <sysclk_init+0x50>)
  400bd2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400bd4:	2800      	cmp	r0, #0
  400bd6:	d0fc      	beq.n	400bd2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400bd8:	4b0e      	ldr	r3, [pc, #56]	; (400c14 <sysclk_init+0x54>)
  400bda:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400bdc:	4a0e      	ldr	r2, [pc, #56]	; (400c18 <sysclk_init+0x58>)
  400bde:	4b0f      	ldr	r3, [pc, #60]	; (400c1c <sysclk_init+0x5c>)
  400be0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400be2:	4c0f      	ldr	r4, [pc, #60]	; (400c20 <sysclk_init+0x60>)
  400be4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400be6:	2800      	cmp	r0, #0
  400be8:	d0fc      	beq.n	400be4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400bea:	2002      	movs	r0, #2
  400bec:	4b0d      	ldr	r3, [pc, #52]	; (400c24 <sysclk_init+0x64>)
  400bee:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400bf0:	2000      	movs	r0, #0
  400bf2:	4b0d      	ldr	r3, [pc, #52]	; (400c28 <sysclk_init+0x68>)
  400bf4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400bf6:	4b0d      	ldr	r3, [pc, #52]	; (400c2c <sysclk_init+0x6c>)
  400bf8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400bfa:	4802      	ldr	r0, [pc, #8]	; (400c04 <sysclk_init+0x44>)
  400bfc:	4b02      	ldr	r3, [pc, #8]	; (400c08 <sysclk_init+0x48>)
  400bfe:	4798      	blx	r3
  400c00:	bd10      	pop	{r4, pc}
  400c02:	bf00      	nop
  400c04:	11e1a300 	.word	0x11e1a300
  400c08:	00401679 	.word	0x00401679
  400c0c:	00401105 	.word	0x00401105
  400c10:	00401159 	.word	0x00401159
  400c14:	00401169 	.word	0x00401169
  400c18:	20183f01 	.word	0x20183f01
  400c1c:	400e0600 	.word	0x400e0600
  400c20:	00401179 	.word	0x00401179
  400c24:	00401069 	.word	0x00401069
  400c28:	004010a1 	.word	0x004010a1
  400c2c:	0040156d 	.word	0x0040156d

00400c30 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400c32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400c36:	4b48      	ldr	r3, [pc, #288]	; (400d58 <board_init+0x128>)
  400c38:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400c3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c3e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400c42:	4b46      	ldr	r3, [pc, #280]	; (400d5c <board_init+0x12c>)
  400c44:	2200      	movs	r2, #0
  400c46:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400c4a:	695a      	ldr	r2, [r3, #20]
  400c4c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400c50:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400c52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c56:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400c5a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400c5e:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400c62:	f007 0007 	and.w	r0, r7, #7
  400c66:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400c68:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400c6c:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400c70:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400c74:	f3bf 8f4f 	dsb	sy
  400c78:	f04f 34ff 	mov.w	r4, #4294967295
  400c7c:	fa04 fc00 	lsl.w	ip, r4, r0
  400c80:	fa06 f000 	lsl.w	r0, r6, r0
  400c84:	fa04 f40e 	lsl.w	r4, r4, lr
  400c88:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400c8c:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400c8e:	463a      	mov	r2, r7
  400c90:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400c92:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400c96:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400c9a:	3a01      	subs	r2, #1
  400c9c:	4423      	add	r3, r4
  400c9e:	f1b2 3fff 	cmp.w	r2, #4294967295
  400ca2:	d1f6      	bne.n	400c92 <board_init+0x62>
        } while(sets--);
  400ca4:	3e01      	subs	r6, #1
  400ca6:	4460      	add	r0, ip
  400ca8:	f1b6 3fff 	cmp.w	r6, #4294967295
  400cac:	d1ef      	bne.n	400c8e <board_init+0x5e>
  400cae:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400cb2:	4b2a      	ldr	r3, [pc, #168]	; (400d5c <board_init+0x12c>)
  400cb4:	695a      	ldr	r2, [r3, #20]
  400cb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400cba:	615a      	str	r2, [r3, #20]
  400cbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400cc0:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400cc4:	4a26      	ldr	r2, [pc, #152]	; (400d60 <board_init+0x130>)
  400cc6:	4927      	ldr	r1, [pc, #156]	; (400d64 <board_init+0x134>)
  400cc8:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400cca:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400cce:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400cd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400cd4:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400cd8:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400cdc:	f022 0201 	bic.w	r2, r2, #1
  400ce0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400ce4:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400ce8:	f022 0201 	bic.w	r2, r2, #1
  400cec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400cf0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400cf4:	f3bf 8f6f 	isb	sy
  400cf8:	200a      	movs	r0, #10
  400cfa:	4c1b      	ldr	r4, [pc, #108]	; (400d68 <board_init+0x138>)
  400cfc:	47a0      	blx	r4
  400cfe:	200b      	movs	r0, #11
  400d00:	47a0      	blx	r4
  400d02:	200c      	movs	r0, #12
  400d04:	47a0      	blx	r4
  400d06:	2010      	movs	r0, #16
  400d08:	47a0      	blx	r4
  400d0a:	2011      	movs	r0, #17
  400d0c:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d0e:	4b17      	ldr	r3, [pc, #92]	; (400d6c <board_init+0x13c>)
  400d10:	f44f 7280 	mov.w	r2, #256	; 0x100
  400d14:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d16:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d1a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400d1c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400d24:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d26:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400d2a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400d2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d30:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400d32:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400d38:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400d3a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400d3e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400d40:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400d42:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400d46:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400d48:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400d4c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400d50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d56:	bf00      	nop
  400d58:	400e1850 	.word	0x400e1850
  400d5c:	e000ed00 	.word	0xe000ed00
  400d60:	400e0c00 	.word	0x400e0c00
  400d64:	5a00080c 	.word	0x5a00080c
  400d68:	00401189 	.word	0x00401189
  400d6c:	400e1200 	.word	0x400e1200

00400d70 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400d70:	6301      	str	r1, [r0, #48]	; 0x30
  400d72:	4770      	bx	lr

00400d74 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400d74:	6341      	str	r1, [r0, #52]	; 0x34
  400d76:	4770      	bx	lr

00400d78 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400d78:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400d7a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400d7e:	d03a      	beq.n	400df6 <pio_set_peripheral+0x7e>
  400d80:	d813      	bhi.n	400daa <pio_set_peripheral+0x32>
  400d82:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400d86:	d025      	beq.n	400dd4 <pio_set_peripheral+0x5c>
  400d88:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400d8c:	d10a      	bne.n	400da4 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d8e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400d90:	4313      	orrs	r3, r2
  400d92:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d94:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400d96:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400d98:	400b      	ands	r3, r1
  400d9a:	ea23 0302 	bic.w	r3, r3, r2
  400d9e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400da0:	6042      	str	r2, [r0, #4]
  400da2:	4770      	bx	lr
	switch (ul_type) {
  400da4:	2900      	cmp	r1, #0
  400da6:	d1fb      	bne.n	400da0 <pio_set_peripheral+0x28>
  400da8:	4770      	bx	lr
  400daa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400dae:	d021      	beq.n	400df4 <pio_set_peripheral+0x7c>
  400db0:	d809      	bhi.n	400dc6 <pio_set_peripheral+0x4e>
  400db2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400db6:	d1f3      	bne.n	400da0 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400db8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400dba:	4313      	orrs	r3, r2
  400dbc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400dbe:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400dc0:	4313      	orrs	r3, r2
  400dc2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400dc4:	e7ec      	b.n	400da0 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400dc6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400dca:	d013      	beq.n	400df4 <pio_set_peripheral+0x7c>
  400dcc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400dd0:	d010      	beq.n	400df4 <pio_set_peripheral+0x7c>
  400dd2:	e7e5      	b.n	400da0 <pio_set_peripheral+0x28>
{
  400dd4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400dd6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400dd8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400dda:	43d3      	mvns	r3, r2
  400ddc:	4021      	ands	r1, r4
  400dde:	461c      	mov	r4, r3
  400de0:	4019      	ands	r1, r3
  400de2:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400de4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400de6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400de8:	400b      	ands	r3, r1
  400dea:	4023      	ands	r3, r4
  400dec:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400dee:	6042      	str	r2, [r0, #4]
}
  400df0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400df4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400df6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400df8:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400dfa:	400b      	ands	r3, r1
  400dfc:	ea23 0302 	bic.w	r3, r3, r2
  400e00:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400e02:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400e04:	4313      	orrs	r3, r2
  400e06:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400e08:	e7ca      	b.n	400da0 <pio_set_peripheral+0x28>

00400e0a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400e0a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400e0c:	f012 0f01 	tst.w	r2, #1
  400e10:	d10d      	bne.n	400e2e <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400e12:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400e14:	f012 0f0a 	tst.w	r2, #10
  400e18:	d00b      	beq.n	400e32 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400e1a:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400e1c:	f012 0f02 	tst.w	r2, #2
  400e20:	d109      	bne.n	400e36 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400e22:	f012 0f08 	tst.w	r2, #8
  400e26:	d008      	beq.n	400e3a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400e28:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400e2c:	e005      	b.n	400e3a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400e2e:	6641      	str	r1, [r0, #100]	; 0x64
  400e30:	e7f0      	b.n	400e14 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400e32:	6241      	str	r1, [r0, #36]	; 0x24
  400e34:	e7f2      	b.n	400e1c <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400e36:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400e3a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400e3c:	6001      	str	r1, [r0, #0]
  400e3e:	4770      	bx	lr

00400e40 <pio_set_output>:
{
  400e40:	b410      	push	{r4}
  400e42:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400e44:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400e46:	b94c      	cbnz	r4, 400e5c <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400e48:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400e4a:	b14b      	cbz	r3, 400e60 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400e4c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400e4e:	b94a      	cbnz	r2, 400e64 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400e50:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400e52:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400e54:	6001      	str	r1, [r0, #0]
}
  400e56:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e5a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400e5c:	6641      	str	r1, [r0, #100]	; 0x64
  400e5e:	e7f4      	b.n	400e4a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400e60:	6541      	str	r1, [r0, #84]	; 0x54
  400e62:	e7f4      	b.n	400e4e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400e64:	6301      	str	r1, [r0, #48]	; 0x30
  400e66:	e7f4      	b.n	400e52 <pio_set_output+0x12>

00400e68 <pio_configure>:
{
  400e68:	b570      	push	{r4, r5, r6, lr}
  400e6a:	b082      	sub	sp, #8
  400e6c:	4605      	mov	r5, r0
  400e6e:	4616      	mov	r6, r2
  400e70:	461c      	mov	r4, r3
	switch (ul_type) {
  400e72:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400e76:	d014      	beq.n	400ea2 <pio_configure+0x3a>
  400e78:	d90a      	bls.n	400e90 <pio_configure+0x28>
  400e7a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400e7e:	d024      	beq.n	400eca <pio_configure+0x62>
  400e80:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400e84:	d021      	beq.n	400eca <pio_configure+0x62>
  400e86:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400e8a:	d017      	beq.n	400ebc <pio_configure+0x54>
		return 0;
  400e8c:	2000      	movs	r0, #0
  400e8e:	e01a      	b.n	400ec6 <pio_configure+0x5e>
	switch (ul_type) {
  400e90:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400e94:	d005      	beq.n	400ea2 <pio_configure+0x3a>
  400e96:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400e9a:	d002      	beq.n	400ea2 <pio_configure+0x3a>
  400e9c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400ea0:	d1f4      	bne.n	400e8c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400ea2:	4632      	mov	r2, r6
  400ea4:	4628      	mov	r0, r5
  400ea6:	4b11      	ldr	r3, [pc, #68]	; (400eec <pio_configure+0x84>)
  400ea8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400eaa:	f014 0f01 	tst.w	r4, #1
  400eae:	d102      	bne.n	400eb6 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400eb0:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400eb2:	2001      	movs	r0, #1
  400eb4:	e007      	b.n	400ec6 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400eb6:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400eb8:	2001      	movs	r0, #1
  400eba:	e004      	b.n	400ec6 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400ebc:	461a      	mov	r2, r3
  400ebe:	4631      	mov	r1, r6
  400ec0:	4b0b      	ldr	r3, [pc, #44]	; (400ef0 <pio_configure+0x88>)
  400ec2:	4798      	blx	r3
	return 1;
  400ec4:	2001      	movs	r0, #1
}
  400ec6:	b002      	add	sp, #8
  400ec8:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400eca:	f004 0301 	and.w	r3, r4, #1
  400ece:	9300      	str	r3, [sp, #0]
  400ed0:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400ed4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400ed8:	bf14      	ite	ne
  400eda:	2200      	movne	r2, #0
  400edc:	2201      	moveq	r2, #1
  400ede:	4631      	mov	r1, r6
  400ee0:	4628      	mov	r0, r5
  400ee2:	4c04      	ldr	r4, [pc, #16]	; (400ef4 <pio_configure+0x8c>)
  400ee4:	47a0      	blx	r4
	return 1;
  400ee6:	2001      	movs	r0, #1
		break;
  400ee8:	e7ed      	b.n	400ec6 <pio_configure+0x5e>
  400eea:	bf00      	nop
  400eec:	00400d79 	.word	0x00400d79
  400ef0:	00400e0b 	.word	0x00400e0b
  400ef4:	00400e41 	.word	0x00400e41

00400ef8 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  400ef8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400efa:	420b      	tst	r3, r1
}
  400efc:	bf14      	ite	ne
  400efe:	2001      	movne	r0, #1
  400f00:	2000      	moveq	r0, #0
  400f02:	4770      	bx	lr

00400f04 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400f04:	f012 0f10 	tst.w	r2, #16
  400f08:	d012      	beq.n	400f30 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400f0a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400f0e:	f012 0f20 	tst.w	r2, #32
  400f12:	d007      	beq.n	400f24 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400f14:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400f18:	f012 0f40 	tst.w	r2, #64	; 0x40
  400f1c:	d005      	beq.n	400f2a <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400f1e:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400f22:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400f24:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400f28:	e7f6      	b.n	400f18 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400f2a:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400f2e:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400f30:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400f34:	4770      	bx	lr

00400f36 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400f36:	6401      	str	r1, [r0, #64]	; 0x40
  400f38:	4770      	bx	lr

00400f3a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400f3a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400f3c:	4770      	bx	lr

00400f3e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400f3e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400f40:	4770      	bx	lr
	...

00400f44 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f48:	4604      	mov	r4, r0
  400f4a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400f4c:	4b0e      	ldr	r3, [pc, #56]	; (400f88 <pio_handler_process+0x44>)
  400f4e:	4798      	blx	r3
  400f50:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400f52:	4620      	mov	r0, r4
  400f54:	4b0d      	ldr	r3, [pc, #52]	; (400f8c <pio_handler_process+0x48>)
  400f56:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400f58:	4005      	ands	r5, r0
  400f5a:	d013      	beq.n	400f84 <pio_handler_process+0x40>
  400f5c:	4c0c      	ldr	r4, [pc, #48]	; (400f90 <pio_handler_process+0x4c>)
  400f5e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400f62:	e003      	b.n	400f6c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400f64:	42b4      	cmp	r4, r6
  400f66:	d00d      	beq.n	400f84 <pio_handler_process+0x40>
  400f68:	3410      	adds	r4, #16
		while (status != 0) {
  400f6a:	b15d      	cbz	r5, 400f84 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400f6c:	6820      	ldr	r0, [r4, #0]
  400f6e:	4540      	cmp	r0, r8
  400f70:	d1f8      	bne.n	400f64 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400f72:	6861      	ldr	r1, [r4, #4]
  400f74:	4229      	tst	r1, r5
  400f76:	d0f5      	beq.n	400f64 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400f78:	68e3      	ldr	r3, [r4, #12]
  400f7a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400f7c:	6863      	ldr	r3, [r4, #4]
  400f7e:	ea25 0503 	bic.w	r5, r5, r3
  400f82:	e7ef      	b.n	400f64 <pio_handler_process+0x20>
  400f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f88:	00400f3b 	.word	0x00400f3b
  400f8c:	00400f3f 	.word	0x00400f3f
  400f90:	20400bf4 	.word	0x20400bf4

00400f94 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400f96:	4c18      	ldr	r4, [pc, #96]	; (400ff8 <pio_handler_set+0x64>)
  400f98:	6826      	ldr	r6, [r4, #0]
  400f9a:	2e06      	cmp	r6, #6
  400f9c:	d82a      	bhi.n	400ff4 <pio_handler_set+0x60>
  400f9e:	f04f 0c00 	mov.w	ip, #0
  400fa2:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400fa4:	4f15      	ldr	r7, [pc, #84]	; (400ffc <pio_handler_set+0x68>)
  400fa6:	e004      	b.n	400fb2 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400fa8:	3401      	adds	r4, #1
  400faa:	b2e4      	uxtb	r4, r4
  400fac:	46a4      	mov	ip, r4
  400fae:	42a6      	cmp	r6, r4
  400fb0:	d309      	bcc.n	400fc6 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400fb2:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400fb4:	0125      	lsls	r5, r4, #4
  400fb6:	597d      	ldr	r5, [r7, r5]
  400fb8:	428d      	cmp	r5, r1
  400fba:	d1f5      	bne.n	400fa8 <pio_handler_set+0x14>
  400fbc:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400fc0:	686d      	ldr	r5, [r5, #4]
  400fc2:	4295      	cmp	r5, r2
  400fc4:	d1f0      	bne.n	400fa8 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400fc6:	4d0d      	ldr	r5, [pc, #52]	; (400ffc <pio_handler_set+0x68>)
  400fc8:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400fcc:	eb05 040e 	add.w	r4, r5, lr
  400fd0:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400fd4:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400fd6:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400fd8:	9906      	ldr	r1, [sp, #24]
  400fda:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400fdc:	3601      	adds	r6, #1
  400fde:	4566      	cmp	r6, ip
  400fe0:	d005      	beq.n	400fee <pio_handler_set+0x5a>
  400fe2:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400fe4:	461a      	mov	r2, r3
  400fe6:	4b06      	ldr	r3, [pc, #24]	; (401000 <pio_handler_set+0x6c>)
  400fe8:	4798      	blx	r3

	return 0;
  400fea:	2000      	movs	r0, #0
  400fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400fee:	4902      	ldr	r1, [pc, #8]	; (400ff8 <pio_handler_set+0x64>)
  400ff0:	600e      	str	r6, [r1, #0]
  400ff2:	e7f6      	b.n	400fe2 <pio_handler_set+0x4e>
		return 1;
  400ff4:	2001      	movs	r0, #1
}
  400ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ff8:	20400c64 	.word	0x20400c64
  400ffc:	20400bf4 	.word	0x20400bf4
  401000:	00400f05 	.word	0x00400f05

00401004 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401004:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401006:	210a      	movs	r1, #10
  401008:	4801      	ldr	r0, [pc, #4]	; (401010 <PIOA_Handler+0xc>)
  40100a:	4b02      	ldr	r3, [pc, #8]	; (401014 <PIOA_Handler+0x10>)
  40100c:	4798      	blx	r3
  40100e:	bd08      	pop	{r3, pc}
  401010:	400e0e00 	.word	0x400e0e00
  401014:	00400f45 	.word	0x00400f45

00401018 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401018:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40101a:	210b      	movs	r1, #11
  40101c:	4801      	ldr	r0, [pc, #4]	; (401024 <PIOB_Handler+0xc>)
  40101e:	4b02      	ldr	r3, [pc, #8]	; (401028 <PIOB_Handler+0x10>)
  401020:	4798      	blx	r3
  401022:	bd08      	pop	{r3, pc}
  401024:	400e1000 	.word	0x400e1000
  401028:	00400f45 	.word	0x00400f45

0040102c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40102c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40102e:	210c      	movs	r1, #12
  401030:	4801      	ldr	r0, [pc, #4]	; (401038 <PIOC_Handler+0xc>)
  401032:	4b02      	ldr	r3, [pc, #8]	; (40103c <PIOC_Handler+0x10>)
  401034:	4798      	blx	r3
  401036:	bd08      	pop	{r3, pc}
  401038:	400e1200 	.word	0x400e1200
  40103c:	00400f45 	.word	0x00400f45

00401040 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401040:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401042:	2110      	movs	r1, #16
  401044:	4801      	ldr	r0, [pc, #4]	; (40104c <PIOD_Handler+0xc>)
  401046:	4b02      	ldr	r3, [pc, #8]	; (401050 <PIOD_Handler+0x10>)
  401048:	4798      	blx	r3
  40104a:	bd08      	pop	{r3, pc}
  40104c:	400e1400 	.word	0x400e1400
  401050:	00400f45 	.word	0x00400f45

00401054 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401054:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401056:	2111      	movs	r1, #17
  401058:	4801      	ldr	r0, [pc, #4]	; (401060 <PIOE_Handler+0xc>)
  40105a:	4b02      	ldr	r3, [pc, #8]	; (401064 <PIOE_Handler+0x10>)
  40105c:	4798      	blx	r3
  40105e:	bd08      	pop	{r3, pc}
  401060:	400e1600 	.word	0x400e1600
  401064:	00400f45 	.word	0x00400f45

00401068 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401068:	2803      	cmp	r0, #3
  40106a:	d011      	beq.n	401090 <pmc_mck_set_division+0x28>
  40106c:	2804      	cmp	r0, #4
  40106e:	d012      	beq.n	401096 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401070:	2802      	cmp	r0, #2
  401072:	bf0c      	ite	eq
  401074:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401078:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40107a:	4a08      	ldr	r2, [pc, #32]	; (40109c <pmc_mck_set_division+0x34>)
  40107c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40107e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401082:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401084:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401086:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401088:	f013 0f08 	tst.w	r3, #8
  40108c:	d0fb      	beq.n	401086 <pmc_mck_set_division+0x1e>
}
  40108e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401090:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401094:	e7f1      	b.n	40107a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401096:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40109a:	e7ee      	b.n	40107a <pmc_mck_set_division+0x12>
  40109c:	400e0600 	.word	0x400e0600

004010a0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4010a0:	4a17      	ldr	r2, [pc, #92]	; (401100 <pmc_switch_mck_to_pllack+0x60>)
  4010a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4010a8:	4318      	orrs	r0, r3
  4010aa:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4010ac:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010ae:	f013 0f08 	tst.w	r3, #8
  4010b2:	d10a      	bne.n	4010ca <pmc_switch_mck_to_pllack+0x2a>
  4010b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4010b8:	4911      	ldr	r1, [pc, #68]	; (401100 <pmc_switch_mck_to_pllack+0x60>)
  4010ba:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4010bc:	f012 0f08 	tst.w	r2, #8
  4010c0:	d103      	bne.n	4010ca <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4010c2:	3b01      	subs	r3, #1
  4010c4:	d1f9      	bne.n	4010ba <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4010c6:	2001      	movs	r0, #1
  4010c8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4010ca:	4a0d      	ldr	r2, [pc, #52]	; (401100 <pmc_switch_mck_to_pllack+0x60>)
  4010cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010ce:	f023 0303 	bic.w	r3, r3, #3
  4010d2:	f043 0302 	orr.w	r3, r3, #2
  4010d6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4010d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010da:	f013 0f08 	tst.w	r3, #8
  4010de:	d10a      	bne.n	4010f6 <pmc_switch_mck_to_pllack+0x56>
  4010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4010e4:	4906      	ldr	r1, [pc, #24]	; (401100 <pmc_switch_mck_to_pllack+0x60>)
  4010e6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4010e8:	f012 0f08 	tst.w	r2, #8
  4010ec:	d105      	bne.n	4010fa <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4010ee:	3b01      	subs	r3, #1
  4010f0:	d1f9      	bne.n	4010e6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4010f2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4010f4:	4770      	bx	lr
	return 0;
  4010f6:	2000      	movs	r0, #0
  4010f8:	4770      	bx	lr
  4010fa:	2000      	movs	r0, #0
  4010fc:	4770      	bx	lr
  4010fe:	bf00      	nop
  401100:	400e0600 	.word	0x400e0600

00401104 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401104:	b9a0      	cbnz	r0, 401130 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401106:	480e      	ldr	r0, [pc, #56]	; (401140 <pmc_switch_mainck_to_xtal+0x3c>)
  401108:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40110a:	0209      	lsls	r1, r1, #8
  40110c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40110e:	4a0d      	ldr	r2, [pc, #52]	; (401144 <pmc_switch_mainck_to_xtal+0x40>)
  401110:	401a      	ands	r2, r3
  401112:	4b0d      	ldr	r3, [pc, #52]	; (401148 <pmc_switch_mainck_to_xtal+0x44>)
  401114:	4313      	orrs	r3, r2
  401116:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401118:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40111a:	4602      	mov	r2, r0
  40111c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40111e:	f013 0f01 	tst.w	r3, #1
  401122:	d0fb      	beq.n	40111c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401124:	4a06      	ldr	r2, [pc, #24]	; (401140 <pmc_switch_mainck_to_xtal+0x3c>)
  401126:	6a11      	ldr	r1, [r2, #32]
  401128:	4b08      	ldr	r3, [pc, #32]	; (40114c <pmc_switch_mainck_to_xtal+0x48>)
  40112a:	430b      	orrs	r3, r1
  40112c:	6213      	str	r3, [r2, #32]
  40112e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401130:	4903      	ldr	r1, [pc, #12]	; (401140 <pmc_switch_mainck_to_xtal+0x3c>)
  401132:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401134:	4a06      	ldr	r2, [pc, #24]	; (401150 <pmc_switch_mainck_to_xtal+0x4c>)
  401136:	401a      	ands	r2, r3
  401138:	4b06      	ldr	r3, [pc, #24]	; (401154 <pmc_switch_mainck_to_xtal+0x50>)
  40113a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40113c:	620b      	str	r3, [r1, #32]
  40113e:	4770      	bx	lr
  401140:	400e0600 	.word	0x400e0600
  401144:	ffc8fffc 	.word	0xffc8fffc
  401148:	00370001 	.word	0x00370001
  40114c:	01370000 	.word	0x01370000
  401150:	fec8fffc 	.word	0xfec8fffc
  401154:	01370002 	.word	0x01370002

00401158 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401158:	4b02      	ldr	r3, [pc, #8]	; (401164 <pmc_osc_is_ready_mainck+0xc>)
  40115a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40115c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401160:	4770      	bx	lr
  401162:	bf00      	nop
  401164:	400e0600 	.word	0x400e0600

00401168 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401168:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40116c:	4b01      	ldr	r3, [pc, #4]	; (401174 <pmc_disable_pllack+0xc>)
  40116e:	629a      	str	r2, [r3, #40]	; 0x28
  401170:	4770      	bx	lr
  401172:	bf00      	nop
  401174:	400e0600 	.word	0x400e0600

00401178 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401178:	4b02      	ldr	r3, [pc, #8]	; (401184 <pmc_is_locked_pllack+0xc>)
  40117a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40117c:	f000 0002 	and.w	r0, r0, #2
  401180:	4770      	bx	lr
  401182:	bf00      	nop
  401184:	400e0600 	.word	0x400e0600

00401188 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401188:	283f      	cmp	r0, #63	; 0x3f
  40118a:	d81e      	bhi.n	4011ca <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40118c:	281f      	cmp	r0, #31
  40118e:	d80c      	bhi.n	4011aa <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401190:	4b11      	ldr	r3, [pc, #68]	; (4011d8 <pmc_enable_periph_clk+0x50>)
  401192:	699a      	ldr	r2, [r3, #24]
  401194:	2301      	movs	r3, #1
  401196:	4083      	lsls	r3, r0
  401198:	4393      	bics	r3, r2
  40119a:	d018      	beq.n	4011ce <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40119c:	2301      	movs	r3, #1
  40119e:	fa03 f000 	lsl.w	r0, r3, r0
  4011a2:	4b0d      	ldr	r3, [pc, #52]	; (4011d8 <pmc_enable_periph_clk+0x50>)
  4011a4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4011a6:	2000      	movs	r0, #0
  4011a8:	4770      	bx	lr
		ul_id -= 32;
  4011aa:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4011ac:	4b0a      	ldr	r3, [pc, #40]	; (4011d8 <pmc_enable_periph_clk+0x50>)
  4011ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4011b2:	2301      	movs	r3, #1
  4011b4:	4083      	lsls	r3, r0
  4011b6:	4393      	bics	r3, r2
  4011b8:	d00b      	beq.n	4011d2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4011ba:	2301      	movs	r3, #1
  4011bc:	fa03 f000 	lsl.w	r0, r3, r0
  4011c0:	4b05      	ldr	r3, [pc, #20]	; (4011d8 <pmc_enable_periph_clk+0x50>)
  4011c2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4011c6:	2000      	movs	r0, #0
  4011c8:	4770      	bx	lr
		return 1;
  4011ca:	2001      	movs	r0, #1
  4011cc:	4770      	bx	lr
	return 0;
  4011ce:	2000      	movs	r0, #0
  4011d0:	4770      	bx	lr
  4011d2:	2000      	movs	r0, #0
}
  4011d4:	4770      	bx	lr
  4011d6:	bf00      	nop
  4011d8:	400e0600 	.word	0x400e0600

004011dc <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4011dc:	4770      	bx	lr
	...

004011e0 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4011e0:	4a10      	ldr	r2, [pc, #64]	; (401224 <pmc_enable_waitmode+0x44>)
  4011e2:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4011e4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4011e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  4011ec:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4011ee:	6a11      	ldr	r1, [r2, #32]
  4011f0:	4b0d      	ldr	r3, [pc, #52]	; (401228 <pmc_enable_waitmode+0x48>)
  4011f2:	430b      	orrs	r3, r1
  4011f4:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4011f6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011f8:	f013 0f08 	tst.w	r3, #8
  4011fc:	d0fb      	beq.n	4011f6 <pmc_enable_waitmode+0x16>
  4011fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  401202:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  401204:	3b01      	subs	r3, #1
  401206:	d1fc      	bne.n	401202 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  401208:	4a06      	ldr	r2, [pc, #24]	; (401224 <pmc_enable_waitmode+0x44>)
  40120a:	6a13      	ldr	r3, [r2, #32]
  40120c:	f013 0f08 	tst.w	r3, #8
  401210:	d0fb      	beq.n	40120a <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  401212:	4a04      	ldr	r2, [pc, #16]	; (401224 <pmc_enable_waitmode+0x44>)
  401214:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  401216:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  40121a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  40121e:	6713      	str	r3, [r2, #112]	; 0x70
  401220:	4770      	bx	lr
  401222:	bf00      	nop
  401224:	400e0600 	.word	0x400e0600
  401228:	00370004 	.word	0x00370004

0040122c <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  40122c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  401230:	1e43      	subs	r3, r0, #1
  401232:	2b04      	cmp	r3, #4
  401234:	f200 8107 	bhi.w	401446 <pmc_sleep+0x21a>
  401238:	e8df f013 	tbh	[pc, r3, lsl #1]
  40123c:	00050005 	.word	0x00050005
  401240:	00150015 	.word	0x00150015
  401244:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  401246:	4a81      	ldr	r2, [pc, #516]	; (40144c <pmc_sleep+0x220>)
  401248:	6913      	ldr	r3, [r2, #16]
  40124a:	f023 0304 	bic.w	r3, r3, #4
  40124e:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  401250:	2201      	movs	r2, #1
  401252:	4b7f      	ldr	r3, [pc, #508]	; (401450 <pmc_sleep+0x224>)
  401254:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401256:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40125a:	b662      	cpsie	i
  __ASM volatile ("dsb");
  40125c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  401260:	bf30      	wfi
  401262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401266:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  401268:	2803      	cmp	r0, #3
  40126a:	bf0c      	ite	eq
  40126c:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40126e:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  401272:	4b78      	ldr	r3, [pc, #480]	; (401454 <pmc_sleep+0x228>)
  401274:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401276:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401278:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40127c:	2200      	movs	r2, #0
  40127e:	4b74      	ldr	r3, [pc, #464]	; (401450 <pmc_sleep+0x224>)
  401280:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  401282:	2201      	movs	r2, #1
  401284:	4b74      	ldr	r3, [pc, #464]	; (401458 <pmc_sleep+0x22c>)
  401286:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  401288:	4b74      	ldr	r3, [pc, #464]	; (40145c <pmc_sleep+0x230>)
  40128a:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  40128c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40128e:	4a74      	ldr	r2, [pc, #464]	; (401460 <pmc_sleep+0x234>)
  401290:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  401294:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  401296:	4a73      	ldr	r2, [pc, #460]	; (401464 <pmc_sleep+0x238>)
  401298:	433a      	orrs	r2, r7
  40129a:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  40129c:	f005 0903 	and.w	r9, r5, #3
  4012a0:	f1b9 0f01 	cmp.w	r9, #1
  4012a4:	f240 8089 	bls.w	4013ba <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  4012a8:	f025 0103 	bic.w	r1, r5, #3
  4012ac:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  4012b0:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4012b2:	461a      	mov	r2, r3
  4012b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012b6:	f013 0f08 	tst.w	r3, #8
  4012ba:	d0fb      	beq.n	4012b4 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  4012bc:	f011 0f70 	tst.w	r1, #112	; 0x70
  4012c0:	d008      	beq.n	4012d4 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  4012c2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  4012c6:	4b65      	ldr	r3, [pc, #404]	; (40145c <pmc_sleep+0x230>)
  4012c8:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4012ca:	461a      	mov	r2, r3
  4012cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012ce:	f013 0f08 	tst.w	r3, #8
  4012d2:	d0fb      	beq.n	4012cc <pmc_sleep+0xa0>
	pmc_disable_pllack();
  4012d4:	4b64      	ldr	r3, [pc, #400]	; (401468 <pmc_sleep+0x23c>)
  4012d6:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4012d8:	4a60      	ldr	r2, [pc, #384]	; (40145c <pmc_sleep+0x230>)
  4012da:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4012e0:	d0fb      	beq.n	4012da <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4012e2:	4a5e      	ldr	r2, [pc, #376]	; (40145c <pmc_sleep+0x230>)
  4012e4:	6a11      	ldr	r1, [r2, #32]
  4012e6:	4b61      	ldr	r3, [pc, #388]	; (40146c <pmc_sleep+0x240>)
  4012e8:	400b      	ands	r3, r1
  4012ea:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4012ee:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4012f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4012f6:	d0fb      	beq.n	4012f0 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4012f8:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  4012fc:	4a58      	ldr	r2, [pc, #352]	; (401460 <pmc_sleep+0x234>)
  4012fe:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  401300:	2c04      	cmp	r4, #4
  401302:	d05c      	beq.n	4013be <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  401304:	4c52      	ldr	r4, [pc, #328]	; (401450 <pmc_sleep+0x224>)
  401306:	2301      	movs	r3, #1
  401308:	7023      	strb	r3, [r4, #0]
  40130a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40130e:	b662      	cpsie	i

		pmc_enable_waitmode();
  401310:	4b57      	ldr	r3, [pc, #348]	; (401470 <pmc_sleep+0x244>)
  401312:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  401314:	b672      	cpsid	i
  401316:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  40131a:	2300      	movs	r3, #0
  40131c:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  40131e:	f017 0f02 	tst.w	r7, #2
  401322:	d055      	beq.n	4013d0 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401324:	4a4d      	ldr	r2, [pc, #308]	; (40145c <pmc_sleep+0x230>)
  401326:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401328:	4952      	ldr	r1, [pc, #328]	; (401474 <pmc_sleep+0x248>)
  40132a:	4019      	ands	r1, r3
  40132c:	4b52      	ldr	r3, [pc, #328]	; (401478 <pmc_sleep+0x24c>)
  40132e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401330:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401332:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  401334:	4b51      	ldr	r3, [pc, #324]	; (40147c <pmc_sleep+0x250>)
  401336:	400b      	ands	r3, r1
  401338:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40133c:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  40133e:	4b50      	ldr	r3, [pc, #320]	; (401480 <pmc_sleep+0x254>)
  401340:	4033      	ands	r3, r6
  401342:	2b00      	cmp	r3, #0
  401344:	d06e      	beq.n	401424 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  401346:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  40134a:	4b44      	ldr	r3, [pc, #272]	; (40145c <pmc_sleep+0x230>)
  40134c:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  40134e:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  401350:	f1b9 0f02 	cmp.w	r9, #2
  401354:	d104      	bne.n	401360 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  401356:	4a41      	ldr	r2, [pc, #260]	; (40145c <pmc_sleep+0x230>)
  401358:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40135a:	f013 0f02 	tst.w	r3, #2
  40135e:	d0fb      	beq.n	401358 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  401360:	4a3e      	ldr	r2, [pc, #248]	; (40145c <pmc_sleep+0x230>)
  401362:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  401368:	f005 0070 	and.w	r0, r5, #112	; 0x70
  40136c:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40136e:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401370:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401372:	f013 0f08 	tst.w	r3, #8
  401376:	d0fb      	beq.n	401370 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  401378:	4b39      	ldr	r3, [pc, #228]	; (401460 <pmc_sleep+0x234>)
  40137a:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  40137e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  401382:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401384:	461a      	mov	r2, r3
  401386:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401388:	f013 0f08 	tst.w	r3, #8
  40138c:	d0fb      	beq.n	401386 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  40138e:	4a33      	ldr	r2, [pc, #204]	; (40145c <pmc_sleep+0x230>)
  401390:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401392:	420b      	tst	r3, r1
  401394:	d0fc      	beq.n	401390 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  401396:	2200      	movs	r2, #0
  401398:	4b2f      	ldr	r3, [pc, #188]	; (401458 <pmc_sleep+0x22c>)
  40139a:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  40139c:	4b39      	ldr	r3, [pc, #228]	; (401484 <pmc_sleep+0x258>)
  40139e:	681b      	ldr	r3, [r3, #0]
  4013a0:	b11b      	cbz	r3, 4013aa <pmc_sleep+0x17e>
			callback_clocks_restored();
  4013a2:	4798      	blx	r3
			callback_clocks_restored = NULL;
  4013a4:	2200      	movs	r2, #0
  4013a6:	4b37      	ldr	r3, [pc, #220]	; (401484 <pmc_sleep+0x258>)
  4013a8:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  4013aa:	2201      	movs	r2, #1
  4013ac:	4b28      	ldr	r3, [pc, #160]	; (401450 <pmc_sleep+0x224>)
  4013ae:	701a      	strb	r2, [r3, #0]
  4013b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4013b4:	b662      	cpsie	i
  4013b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  4013ba:	4629      	mov	r1, r5
  4013bc:	e77e      	b.n	4012bc <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4013be:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  4013c2:	6a11      	ldr	r1, [r2, #32]
  4013c4:	4b30      	ldr	r3, [pc, #192]	; (401488 <pmc_sleep+0x25c>)
  4013c6:	400b      	ands	r3, r1
  4013c8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4013cc:	6213      	str	r3, [r2, #32]
  4013ce:	e799      	b.n	401304 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4013d0:	f017 0f01 	tst.w	r7, #1
  4013d4:	d0b3      	beq.n	40133e <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  4013d6:	4b21      	ldr	r3, [pc, #132]	; (40145c <pmc_sleep+0x230>)
  4013d8:	6a1b      	ldr	r3, [r3, #32]
  4013da:	f013 0f01 	tst.w	r3, #1
  4013de:	d10b      	bne.n	4013f8 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4013e0:	491e      	ldr	r1, [pc, #120]	; (40145c <pmc_sleep+0x230>)
  4013e2:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  4013e4:	4a29      	ldr	r2, [pc, #164]	; (40148c <pmc_sleep+0x260>)
  4013e6:	401a      	ands	r2, r3
  4013e8:	4b29      	ldr	r3, [pc, #164]	; (401490 <pmc_sleep+0x264>)
  4013ea:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4013ec:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4013ee:	460a      	mov	r2, r1
  4013f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013f2:	f013 0f01 	tst.w	r3, #1
  4013f6:	d0fb      	beq.n	4013f0 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4013f8:	4b18      	ldr	r3, [pc, #96]	; (40145c <pmc_sleep+0x230>)
  4013fa:	6a1b      	ldr	r3, [r3, #32]
  4013fc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401400:	d108      	bne.n	401414 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401402:	4a16      	ldr	r2, [pc, #88]	; (40145c <pmc_sleep+0x230>)
  401404:	6a11      	ldr	r1, [r2, #32]
  401406:	4b23      	ldr	r3, [pc, #140]	; (401494 <pmc_sleep+0x268>)
  401408:	430b      	orrs	r3, r1
  40140a:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40140c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40140e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401412:	d0fb      	beq.n	40140c <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401414:	4a11      	ldr	r2, [pc, #68]	; (40145c <pmc_sleep+0x230>)
  401416:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  401418:	4b18      	ldr	r3, [pc, #96]	; (40147c <pmc_sleep+0x250>)
  40141a:	400b      	ands	r3, r1
  40141c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401420:	6213      	str	r3, [r2, #32]
  401422:	e78c      	b.n	40133e <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  401424:	2100      	movs	r1, #0
  401426:	e793      	b.n	401350 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  401428:	4a08      	ldr	r2, [pc, #32]	; (40144c <pmc_sleep+0x220>)
  40142a:	6913      	ldr	r3, [r2, #16]
  40142c:	f043 0304 	orr.w	r3, r3, #4
  401430:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  401432:	4a19      	ldr	r2, [pc, #100]	; (401498 <pmc_sleep+0x26c>)
  401434:	4b19      	ldr	r3, [pc, #100]	; (40149c <pmc_sleep+0x270>)
  401436:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  401438:	2201      	movs	r2, #1
  40143a:	4b05      	ldr	r3, [pc, #20]	; (401450 <pmc_sleep+0x224>)
  40143c:	701a      	strb	r2, [r3, #0]
  40143e:	f3bf 8f5f 	dmb	sy
  401442:	b662      	cpsie	i
  __ASM volatile ("wfi");
  401444:	bf30      	wfi
  401446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40144a:	bf00      	nop
  40144c:	e000ed00 	.word	0xe000ed00
  401450:	20400018 	.word	0x20400018
  401454:	004011dd 	.word	0x004011dd
  401458:	20400c68 	.word	0x20400c68
  40145c:	400e0600 	.word	0x400e0600
  401460:	400e0c00 	.word	0x400e0c00
  401464:	00370008 	.word	0x00370008
  401468:	00401169 	.word	0x00401169
  40146c:	fec8ffff 	.word	0xfec8ffff
  401470:	004011e1 	.word	0x004011e1
  401474:	fec8fffc 	.word	0xfec8fffc
  401478:	01370002 	.word	0x01370002
  40147c:	ffc8ff87 	.word	0xffc8ff87
  401480:	07ff0000 	.word	0x07ff0000
  401484:	20400c6c 	.word	0x20400c6c
  401488:	ffc8fffe 	.word	0xffc8fffe
  40148c:	ffc8fffc 	.word	0xffc8fffc
  401490:	00370001 	.word	0x00370001
  401494:	01370000 	.word	0x01370000
  401498:	a5000004 	.word	0xa5000004
  40149c:	400e1810 	.word	0x400e1810

004014a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4014a0:	e7fe      	b.n	4014a0 <Dummy_Handler>
	...

004014a4 <Reset_Handler>:
{
  4014a4:	b500      	push	{lr}
  4014a6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4014a8:	4b25      	ldr	r3, [pc, #148]	; (401540 <Reset_Handler+0x9c>)
  4014aa:	4a26      	ldr	r2, [pc, #152]	; (401544 <Reset_Handler+0xa0>)
  4014ac:	429a      	cmp	r2, r3
  4014ae:	d010      	beq.n	4014d2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4014b0:	4b25      	ldr	r3, [pc, #148]	; (401548 <Reset_Handler+0xa4>)
  4014b2:	4a23      	ldr	r2, [pc, #140]	; (401540 <Reset_Handler+0x9c>)
  4014b4:	429a      	cmp	r2, r3
  4014b6:	d20c      	bcs.n	4014d2 <Reset_Handler+0x2e>
  4014b8:	3b01      	subs	r3, #1
  4014ba:	1a9b      	subs	r3, r3, r2
  4014bc:	f023 0303 	bic.w	r3, r3, #3
  4014c0:	3304      	adds	r3, #4
  4014c2:	4413      	add	r3, r2
  4014c4:	491f      	ldr	r1, [pc, #124]	; (401544 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4014c6:	f851 0b04 	ldr.w	r0, [r1], #4
  4014ca:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4014ce:	429a      	cmp	r2, r3
  4014d0:	d1f9      	bne.n	4014c6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4014d2:	4b1e      	ldr	r3, [pc, #120]	; (40154c <Reset_Handler+0xa8>)
  4014d4:	4a1e      	ldr	r2, [pc, #120]	; (401550 <Reset_Handler+0xac>)
  4014d6:	429a      	cmp	r2, r3
  4014d8:	d20a      	bcs.n	4014f0 <Reset_Handler+0x4c>
  4014da:	3b01      	subs	r3, #1
  4014dc:	1a9b      	subs	r3, r3, r2
  4014de:	f023 0303 	bic.w	r3, r3, #3
  4014e2:	3304      	adds	r3, #4
  4014e4:	4413      	add	r3, r2
                *pDest++ = 0;
  4014e6:	2100      	movs	r1, #0
  4014e8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4014ec:	4293      	cmp	r3, r2
  4014ee:	d1fb      	bne.n	4014e8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4014f0:	4a18      	ldr	r2, [pc, #96]	; (401554 <Reset_Handler+0xb0>)
  4014f2:	4b19      	ldr	r3, [pc, #100]	; (401558 <Reset_Handler+0xb4>)
  4014f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4014f8:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4014fa:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4014fe:	fab3 f383 	clz	r3, r3
  401502:	095b      	lsrs	r3, r3, #5
  401504:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401506:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401508:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40150c:	2200      	movs	r2, #0
  40150e:	4b13      	ldr	r3, [pc, #76]	; (40155c <Reset_Handler+0xb8>)
  401510:	701a      	strb	r2, [r3, #0]
	return flags;
  401512:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401514:	4a12      	ldr	r2, [pc, #72]	; (401560 <Reset_Handler+0xbc>)
  401516:	6813      	ldr	r3, [r2, #0]
  401518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40151c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40151e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401522:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401526:	b129      	cbz	r1, 401534 <Reset_Handler+0x90>
		cpu_irq_enable();
  401528:	2201      	movs	r2, #1
  40152a:	4b0c      	ldr	r3, [pc, #48]	; (40155c <Reset_Handler+0xb8>)
  40152c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40152e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401532:	b662      	cpsie	i
        __libc_init_array();
  401534:	4b0b      	ldr	r3, [pc, #44]	; (401564 <Reset_Handler+0xc0>)
  401536:	4798      	blx	r3
        main();
  401538:	4b0b      	ldr	r3, [pc, #44]	; (401568 <Reset_Handler+0xc4>)
  40153a:	4798      	blx	r3
  40153c:	e7fe      	b.n	40153c <Reset_Handler+0x98>
  40153e:	bf00      	nop
  401540:	20400000 	.word	0x20400000
  401544:	00407444 	.word	0x00407444
  401548:	204009d0 	.word	0x204009d0
  40154c:	20400ce4 	.word	0x20400ce4
  401550:	204009d0 	.word	0x204009d0
  401554:	e000ed00 	.word	0xe000ed00
  401558:	00400000 	.word	0x00400000
  40155c:	20400018 	.word	0x20400018
  401560:	e000ed88 	.word	0xe000ed88
  401564:	00401ddd 	.word	0x00401ddd
  401568:	00401b19 	.word	0x00401b19

0040156c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40156c:	4b3b      	ldr	r3, [pc, #236]	; (40165c <SystemCoreClockUpdate+0xf0>)
  40156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401570:	f003 0303 	and.w	r3, r3, #3
  401574:	2b01      	cmp	r3, #1
  401576:	d01d      	beq.n	4015b4 <SystemCoreClockUpdate+0x48>
  401578:	b183      	cbz	r3, 40159c <SystemCoreClockUpdate+0x30>
  40157a:	2b02      	cmp	r3, #2
  40157c:	d036      	beq.n	4015ec <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40157e:	4b37      	ldr	r3, [pc, #220]	; (40165c <SystemCoreClockUpdate+0xf0>)
  401580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401582:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401586:	2b70      	cmp	r3, #112	; 0x70
  401588:	d05f      	beq.n	40164a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40158a:	4b34      	ldr	r3, [pc, #208]	; (40165c <SystemCoreClockUpdate+0xf0>)
  40158c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40158e:	4934      	ldr	r1, [pc, #208]	; (401660 <SystemCoreClockUpdate+0xf4>)
  401590:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401594:	680b      	ldr	r3, [r1, #0]
  401596:	40d3      	lsrs	r3, r2
  401598:	600b      	str	r3, [r1, #0]
  40159a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40159c:	4b31      	ldr	r3, [pc, #196]	; (401664 <SystemCoreClockUpdate+0xf8>)
  40159e:	695b      	ldr	r3, [r3, #20]
  4015a0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4015a4:	bf14      	ite	ne
  4015a6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4015aa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4015ae:	4b2c      	ldr	r3, [pc, #176]	; (401660 <SystemCoreClockUpdate+0xf4>)
  4015b0:	601a      	str	r2, [r3, #0]
  4015b2:	e7e4      	b.n	40157e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4015b4:	4b29      	ldr	r3, [pc, #164]	; (40165c <SystemCoreClockUpdate+0xf0>)
  4015b6:	6a1b      	ldr	r3, [r3, #32]
  4015b8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4015bc:	d003      	beq.n	4015c6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4015be:	4a2a      	ldr	r2, [pc, #168]	; (401668 <SystemCoreClockUpdate+0xfc>)
  4015c0:	4b27      	ldr	r3, [pc, #156]	; (401660 <SystemCoreClockUpdate+0xf4>)
  4015c2:	601a      	str	r2, [r3, #0]
  4015c4:	e7db      	b.n	40157e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4015c6:	4a29      	ldr	r2, [pc, #164]	; (40166c <SystemCoreClockUpdate+0x100>)
  4015c8:	4b25      	ldr	r3, [pc, #148]	; (401660 <SystemCoreClockUpdate+0xf4>)
  4015ca:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4015cc:	4b23      	ldr	r3, [pc, #140]	; (40165c <SystemCoreClockUpdate+0xf0>)
  4015ce:	6a1b      	ldr	r3, [r3, #32]
  4015d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015d4:	2b10      	cmp	r3, #16
  4015d6:	d005      	beq.n	4015e4 <SystemCoreClockUpdate+0x78>
  4015d8:	2b20      	cmp	r3, #32
  4015da:	d1d0      	bne.n	40157e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4015dc:	4a22      	ldr	r2, [pc, #136]	; (401668 <SystemCoreClockUpdate+0xfc>)
  4015de:	4b20      	ldr	r3, [pc, #128]	; (401660 <SystemCoreClockUpdate+0xf4>)
  4015e0:	601a      	str	r2, [r3, #0]
          break;
  4015e2:	e7cc      	b.n	40157e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4015e4:	4a22      	ldr	r2, [pc, #136]	; (401670 <SystemCoreClockUpdate+0x104>)
  4015e6:	4b1e      	ldr	r3, [pc, #120]	; (401660 <SystemCoreClockUpdate+0xf4>)
  4015e8:	601a      	str	r2, [r3, #0]
          break;
  4015ea:	e7c8      	b.n	40157e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4015ec:	4b1b      	ldr	r3, [pc, #108]	; (40165c <SystemCoreClockUpdate+0xf0>)
  4015ee:	6a1b      	ldr	r3, [r3, #32]
  4015f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4015f4:	d016      	beq.n	401624 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4015f6:	4a1c      	ldr	r2, [pc, #112]	; (401668 <SystemCoreClockUpdate+0xfc>)
  4015f8:	4b19      	ldr	r3, [pc, #100]	; (401660 <SystemCoreClockUpdate+0xf4>)
  4015fa:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4015fc:	4b17      	ldr	r3, [pc, #92]	; (40165c <SystemCoreClockUpdate+0xf0>)
  4015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401600:	f003 0303 	and.w	r3, r3, #3
  401604:	2b02      	cmp	r3, #2
  401606:	d1ba      	bne.n	40157e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401608:	4a14      	ldr	r2, [pc, #80]	; (40165c <SystemCoreClockUpdate+0xf0>)
  40160a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40160c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40160e:	4814      	ldr	r0, [pc, #80]	; (401660 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401610:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401614:	6803      	ldr	r3, [r0, #0]
  401616:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40161a:	b2d2      	uxtb	r2, r2
  40161c:	fbb3 f3f2 	udiv	r3, r3, r2
  401620:	6003      	str	r3, [r0, #0]
  401622:	e7ac      	b.n	40157e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401624:	4a11      	ldr	r2, [pc, #68]	; (40166c <SystemCoreClockUpdate+0x100>)
  401626:	4b0e      	ldr	r3, [pc, #56]	; (401660 <SystemCoreClockUpdate+0xf4>)
  401628:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40162a:	4b0c      	ldr	r3, [pc, #48]	; (40165c <SystemCoreClockUpdate+0xf0>)
  40162c:	6a1b      	ldr	r3, [r3, #32]
  40162e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401632:	2b10      	cmp	r3, #16
  401634:	d005      	beq.n	401642 <SystemCoreClockUpdate+0xd6>
  401636:	2b20      	cmp	r3, #32
  401638:	d1e0      	bne.n	4015fc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40163a:	4a0b      	ldr	r2, [pc, #44]	; (401668 <SystemCoreClockUpdate+0xfc>)
  40163c:	4b08      	ldr	r3, [pc, #32]	; (401660 <SystemCoreClockUpdate+0xf4>)
  40163e:	601a      	str	r2, [r3, #0]
          break;
  401640:	e7dc      	b.n	4015fc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401642:	4a0b      	ldr	r2, [pc, #44]	; (401670 <SystemCoreClockUpdate+0x104>)
  401644:	4b06      	ldr	r3, [pc, #24]	; (401660 <SystemCoreClockUpdate+0xf4>)
  401646:	601a      	str	r2, [r3, #0]
          break;
  401648:	e7d8      	b.n	4015fc <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40164a:	4a05      	ldr	r2, [pc, #20]	; (401660 <SystemCoreClockUpdate+0xf4>)
  40164c:	6813      	ldr	r3, [r2, #0]
  40164e:	4909      	ldr	r1, [pc, #36]	; (401674 <SystemCoreClockUpdate+0x108>)
  401650:	fba1 1303 	umull	r1, r3, r1, r3
  401654:	085b      	lsrs	r3, r3, #1
  401656:	6013      	str	r3, [r2, #0]
  401658:	4770      	bx	lr
  40165a:	bf00      	nop
  40165c:	400e0600 	.word	0x400e0600
  401660:	2040001c 	.word	0x2040001c
  401664:	400e1810 	.word	0x400e1810
  401668:	00b71b00 	.word	0x00b71b00
  40166c:	003d0900 	.word	0x003d0900
  401670:	007a1200 	.word	0x007a1200
  401674:	aaaaaaab 	.word	0xaaaaaaab

00401678 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401678:	4b16      	ldr	r3, [pc, #88]	; (4016d4 <system_init_flash+0x5c>)
  40167a:	4298      	cmp	r0, r3
  40167c:	d913      	bls.n	4016a6 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40167e:	4b16      	ldr	r3, [pc, #88]	; (4016d8 <system_init_flash+0x60>)
  401680:	4298      	cmp	r0, r3
  401682:	d915      	bls.n	4016b0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401684:	4b15      	ldr	r3, [pc, #84]	; (4016dc <system_init_flash+0x64>)
  401686:	4298      	cmp	r0, r3
  401688:	d916      	bls.n	4016b8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40168a:	4b15      	ldr	r3, [pc, #84]	; (4016e0 <system_init_flash+0x68>)
  40168c:	4298      	cmp	r0, r3
  40168e:	d917      	bls.n	4016c0 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401690:	4b14      	ldr	r3, [pc, #80]	; (4016e4 <system_init_flash+0x6c>)
  401692:	4298      	cmp	r0, r3
  401694:	d918      	bls.n	4016c8 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401696:	4b14      	ldr	r3, [pc, #80]	; (4016e8 <system_init_flash+0x70>)
  401698:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40169a:	bf94      	ite	ls
  40169c:	4a13      	ldrls	r2, [pc, #76]	; (4016ec <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40169e:	4a14      	ldrhi	r2, [pc, #80]	; (4016f0 <system_init_flash+0x78>)
  4016a0:	4b14      	ldr	r3, [pc, #80]	; (4016f4 <system_init_flash+0x7c>)
  4016a2:	601a      	str	r2, [r3, #0]
  4016a4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4016a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4016aa:	4b12      	ldr	r3, [pc, #72]	; (4016f4 <system_init_flash+0x7c>)
  4016ac:	601a      	str	r2, [r3, #0]
  4016ae:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4016b0:	4a11      	ldr	r2, [pc, #68]	; (4016f8 <system_init_flash+0x80>)
  4016b2:	4b10      	ldr	r3, [pc, #64]	; (4016f4 <system_init_flash+0x7c>)
  4016b4:	601a      	str	r2, [r3, #0]
  4016b6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4016b8:	4a10      	ldr	r2, [pc, #64]	; (4016fc <system_init_flash+0x84>)
  4016ba:	4b0e      	ldr	r3, [pc, #56]	; (4016f4 <system_init_flash+0x7c>)
  4016bc:	601a      	str	r2, [r3, #0]
  4016be:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4016c0:	4a0f      	ldr	r2, [pc, #60]	; (401700 <system_init_flash+0x88>)
  4016c2:	4b0c      	ldr	r3, [pc, #48]	; (4016f4 <system_init_flash+0x7c>)
  4016c4:	601a      	str	r2, [r3, #0]
  4016c6:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4016c8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4016cc:	4b09      	ldr	r3, [pc, #36]	; (4016f4 <system_init_flash+0x7c>)
  4016ce:	601a      	str	r2, [r3, #0]
  4016d0:	4770      	bx	lr
  4016d2:	bf00      	nop
  4016d4:	015ef3bf 	.word	0x015ef3bf
  4016d8:	02bde77f 	.word	0x02bde77f
  4016dc:	041cdb3f 	.word	0x041cdb3f
  4016e0:	057bceff 	.word	0x057bceff
  4016e4:	06dac2bf 	.word	0x06dac2bf
  4016e8:	0839b67f 	.word	0x0839b67f
  4016ec:	04000500 	.word	0x04000500
  4016f0:	04000600 	.word	0x04000600
  4016f4:	400e0c00 	.word	0x400e0c00
  4016f8:	04000100 	.word	0x04000100
  4016fc:	04000200 	.word	0x04000200
  401700:	04000300 	.word	0x04000300

00401704 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401704:	4b0a      	ldr	r3, [pc, #40]	; (401730 <_sbrk+0x2c>)
  401706:	681b      	ldr	r3, [r3, #0]
  401708:	b153      	cbz	r3, 401720 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40170a:	4b09      	ldr	r3, [pc, #36]	; (401730 <_sbrk+0x2c>)
  40170c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40170e:	181a      	adds	r2, r3, r0
  401710:	4908      	ldr	r1, [pc, #32]	; (401734 <_sbrk+0x30>)
  401712:	4291      	cmp	r1, r2
  401714:	db08      	blt.n	401728 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401716:	4610      	mov	r0, r2
  401718:	4a05      	ldr	r2, [pc, #20]	; (401730 <_sbrk+0x2c>)
  40171a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40171c:	4618      	mov	r0, r3
  40171e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401720:	4a05      	ldr	r2, [pc, #20]	; (401738 <_sbrk+0x34>)
  401722:	4b03      	ldr	r3, [pc, #12]	; (401730 <_sbrk+0x2c>)
  401724:	601a      	str	r2, [r3, #0]
  401726:	e7f0      	b.n	40170a <_sbrk+0x6>
		return (caddr_t) -1;	
  401728:	f04f 30ff 	mov.w	r0, #4294967295
}
  40172c:	4770      	bx	lr
  40172e:	bf00      	nop
  401730:	20400c70 	.word	0x20400c70
  401734:	2045fffc 	.word	0x2045fffc
  401738:	20402ee8 	.word	0x20402ee8

0040173c <but1_callback>:
		pio_set(pio, mask);
	}
}

void but1_callback() {
	but1_flag = 1;
  40173c:	2201      	movs	r2, #1
  40173e:	4b01      	ldr	r3, [pc, #4]	; (401744 <but1_callback+0x8>)
  401740:	601a      	str	r2, [r3, #0]
  401742:	4770      	bx	lr
  401744:	20400c74 	.word	0x20400c74

00401748 <but2_callback>:
}

void but2_callback() {
	but2_flag = 1;
  401748:	2201      	movs	r2, #1
  40174a:	4b01      	ldr	r3, [pc, #4]	; (401750 <but2_callback+0x8>)
  40174c:	601a      	str	r2, [r3, #0]
  40174e:	4770      	bx	lr
  401750:	20400c78 	.word	0x20400c78

00401754 <but3_callback>:
}

void but3_callback() {
	but3_flag = 1;
  401754:	2201      	movs	r2, #1
  401756:	4b01      	ldr	r3, [pc, #4]	; (40175c <but3_callback+0x8>)
  401758:	601a      	str	r2, [r3, #0]
  40175a:	4770      	bx	lr
  40175c:	20400c7c 	.word	0x20400c7c

00401760 <setup_io>:
void setup_io() {
  401760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401764:	b083      	sub	sp, #12
	pmc_enable_periph_clk(LED_PLACA_PIO_ID);
  401766:	200c      	movs	r0, #12
  401768:	4d48      	ldr	r5, [pc, #288]	; (40188c <setup_io+0x12c>)
  40176a:	47a8      	blx	r5
	pio_configure(LED_PLACA_PIO, PIO_OUTPUT_0, LED_PLACA_IDX_MASK, PIO_DEFAULT);
  40176c:	4e48      	ldr	r6, [pc, #288]	; (401890 <setup_io+0x130>)
  40176e:	2300      	movs	r3, #0
  401770:	f44f 7280 	mov.w	r2, #256	; 0x100
  401774:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401778:	4630      	mov	r0, r6
  40177a:	4c46      	ldr	r4, [pc, #280]	; (401894 <setup_io+0x134>)
  40177c:	47a0      	blx	r4
	pio_set(LED_PLACA_PIO, LED_PLACA_IDX_MASK);
  40177e:	f44f 7180 	mov.w	r1, #256	; 0x100
  401782:	4630      	mov	r0, r6
  401784:	f8df 9128 	ldr.w	r9, [pc, #296]	; 4018b0 <setup_io+0x150>
  401788:	47c8      	blx	r9
	pmc_enable_periph_clk(LED1_PIO_ID);
  40178a:	200a      	movs	r0, #10
  40178c:	47a8      	blx	r5
	pio_configure(LED1_PIO, PIO_OUTPUT_0, LED1_IDX_MASK, PIO_DEFAULT);
  40178e:	f8df 8124 	ldr.w	r8, [pc, #292]	; 4018b4 <setup_io+0x154>
  401792:	2300      	movs	r3, #0
  401794:	2201      	movs	r2, #1
  401796:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40179a:	4640      	mov	r0, r8
  40179c:	47a0      	blx	r4
	pio_clear(LED1_PIO, LED1_IDX_MASK);
  40179e:	2101      	movs	r1, #1
  4017a0:	4640      	mov	r0, r8
  4017a2:	4f3d      	ldr	r7, [pc, #244]	; (401898 <setup_io+0x138>)
  4017a4:	47b8      	blx	r7
	pmc_enable_periph_clk(LED2_PIO_ID);
  4017a6:	200c      	movs	r0, #12
  4017a8:	47a8      	blx	r5
	pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_IDX_MASK, PIO_DEFAULT);
  4017aa:	2300      	movs	r3, #0
  4017ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4017b0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4017b4:	4630      	mov	r0, r6
  4017b6:	47a0      	blx	r4
	pio_set(LED2_PIO, LED2_IDX_MASK);
  4017b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4017bc:	4630      	mov	r0, r6
  4017be:	47c8      	blx	r9
	pmc_enable_periph_clk(LED3_PIO_ID);
  4017c0:	200b      	movs	r0, #11
  4017c2:	47a8      	blx	r5
	pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_IDX_MASK, PIO_DEFAULT);
  4017c4:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 4018b8 <setup_io+0x158>
  4017c8:	2300      	movs	r3, #0
  4017ca:	2204      	movs	r2, #4
  4017cc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4017d0:	4648      	mov	r0, r9
  4017d2:	47a0      	blx	r4
	pio_clear(LED3_PIO, LED3_IDX_MASK);
  4017d4:	2104      	movs	r1, #4
  4017d6:	4648      	mov	r0, r9
  4017d8:	47b8      	blx	r7
	pmc_enable_periph_clk(BUT1_PIO_ID);
  4017da:	2010      	movs	r0, #16
  4017dc:	47a8      	blx	r5
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK, PIO_PULLUP);
  4017de:	4f2f      	ldr	r7, [pc, #188]	; (40189c <setup_io+0x13c>)
  4017e0:	2301      	movs	r3, #1
  4017e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4017e6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4017ea:	4638      	mov	r0, r7
  4017ec:	47a0      	blx	r4
	pio_handler_set(BUT1_PIO, BUT1_PIO_ID, BUT1_PIO_IDX_MASK, PIO_IT_RISE_EDGE, but1_callback);
  4017ee:	4b2c      	ldr	r3, [pc, #176]	; (4018a0 <setup_io+0x140>)
  4017f0:	9300      	str	r3, [sp, #0]
  4017f2:	2370      	movs	r3, #112	; 0x70
  4017f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4017f8:	2110      	movs	r1, #16
  4017fa:	4638      	mov	r0, r7
  4017fc:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 4018bc <setup_io+0x15c>
  401800:	47d8      	blx	fp
	pio_enable_interrupt(BUT1_PIO, BUT1_PIO_IDX_MASK);
  401802:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401806:	4638      	mov	r0, r7
  401808:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 4018c0 <setup_io+0x160>
  40180c:	47d0      	blx	sl
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40180e:	4f25      	ldr	r7, [pc, #148]	; (4018a4 <setup_io+0x144>)
  401810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  401814:	603b      	str	r3, [r7, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401816:	f04f 0980 	mov.w	r9, #128	; 0x80
  40181a:	f887 9310 	strb.w	r9, [r7, #784]	; 0x310
	pmc_enable_periph_clk(BUT2_PIO_ID);
  40181e:	200c      	movs	r0, #12
  401820:	47a8      	blx	r5
	pio_configure(BUT2_PIO, PIO_INPUT, BUT2_PIO_IDX_MASK, PIO_PULLUP);
  401822:	2301      	movs	r3, #1
  401824:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401828:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40182c:	4630      	mov	r0, r6
  40182e:	47a0      	blx	r4
	pio_handler_set(BUT2_PIO, BUT2_PIO_ID, BUT2_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but2_callback);
  401830:	4b1d      	ldr	r3, [pc, #116]	; (4018a8 <setup_io+0x148>)
  401832:	9300      	str	r3, [sp, #0]
  401834:	2350      	movs	r3, #80	; 0x50
  401836:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40183a:	210c      	movs	r1, #12
  40183c:	4630      	mov	r0, r6
  40183e:	47d8      	blx	fp
	pio_enable_interrupt(BUT2_PIO, BUT2_PIO_IDX_MASK);
  401840:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401844:	4630      	mov	r0, r6
  401846:	47d0      	blx	sl
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40184c:	603b      	str	r3, [r7, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40184e:	f887 930c 	strb.w	r9, [r7, #780]	; 0x30c
	pmc_enable_periph_clk(BUT3_PIO_ID);
  401852:	200a      	movs	r0, #10
  401854:	47a8      	blx	r5
	pio_configure(BUT3_PIO, PIO_INPUT, BUT3_PIO_IDX_MASK, PIO_PULLUP);
  401856:	2301      	movs	r3, #1
  401858:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40185c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401860:	4640      	mov	r0, r8
  401862:	47a0      	blx	r4
	pio_handler_set(BUT3_PIO, BUT3_PIO_ID, BUT3_PIO_IDX_MASK, PIO_IT_RISE_EDGE, but3_callback);
  401864:	4b11      	ldr	r3, [pc, #68]	; (4018ac <setup_io+0x14c>)
  401866:	9300      	str	r3, [sp, #0]
  401868:	2370      	movs	r3, #112	; 0x70
  40186a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40186e:	210a      	movs	r1, #10
  401870:	4640      	mov	r0, r8
  401872:	47d8      	blx	fp
	pio_enable_interrupt(BUT3_PIO, BUT3_PIO_IDX_MASK);
  401874:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401878:	4640      	mov	r0, r8
  40187a:	47d0      	blx	sl
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40187c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401880:	603b      	str	r3, [r7, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401882:	f887 930a 	strb.w	r9, [r7, #778]	; 0x30a
}
  401886:	b003      	add	sp, #12
  401888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40188c:	00401189 	.word	0x00401189
  401890:	400e1200 	.word	0x400e1200
  401894:	00400e69 	.word	0x00400e69
  401898:	00400d75 	.word	0x00400d75
  40189c:	400e1400 	.word	0x400e1400
  4018a0:	0040173d 	.word	0x0040173d
  4018a4:	e000e100 	.word	0xe000e100
  4018a8:	00401749 	.word	0x00401749
  4018ac:	00401755 	.word	0x00401755
  4018b0:	00400d71 	.word	0x00400d71
  4018b4:	400e0e00 	.word	0x400e0e00
  4018b8:	400e1000 	.word	0x400e1000
  4018bc:	00400f95 	.word	0x00400f95
  4018c0:	00400f37 	.word	0x00400f37

004018c4 <pin_toggle>:
void pin_toggle(Pio *pio, uint32_t mask) {
  4018c4:	b538      	push	{r3, r4, r5, lr}
  4018c6:	4604      	mov	r4, r0
  4018c8:	460d      	mov	r5, r1
	if (pio_get_output_data_status(pio, mask)) {
  4018ca:	4b06      	ldr	r3, [pc, #24]	; (4018e4 <pin_toggle+0x20>)
  4018cc:	4798      	blx	r3
  4018ce:	b920      	cbnz	r0, 4018da <pin_toggle+0x16>
		pio_set(pio, mask);
  4018d0:	4629      	mov	r1, r5
  4018d2:	4620      	mov	r0, r4
  4018d4:	4b04      	ldr	r3, [pc, #16]	; (4018e8 <pin_toggle+0x24>)
  4018d6:	4798      	blx	r3
  4018d8:	bd38      	pop	{r3, r4, r5, pc}
		pio_clear(pio, mask);
  4018da:	4629      	mov	r1, r5
  4018dc:	4620      	mov	r0, r4
  4018de:	4b03      	ldr	r3, [pc, #12]	; (4018ec <pin_toggle+0x28>)
  4018e0:	4798      	blx	r3
  4018e2:	bd38      	pop	{r3, r4, r5, pc}
  4018e4:	00400ef9 	.word	0x00400ef9
  4018e8:	00400d71 	.word	0x00400d71
  4018ec:	00400d75 	.word	0x00400d75

004018f0 <TC_init>:
}

void TC_init(Tc *TC, int ID_TC, int TC_CHANNEL, int freq) {
  4018f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4018f4:	b085      	sub	sp, #20
  4018f6:	4606      	mov	r6, r0
  4018f8:	460c      	mov	r4, r1
  4018fa:	4617      	mov	r7, r2
  4018fc:	4698      	mov	r8, r3
	o uC possui 3 TCs, cada TC possui 3 canais
	TC0 : ID_TC0, ID_TC1, ID_TC2
	TC1 : ID_TC3, ID_TC4, ID_TC5
	TC2 : ID_TC6, ID_TC7, ID_TC8
	*/
	pmc_enable_periph_clk(ID_TC);
  4018fe:	4608      	mov	r0, r1
  401900:	4b18      	ldr	r3, [pc, #96]	; (401964 <TC_init+0x74>)
  401902:	4798      	blx	r3

	/** Configura o TC para operar em  4Mhz e interrup�c�o no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401904:	4d18      	ldr	r5, [pc, #96]	; (401968 <TC_init+0x78>)
  401906:	9500      	str	r5, [sp, #0]
  401908:	ab02      	add	r3, sp, #8
  40190a:	aa03      	add	r2, sp, #12
  40190c:	4629      	mov	r1, r5
  40190e:	4640      	mov	r0, r8
  401910:	f8df 906c 	ldr.w	r9, [pc, #108]	; 401980 <TC_init+0x90>
  401914:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  401916:	9a02      	ldr	r2, [sp, #8]
  401918:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40191c:	4639      	mov	r1, r7
  40191e:	4630      	mov	r0, r6
  401920:	4b12      	ldr	r3, [pc, #72]	; (40196c <TC_init+0x7c>)
  401922:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  401924:	9a03      	ldr	r2, [sp, #12]
  401926:	fbb5 f2f2 	udiv	r2, r5, r2
  40192a:	fbb2 f2f8 	udiv	r2, r2, r8
  40192e:	4639      	mov	r1, r7
  401930:	4630      	mov	r0, r6
  401932:	4b0f      	ldr	r3, [pc, #60]	; (401970 <TC_init+0x80>)
  401934:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401936:	b263      	sxtb	r3, r4
  401938:	095b      	lsrs	r3, r3, #5
  40193a:	f004 041f 	and.w	r4, r4, #31
  40193e:	2201      	movs	r2, #1
  401940:	fa02 f404 	lsl.w	r4, r2, r4
  401944:	4a0b      	ldr	r2, [pc, #44]	; (401974 <TC_init+0x84>)
  401946:	f842 4023 	str.w	r4, [r2, r3, lsl #2]

	/* Configura e ativa interrup�c�o no TC canal 0 */
	/* Interrup��o no C */
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  40194a:	2210      	movs	r2, #16
  40194c:	4639      	mov	r1, r7
  40194e:	4630      	mov	r0, r6
  401950:	4b09      	ldr	r3, [pc, #36]	; (401978 <TC_init+0x88>)
  401952:	4798      	blx	r3

	/* Inicializa o canal dado do TC */
	tc_start(TC, TC_CHANNEL);
  401954:	4639      	mov	r1, r7
  401956:	4630      	mov	r0, r6
  401958:	4b08      	ldr	r3, [pc, #32]	; (40197c <TC_init+0x8c>)
  40195a:	4798      	blx	r3
}
  40195c:	b005      	add	sp, #20
  40195e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401962:	bf00      	nop
  401964:	00401189 	.word	0x00401189
  401968:	11e1a300 	.word	0x11e1a300
  40196c:	0040057f 	.word	0x0040057f
  401970:	004005a1 	.word	0x004005a1
  401974:	e000e100 	.word	0xe000e100
  401978:	004005a9 	.word	0x004005a9
  40197c:	00400599 	.word	0x00400599
  401980:	004005b9 	.word	0x004005b9

00401984 <TC0_Handler>:

void TC0_Handler(void) {
  401984:	b500      	push	{lr}
  401986:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	/****************************************************************
	* Devemos indicar ao TC que a interrup��o foi satisfeita.
	******************************************************************/
	ul_dummy = tc_get_status(TC0, 0);
  401988:	2100      	movs	r1, #0
  40198a:	4805      	ldr	r0, [pc, #20]	; (4019a0 <TC0_Handler+0x1c>)
  40198c:	4b05      	ldr	r3, [pc, #20]	; (4019a4 <TC0_Handler+0x20>)
  40198e:	4798      	blx	r3
  401990:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  401992:	9b01      	ldr	r3, [sp, #4]

	/** Muda o estado do LED */
	tc0_flag = 1;
  401994:	2201      	movs	r2, #1
  401996:	4b04      	ldr	r3, [pc, #16]	; (4019a8 <TC0_Handler+0x24>)
  401998:	701a      	strb	r2, [r3, #0]
}
  40199a:	b003      	add	sp, #12
  40199c:	f85d fb04 	ldr.w	pc, [sp], #4
  4019a0:	4000c000 	.word	0x4000c000
  4019a4:	004005b1 	.word	0x004005b1
  4019a8:	20400c82 	.word	0x20400c82

004019ac <TC1_Handler>:

void TC1_Handler(void) {
  4019ac:	b500      	push	{lr}
  4019ae:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	/****************************************************************
	* Devemos indicar ao TC que a interrup��o foi satisfeita.
	******************************************************************/
	ul_dummy = tc_get_status(TC0, 1);
  4019b0:	2101      	movs	r1, #1
  4019b2:	4805      	ldr	r0, [pc, #20]	; (4019c8 <TC1_Handler+0x1c>)
  4019b4:	4b05      	ldr	r3, [pc, #20]	; (4019cc <TC1_Handler+0x20>)
  4019b6:	4798      	blx	r3
  4019b8:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  4019ba:	9b01      	ldr	r3, [sp, #4]

	/** Muda o estado do LED */
	tc1_flag = 1;
  4019bc:	2201      	movs	r2, #1
  4019be:	4b04      	ldr	r3, [pc, #16]	; (4019d0 <TC1_Handler+0x24>)
  4019c0:	701a      	strb	r2, [r3, #0]
}
  4019c2:	b003      	add	sp, #12
  4019c4:	f85d fb04 	ldr.w	pc, [sp], #4
  4019c8:	4000c000 	.word	0x4000c000
  4019cc:	004005b1 	.word	0x004005b1
  4019d0:	20400c83 	.word	0x20400c83

004019d4 <TC2_Handler>:

void TC2_Handler(void) {
  4019d4:	b500      	push	{lr}
  4019d6:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	/****************************************************************
	* Devemos indicar ao TC que a interrup��o foi satisfeita.
	******************************************************************/
	ul_dummy = tc_get_status(TC0, 2);
  4019d8:	2102      	movs	r1, #2
  4019da:	4805      	ldr	r0, [pc, #20]	; (4019f0 <TC2_Handler+0x1c>)
  4019dc:	4b05      	ldr	r3, [pc, #20]	; (4019f4 <TC2_Handler+0x20>)
  4019de:	4798      	blx	r3
  4019e0:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  4019e2:	9b01      	ldr	r3, [sp, #4]

	/** Muda o estado do LED */
	tc2_flag = 1;
  4019e4:	2201      	movs	r2, #1
  4019e6:	4b04      	ldr	r3, [pc, #16]	; (4019f8 <TC2_Handler+0x24>)
  4019e8:	701a      	strb	r2, [r3, #0]
}
  4019ea:	b003      	add	sp, #12
  4019ec:	f85d fb04 	ldr.w	pc, [sp], #4
  4019f0:	4000c000 	.word	0x4000c000
  4019f4:	004005b1 	.word	0x004005b1
  4019f8:	20400c84 	.word	0x20400c84

004019fc <RTT_Handler>:
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
}

void RTT_Handler(void) {
  4019fc:	b508      	push	{r3, lr}
	uint32_t ul_status;

	/* Get RTT status - ACK */
	ul_status = rtt_get_status(RTT);
  4019fe:	4805      	ldr	r0, [pc, #20]	; (401a14 <RTT_Handler+0x18>)
  401a00:	4b05      	ldr	r3, [pc, #20]	; (401a18 <RTT_Handler+0x1c>)
  401a02:	4798      	blx	r3
	/* IRQ due to Time has changed */
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
	}

	/* IRQ due to Alarm */
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  401a04:	f010 0f01 	tst.w	r0, #1
  401a08:	d002      	beq.n	401a10 <RTT_Handler+0x14>
		f_rtt_alarme = true;
  401a0a:	2201      	movs	r2, #1
  401a0c:	4b03      	ldr	r3, [pc, #12]	; (401a1c <RTT_Handler+0x20>)
  401a0e:	701a      	strb	r2, [r3, #0]
  401a10:	bd08      	pop	{r3, pc}
  401a12:	bf00      	nop
  401a14:	400e1830 	.word	0x400e1830
  401a18:	004003ed 	.word	0x004003ed
  401a1c:	20400c80 	.word	0x20400c80

00401a20 <RTC_init>:
	}
}

void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type) {
  401a20:	b082      	sub	sp, #8
  401a22:	b570      	push	{r4, r5, r6, lr}
  401a24:	b082      	sub	sp, #8
  401a26:	4605      	mov	r5, r0
  401a28:	460c      	mov	r4, r1
  401a2a:	a906      	add	r1, sp, #24
  401a2c:	e881 000c 	stmia.w	r1, {r2, r3}
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  401a30:	2002      	movs	r0, #2
  401a32:	4b1d      	ldr	r3, [pc, #116]	; (401aa8 <RTC_init+0x88>)
  401a34:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(rtc, 0);
  401a36:	2100      	movs	r1, #0
  401a38:	4628      	mov	r0, r5
  401a3a:	4b1c      	ldr	r3, [pc, #112]	; (401aac <RTC_init+0x8c>)
  401a3c:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  401a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401a40:	9300      	str	r3, [sp, #0]
  401a42:	9b08      	ldr	r3, [sp, #32]
  401a44:	9a07      	ldr	r2, [sp, #28]
  401a46:	9906      	ldr	r1, [sp, #24]
  401a48:	4628      	mov	r0, r5
  401a4a:	4e19      	ldr	r6, [pc, #100]	; (401ab0 <RTC_init+0x90>)
  401a4c:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.seccond);
  401a4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401a50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401a52:	990a      	ldr	r1, [sp, #40]	; 0x28
  401a54:	4628      	mov	r0, r5
  401a56:	4e17      	ldr	r6, [pc, #92]	; (401ab4 <RTC_init+0x94>)
  401a58:	47b0      	blx	r6

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(id_rtc);
  401a5a:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401a5c:	b2e4      	uxtb	r4, r4
  401a5e:	f004 011f 	and.w	r1, r4, #31
  401a62:	2301      	movs	r3, #1
  401a64:	408b      	lsls	r3, r1
  401a66:	0956      	lsrs	r6, r2, #5
  401a68:	4813      	ldr	r0, [pc, #76]	; (401ab8 <RTC_init+0x98>)
  401a6a:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  401a6e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401a72:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  401a76:	2a00      	cmp	r2, #0
  401a78:	db0f      	blt.n	401a9a <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401a7a:	490f      	ldr	r1, [pc, #60]	; (401ab8 <RTC_init+0x98>)
  401a7c:	4411      	add	r1, r2
  401a7e:	2200      	movs	r2, #0
  401a80:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401a84:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	NVIC_ClearPendingIRQ(id_rtc);
	NVIC_SetPriority(id_rtc, 0);
	NVIC_EnableIRQ(id_rtc);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
  401a88:	990d      	ldr	r1, [sp, #52]	; 0x34
  401a8a:	4628      	mov	r0, r5
  401a8c:	4b0b      	ldr	r3, [pc, #44]	; (401abc <RTC_init+0x9c>)
  401a8e:	4798      	blx	r3
}
  401a90:	b002      	add	sp, #8
  401a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  401a96:	b002      	add	sp, #8
  401a98:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401a9a:	f004 040f 	and.w	r4, r4, #15
  401a9e:	4a08      	ldr	r2, [pc, #32]	; (401ac0 <RTC_init+0xa0>)
  401aa0:	2100      	movs	r1, #0
  401aa2:	5511      	strb	r1, [r2, r4]
  401aa4:	e7ee      	b.n	401a84 <RTC_init+0x64>
  401aa6:	bf00      	nop
  401aa8:	00401189 	.word	0x00401189
  401aac:	004001ad 	.word	0x004001ad
  401ab0:	004002b1 	.word	0x004002b1
  401ab4:	00400221 	.word	0x00400221
  401ab8:	e000e100 	.word	0xe000e100
  401abc:	004001c3 	.word	0x004001c3
  401ac0:	e000ed14 	.word	0xe000ed14

00401ac4 <RTC_Handler>:

void RTC_Handler(void) {
  401ac4:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  401ac6:	4810      	ldr	r0, [pc, #64]	; (401b08 <RTC_Handler+0x44>)
  401ac8:	4b10      	ldr	r3, [pc, #64]	; (401b0c <RTC_Handler+0x48>)
  401aca:	4798      	blx	r3
	/*
	*  Verifica por qual motivo entrou
	*  na interrupcao, se foi por segundo
	*  ou Alarm
	*/
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  401acc:	f010 0f04 	tst.w	r0, #4
  401ad0:	d10e      	bne.n	401af0 <RTC_Handler+0x2c>
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
		rtc_second = 1;
	}
	
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  401ad2:	4d0d      	ldr	r5, [pc, #52]	; (401b08 <RTC_Handler+0x44>)
  401ad4:	2101      	movs	r1, #1
  401ad6:	4628      	mov	r0, r5
  401ad8:	4c0d      	ldr	r4, [pc, #52]	; (401b10 <RTC_Handler+0x4c>)
  401ada:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  401adc:	2108      	movs	r1, #8
  401ade:	4628      	mov	r0, r5
  401ae0:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  401ae2:	2110      	movs	r1, #16
  401ae4:	4628      	mov	r0, r5
  401ae6:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  401ae8:	2120      	movs	r1, #32
  401aea:	4628      	mov	r0, r5
  401aec:	47a0      	blx	r4
  401aee:	bd38      	pop	{r3, r4, r5, pc}
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  401af0:	4d05      	ldr	r5, [pc, #20]	; (401b08 <RTC_Handler+0x44>)
  401af2:	2104      	movs	r1, #4
  401af4:	4628      	mov	r0, r5
  401af6:	4c06      	ldr	r4, [pc, #24]	; (401b10 <RTC_Handler+0x4c>)
  401af8:	47a0      	blx	r4
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  401afa:	2104      	movs	r1, #4
  401afc:	4628      	mov	r0, r5
  401afe:	47a0      	blx	r4
		rtc_second = 1;
  401b00:	2201      	movs	r2, #1
  401b02:	4b04      	ldr	r3, [pc, #16]	; (401b14 <RTC_Handler+0x50>)
  401b04:	701a      	strb	r2, [r3, #0]
  401b06:	e7e4      	b.n	401ad2 <RTC_Handler+0xe>
  401b08:	400e1860 	.word	0x400e1860
  401b0c:	00400369 	.word	0x00400369
  401b10:	0040036d 	.word	0x0040036d
  401b14:	20400c81 	.word	0x20400c81

00401b18 <main>:
}

// Main
int main (void) {
  401b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b1c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
	// Init...
	board_init();
  401b20:	4b87      	ldr	r3, [pc, #540]	; (401d40 <main+0x228>)
  401b22:	4798      	blx	r3
	sysclk_init();
  401b24:	4b87      	ldr	r3, [pc, #540]	; (401d44 <main+0x22c>)
  401b26:	4798      	blx	r3
	delay_init();
	gfx_mono_ssd1306_init();
  401b28:	4b87      	ldr	r3, [pc, #540]	; (401d48 <main+0x230>)
  401b2a:	4798      	blx	r3

	// Self created inits...
	setup_io();
  401b2c:	4b87      	ldr	r3, [pc, #540]	; (401d4c <main+0x234>)
  401b2e:	4798      	blx	r3
	
	// Configure TC's...
	TC_init(TC0, ID_TC0, 0, 5);
  401b30:	4d87      	ldr	r5, [pc, #540]	; (401d50 <main+0x238>)
  401b32:	2305      	movs	r3, #5
  401b34:	2200      	movs	r2, #0
  401b36:	2117      	movs	r1, #23
  401b38:	4628      	mov	r0, r5
  401b3a:	4c86      	ldr	r4, [pc, #536]	; (401d54 <main+0x23c>)
  401b3c:	47a0      	blx	r4
	TC_init(TC0, ID_TC1, 1, 10);
  401b3e:	230a      	movs	r3, #10
  401b40:	2201      	movs	r2, #1
  401b42:	2118      	movs	r1, #24
  401b44:	4628      	mov	r0, r5
  401b46:	47a0      	blx	r4
	TC_init(TC0, ID_TC2, 2, 1);
  401b48:	2301      	movs	r3, #1
  401b4a:	2202      	movs	r2, #2
  401b4c:	2119      	movs	r1, #25
  401b4e:	4628      	mov	r0, r5
  401b50:	47a0      	blx	r4
	
	// Configure RTT...
	f_rtt_alarme = true;
  401b52:	2201      	movs	r2, #1
  401b54:	4b80      	ldr	r3, [pc, #512]	; (401d58 <main+0x240>)
  401b56:	701a      	strb	r2, [r3, #0]
	
	/** Configura RTC */
	calendar rtc_initial = {2020, 4, 6, 1, 18, 30, 1};
  401b58:	4c80      	ldr	r4, [pc, #512]	; (401d5c <main+0x244>)
  401b5a:	ad91      	add	r5, sp, #580	; 0x244
  401b5c:	4626      	mov	r6, r4
  401b5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  401b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401b62:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  401b66:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN | RTC_IER_SECEN);
  401b6a:	4f7d      	ldr	r7, [pc, #500]	; (401d60 <main+0x248>)
  401b6c:	2306      	movs	r3, #6
  401b6e:	9305      	str	r3, [sp, #20]
  401b70:	466d      	mov	r5, sp
  401b72:	ae93      	add	r6, sp, #588	; 0x24c
  401b74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  401b76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401b78:	6833      	ldr	r3, [r6, #0]
  401b7a:	602b      	str	r3, [r5, #0]
  401b7c:	ab91      	add	r3, sp, #580	; 0x244
  401b7e:	cb0c      	ldmia	r3, {r2, r3}
  401b80:	2102      	movs	r1, #2
  401b82:	4638      	mov	r0, r7
  401b84:	4d77      	ldr	r5, [pc, #476]	; (401d64 <main+0x24c>)
  401b86:	47a8      	blx	r5
	rtc_set_hour_mode(RTC, 0);
  401b88:	2100      	movs	r1, #0
  401b8a:	4638      	mov	r0, r7
  401b8c:	4b76      	ldr	r3, [pc, #472]	; (401d68 <main+0x250>)
  401b8e:	4798      	blx	r3
	int counter = 0;
	char stringCounter[5][6] = {"*----", "**---", "***--", "****-", "*****"};
  401b90:	ad89      	add	r5, sp, #548	; 0x224
  401b92:	341c      	adds	r4, #28
  401b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  401b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401b98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  401b9c:	c507      	stmia	r5!, {r0, r1, r2}
  401b9e:	802b      	strh	r3, [r5, #0]
	int flash_LED1 = 0;
	int flash_LED2 = 0;
	int flash_LED3 = 0;
  
	// Print LED's frequencies...
	gfx_mono_draw_string("5", 0, 0, &sysfont);
  401ba0:	4d72      	ldr	r5, [pc, #456]	; (401d6c <main+0x254>)
  401ba2:	462b      	mov	r3, r5
  401ba4:	2200      	movs	r2, #0
  401ba6:	4611      	mov	r1, r2
  401ba8:	4871      	ldr	r0, [pc, #452]	; (401d70 <main+0x258>)
  401baa:	4c72      	ldr	r4, [pc, #456]	; (401d74 <main+0x25c>)
  401bac:	47a0      	blx	r4
	gfx_mono_draw_string("10", 30, 0, &sysfont);
  401bae:	462b      	mov	r3, r5
  401bb0:	2200      	movs	r2, #0
  401bb2:	211e      	movs	r1, #30
  401bb4:	4870      	ldr	r0, [pc, #448]	; (401d78 <main+0x260>)
  401bb6:	47a0      	blx	r4
	gfx_mono_draw_string("1", 70, 0, &sysfont);
  401bb8:	462b      	mov	r3, r5
  401bba:	2200      	movs	r2, #0
  401bbc:	2146      	movs	r1, #70	; 0x46
  401bbe:	486f      	ldr	r0, [pc, #444]	; (401d7c <main+0x264>)
  401bc0:	47a0      	blx	r4
	uint32_t minute;
	uint32_t second;
	char timeBuffer[512];
	
	while (1) {
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  401bc2:	2002      	movs	r0, #2
  401bc4:	4b6e      	ldr	r3, [pc, #440]	; (401d80 <main+0x268>)
  401bc6:	4798      	blx	r3
		
		if (tc0_flag && flash_LED1 && !rtt_pause) {
  401bc8:	4b6e      	ldr	r3, [pc, #440]	; (401d84 <main+0x26c>)
  401bca:	781b      	ldrb	r3, [r3, #0]
	int flash_LED3 = 0;
  401bcc:	2700      	movs	r7, #0
	int flash_LED2 = 0;
  401bce:	46b9      	mov	r9, r7
	int counter = 0;
  401bd0:	463e      	mov	r6, r7
			pin_toggle(LED1_PIO, LED1_IDX_MASK);
			tc0_flag = 0;
		}
		
		if (tc1_flag && flash_LED2 && !rtt_pause) {
  401bd2:	f8df b200 	ldr.w	fp, [pc, #512]	; 401dd4 <main+0x2bc>
  401bd6:	f8df a200 	ldr.w	sl, [pc, #512]	; 401dd8 <main+0x2c0>
  401bda:	463d      	mov	r5, r7
  401bdc:	e060      	b.n	401ca0 <main+0x188>
			pin_toggle(LED1_PIO, LED1_IDX_MASK);
  401bde:	2101      	movs	r1, #1
  401be0:	4869      	ldr	r0, [pc, #420]	; (401d88 <main+0x270>)
  401be2:	4b6a      	ldr	r3, [pc, #424]	; (401d8c <main+0x274>)
  401be4:	4798      	blx	r3
			tc0_flag = 0;
  401be6:	2200      	movs	r2, #0
  401be8:	4b66      	ldr	r3, [pc, #408]	; (401d84 <main+0x26c>)
  401bea:	701a      	strb	r2, [r3, #0]
  401bec:	e058      	b.n	401ca0 <main+0x188>
			pin_toggle(LED2_PIO, LED2_IDX_MASK);
  401bee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401bf2:	4867      	ldr	r0, [pc, #412]	; (401d90 <main+0x278>)
  401bf4:	4b65      	ldr	r3, [pc, #404]	; (401d8c <main+0x274>)
  401bf6:	4798      	blx	r3
			tc1_flag = 0;
  401bf8:	2300      	movs	r3, #0
  401bfa:	f88b 3000 	strb.w	r3, [fp]
  401bfe:	e05a      	b.n	401cb6 <main+0x19e>
		if (tc2_flag && flash_LED3 && !rtt_pause) {
			pin_toggle(LED3_PIO, LED3_IDX_MASK);
			tc2_flag = 0;
		}
		
		if (but1_flag) {
  401c00:	4b64      	ldr	r3, [pc, #400]	; (401d94 <main+0x27c>)
  401c02:	681b      	ldr	r3, [r3, #0]
  401c04:	b123      	cbz	r3, 401c10 <main+0xf8>
			flash_LED1 = !flash_LED1;			
  401c06:	f085 0501 	eor.w	r5, r5, #1
			but1_flag = 0;
  401c0a:	2200      	movs	r2, #0
  401c0c:	4b61      	ldr	r3, [pc, #388]	; (401d94 <main+0x27c>)
  401c0e:	601a      	str	r2, [r3, #0]
		}
		
		if (but2_flag) {
  401c10:	4b61      	ldr	r3, [pc, #388]	; (401d98 <main+0x280>)
  401c12:	681b      	ldr	r3, [r3, #0]
  401c14:	b123      	cbz	r3, 401c20 <main+0x108>
			flash_LED2 = !flash_LED2;			
  401c16:	f089 0901 	eor.w	r9, r9, #1
			but2_flag = 0;
  401c1a:	2200      	movs	r2, #0
  401c1c:	4b5e      	ldr	r3, [pc, #376]	; (401d98 <main+0x280>)
  401c1e:	601a      	str	r2, [r3, #0]
		}
		
		if (but3_flag) {
  401c20:	4b5e      	ldr	r3, [pc, #376]	; (401d9c <main+0x284>)
  401c22:	681b      	ldr	r3, [r3, #0]
  401c24:	b123      	cbz	r3, 401c30 <main+0x118>
			flash_LED3 = !flash_LED3;			
  401c26:	f087 0701 	eor.w	r7, r7, #1
			but3_flag = 0;
  401c2a:	2200      	movs	r2, #0
  401c2c:	4b5b      	ldr	r3, [pc, #364]	; (401d9c <main+0x284>)
  401c2e:	601a      	str	r2, [r3, #0]
		}
		
		if (f_rtt_alarme) {
  401c30:	4b49      	ldr	r3, [pc, #292]	; (401d58 <main+0x240>)
  401c32:	781b      	ldrb	r3, [r3, #0]
  401c34:	2b00      	cmp	r3, #0
  401c36:	d151      	bne.n	401cdc <main+0x1c4>
      
			f_rtt_alarme = false;
			rtt_pause = !rtt_pause;
		}
		
		if (rtc_second) {
  401c38:	4b59      	ldr	r3, [pc, #356]	; (401da0 <main+0x288>)
  401c3a:	781b      	ldrb	r3, [r3, #0]
  401c3c:	b323      	cbz	r3, 401c88 <main+0x170>
			gfx_mono_draw_string(stringCounter[counter], 0, 16, &sysfont);
  401c3e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
  401c42:	4b4a      	ldr	r3, [pc, #296]	; (401d6c <main+0x254>)
  401c44:	2210      	movs	r2, #16
  401c46:	2100      	movs	r1, #0
  401c48:	ac89      	add	r4, sp, #548	; 0x224
  401c4a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
  401c4e:	4c49      	ldr	r4, [pc, #292]	; (401d74 <main+0x25c>)
  401c50:	47a0      	blx	r4
				
			counter += 1;
  401c52:	3601      	adds	r6, #1
			if (counter > 4) {
				counter = 0;
  401c54:	2e05      	cmp	r6, #5
  401c56:	bfa8      	it	ge
  401c58:	2600      	movge	r6, #0
			}
			
			rtc_get_time(RTC, &hour, &minute, &second);
  401c5a:	ab86      	add	r3, sp, #536	; 0x218
  401c5c:	aa87      	add	r2, sp, #540	; 0x21c
  401c5e:	a988      	add	r1, sp, #544	; 0x220
  401c60:	483f      	ldr	r0, [pc, #252]	; (401d60 <main+0x248>)
  401c62:	4c50      	ldr	r4, [pc, #320]	; (401da4 <main+0x28c>)
  401c64:	47a0      	blx	r4
			sprintf(timeBuffer, "%2d:%2d:%2d", hour, minute, second);
  401c66:	9b86      	ldr	r3, [sp, #536]	; 0x218
  401c68:	9300      	str	r3, [sp, #0]
  401c6a:	9b87      	ldr	r3, [sp, #540]	; 0x21c
  401c6c:	9a88      	ldr	r2, [sp, #544]	; 0x220
  401c6e:	494e      	ldr	r1, [pc, #312]	; (401da8 <main+0x290>)
  401c70:	a806      	add	r0, sp, #24
  401c72:	4c4e      	ldr	r4, [pc, #312]	; (401dac <main+0x294>)
  401c74:	47a0      	blx	r4
			gfx_mono_draw_string(timeBuffer, 50, 16, &sysfont);
  401c76:	4b3d      	ldr	r3, [pc, #244]	; (401d6c <main+0x254>)
  401c78:	2210      	movs	r2, #16
  401c7a:	2132      	movs	r1, #50	; 0x32
  401c7c:	a806      	add	r0, sp, #24
  401c7e:	4c3d      	ldr	r4, [pc, #244]	; (401d74 <main+0x25c>)
  401c80:	47a0      	blx	r4
			
			rtc_second = 0;
  401c82:	2200      	movs	r2, #0
  401c84:	4b46      	ldr	r3, [pc, #280]	; (401da0 <main+0x288>)
  401c86:	701a      	strb	r2, [r3, #0]
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  401c88:	2002      	movs	r0, #2
  401c8a:	4b3d      	ldr	r3, [pc, #244]	; (401d80 <main+0x268>)
  401c8c:	4798      	blx	r3
		if (tc0_flag && flash_LED1 && !rtt_pause) {
  401c8e:	4b3d      	ldr	r3, [pc, #244]	; (401d84 <main+0x26c>)
  401c90:	781b      	ldrb	r3, [r3, #0]
  401c92:	b2db      	uxtb	r3, r3
  401c94:	b125      	cbz	r5, 401ca0 <main+0x188>
  401c96:	b11b      	cbz	r3, 401ca0 <main+0x188>
  401c98:	f89a 3000 	ldrb.w	r3, [sl]
  401c9c:	2b00      	cmp	r3, #0
  401c9e:	d09e      	beq.n	401bde <main+0xc6>
		if (tc1_flag && flash_LED2 && !rtt_pause) {
  401ca0:	f89b 3000 	ldrb.w	r3, [fp]
  401ca4:	b2db      	uxtb	r3, r3
  401ca6:	f1b9 0f00 	cmp.w	r9, #0
  401caa:	d004      	beq.n	401cb6 <main+0x19e>
  401cac:	b11b      	cbz	r3, 401cb6 <main+0x19e>
  401cae:	f89a 3000 	ldrb.w	r3, [sl]
  401cb2:	2b00      	cmp	r3, #0
  401cb4:	d09b      	beq.n	401bee <main+0xd6>
		if (tc2_flag && flash_LED3 && !rtt_pause) {
  401cb6:	4b3e      	ldr	r3, [pc, #248]	; (401db0 <main+0x298>)
  401cb8:	781b      	ldrb	r3, [r3, #0]
  401cba:	b2db      	uxtb	r3, r3
  401cbc:	2f00      	cmp	r7, #0
  401cbe:	d09f      	beq.n	401c00 <main+0xe8>
  401cc0:	2b00      	cmp	r3, #0
  401cc2:	d09d      	beq.n	401c00 <main+0xe8>
  401cc4:	f89a 3000 	ldrb.w	r3, [sl]
  401cc8:	2b00      	cmp	r3, #0
  401cca:	d199      	bne.n	401c00 <main+0xe8>
			pin_toggle(LED3_PIO, LED3_IDX_MASK);
  401ccc:	2104      	movs	r1, #4
  401cce:	4839      	ldr	r0, [pc, #228]	; (401db4 <main+0x29c>)
  401cd0:	4b2e      	ldr	r3, [pc, #184]	; (401d8c <main+0x274>)
  401cd2:	4798      	blx	r3
			tc2_flag = 0;
  401cd4:	2200      	movs	r2, #0
  401cd6:	4b36      	ldr	r3, [pc, #216]	; (401db0 <main+0x298>)
  401cd8:	701a      	strb	r2, [r3, #0]
  401cda:	e791      	b.n	401c00 <main+0xe8>
	rtt_sel_source(RTT, false);
  401cdc:	2100      	movs	r1, #0
  401cde:	4836      	ldr	r0, [pc, #216]	; (401db8 <main+0x2a0>)
  401ce0:	4b36      	ldr	r3, [pc, #216]	; (401dbc <main+0x2a4>)
  401ce2:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  401ce4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  401ce8:	4833      	ldr	r0, [pc, #204]	; (401db8 <main+0x2a0>)
  401cea:	4b35      	ldr	r3, [pc, #212]	; (401dc0 <main+0x2a8>)
  401cec:	4798      	blx	r3
	ul_previous_time = rtt_read_timer_value(RTT);
  401cee:	4832      	ldr	r0, [pc, #200]	; (401db8 <main+0x2a0>)
  401cf0:	4b34      	ldr	r3, [pc, #208]	; (401dc4 <main+0x2ac>)
  401cf2:	4798      	blx	r3
  401cf4:	4604      	mov	r4, r0
	while (ul_previous_time == rtt_read_timer_value(RTT));
  401cf6:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 401dc4 <main+0x2ac>
  401cfa:	482f      	ldr	r0, [pc, #188]	; (401db8 <main+0x2a0>)
  401cfc:	47c0      	blx	r8
  401cfe:	4284      	cmp	r4, r0
  401d00:	d0fb      	beq.n	401cfa <main+0x1e2>
	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  401d02:	f104 0113 	add.w	r1, r4, #19
  401d06:	482c      	ldr	r0, [pc, #176]	; (401db8 <main+0x2a0>)
  401d08:	4b2f      	ldr	r3, [pc, #188]	; (401dc8 <main+0x2b0>)
  401d0a:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401d0c:	4b2f      	ldr	r3, [pc, #188]	; (401dcc <main+0x2b4>)
  401d0e:	2208      	movs	r2, #8
  401d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401d14:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401d18:	2400      	movs	r4, #0
  401d1a:	f883 4303 	strb.w	r4, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401d1e:	601a      	str	r2, [r3, #0]
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  401d20:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401d24:	4824      	ldr	r0, [pc, #144]	; (401db8 <main+0x2a0>)
  401d26:	4b2a      	ldr	r3, [pc, #168]	; (401dd0 <main+0x2b8>)
  401d28:	4798      	blx	r3
			f_rtt_alarme = false;
  401d2a:	4b0b      	ldr	r3, [pc, #44]	; (401d58 <main+0x240>)
  401d2c:	701c      	strb	r4, [r3, #0]
			rtt_pause = !rtt_pause;
  401d2e:	f89a 3000 	ldrb.w	r3, [sl]
  401d32:	fab3 f383 	clz	r3, r3
  401d36:	095b      	lsrs	r3, r3, #5
  401d38:	f88a 3000 	strb.w	r3, [sl]
  401d3c:	e77c      	b.n	401c38 <main+0x120>
  401d3e:	bf00      	nop
  401d40:	00400c31 	.word	0x00400c31
  401d44:	00400bc1 	.word	0x00400bc1
  401d48:	004008a1 	.word	0x004008a1
  401d4c:	00401761 	.word	0x00401761
  401d50:	4000c000 	.word	0x4000c000
  401d54:	004018f1 	.word	0x004018f1
  401d58:	20400c80 	.word	0x20400c80
  401d5c:	0040713c 	.word	0x0040713c
  401d60:	400e1860 	.word	0x400e1860
  401d64:	00401a21 	.word	0x00401a21
  401d68:	004001ad 	.word	0x004001ad
  401d6c:	2040000c 	.word	0x2040000c
  401d70:	00407178 	.word	0x00407178
  401d74:	00400809 	.word	0x00400809
  401d78:	0040717c 	.word	0x0040717c
  401d7c:	00407180 	.word	0x00407180
  401d80:	0040122d 	.word	0x0040122d
  401d84:	20400c82 	.word	0x20400c82
  401d88:	400e0e00 	.word	0x400e0e00
  401d8c:	004018c5 	.word	0x004018c5
  401d90:	400e1200 	.word	0x400e1200
  401d94:	20400c74 	.word	0x20400c74
  401d98:	20400c78 	.word	0x20400c78
  401d9c:	20400c7c 	.word	0x20400c7c
  401da0:	20400c81 	.word	0x20400c81
  401da4:	004001c7 	.word	0x004001c7
  401da8:	00407184 	.word	0x00407184
  401dac:	00401ec9 	.word	0x00401ec9
  401db0:	20400c84 	.word	0x20400c84
  401db4:	400e1000 	.word	0x400e1000
  401db8:	400e1830 	.word	0x400e1830
  401dbc:	00400385 	.word	0x00400385
  401dc0:	00400371 	.word	0x00400371
  401dc4:	004003d9 	.word	0x004003d9
  401dc8:	004003f1 	.word	0x004003f1
  401dcc:	e000e100 	.word	0xe000e100
  401dd0:	004003b1 	.word	0x004003b1
  401dd4:	20400c83 	.word	0x20400c83
  401dd8:	20400020 	.word	0x20400020

00401ddc <__libc_init_array>:
  401ddc:	b570      	push	{r4, r5, r6, lr}
  401dde:	4e0f      	ldr	r6, [pc, #60]	; (401e1c <__libc_init_array+0x40>)
  401de0:	4d0f      	ldr	r5, [pc, #60]	; (401e20 <__libc_init_array+0x44>)
  401de2:	1b76      	subs	r6, r6, r5
  401de4:	10b6      	asrs	r6, r6, #2
  401de6:	bf18      	it	ne
  401de8:	2400      	movne	r4, #0
  401dea:	d005      	beq.n	401df8 <__libc_init_array+0x1c>
  401dec:	3401      	adds	r4, #1
  401dee:	f855 3b04 	ldr.w	r3, [r5], #4
  401df2:	4798      	blx	r3
  401df4:	42a6      	cmp	r6, r4
  401df6:	d1f9      	bne.n	401dec <__libc_init_array+0x10>
  401df8:	4e0a      	ldr	r6, [pc, #40]	; (401e24 <__libc_init_array+0x48>)
  401dfa:	4d0b      	ldr	r5, [pc, #44]	; (401e28 <__libc_init_array+0x4c>)
  401dfc:	1b76      	subs	r6, r6, r5
  401dfe:	f005 fb0b 	bl	407418 <_init>
  401e02:	10b6      	asrs	r6, r6, #2
  401e04:	bf18      	it	ne
  401e06:	2400      	movne	r4, #0
  401e08:	d006      	beq.n	401e18 <__libc_init_array+0x3c>
  401e0a:	3401      	adds	r4, #1
  401e0c:	f855 3b04 	ldr.w	r3, [r5], #4
  401e10:	4798      	blx	r3
  401e12:	42a6      	cmp	r6, r4
  401e14:	d1f9      	bne.n	401e0a <__libc_init_array+0x2e>
  401e16:	bd70      	pop	{r4, r5, r6, pc}
  401e18:	bd70      	pop	{r4, r5, r6, pc}
  401e1a:	bf00      	nop
  401e1c:	00407424 	.word	0x00407424
  401e20:	00407424 	.word	0x00407424
  401e24:	0040742c 	.word	0x0040742c
  401e28:	00407424 	.word	0x00407424

00401e2c <memset>:
  401e2c:	b470      	push	{r4, r5, r6}
  401e2e:	0786      	lsls	r6, r0, #30
  401e30:	d046      	beq.n	401ec0 <memset+0x94>
  401e32:	1e54      	subs	r4, r2, #1
  401e34:	2a00      	cmp	r2, #0
  401e36:	d041      	beq.n	401ebc <memset+0x90>
  401e38:	b2ca      	uxtb	r2, r1
  401e3a:	4603      	mov	r3, r0
  401e3c:	e002      	b.n	401e44 <memset+0x18>
  401e3e:	f114 34ff 	adds.w	r4, r4, #4294967295
  401e42:	d33b      	bcc.n	401ebc <memset+0x90>
  401e44:	f803 2b01 	strb.w	r2, [r3], #1
  401e48:	079d      	lsls	r5, r3, #30
  401e4a:	d1f8      	bne.n	401e3e <memset+0x12>
  401e4c:	2c03      	cmp	r4, #3
  401e4e:	d92e      	bls.n	401eae <memset+0x82>
  401e50:	b2cd      	uxtb	r5, r1
  401e52:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401e56:	2c0f      	cmp	r4, #15
  401e58:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401e5c:	d919      	bls.n	401e92 <memset+0x66>
  401e5e:	f103 0210 	add.w	r2, r3, #16
  401e62:	4626      	mov	r6, r4
  401e64:	3e10      	subs	r6, #16
  401e66:	2e0f      	cmp	r6, #15
  401e68:	f842 5c10 	str.w	r5, [r2, #-16]
  401e6c:	f842 5c0c 	str.w	r5, [r2, #-12]
  401e70:	f842 5c08 	str.w	r5, [r2, #-8]
  401e74:	f842 5c04 	str.w	r5, [r2, #-4]
  401e78:	f102 0210 	add.w	r2, r2, #16
  401e7c:	d8f2      	bhi.n	401e64 <memset+0x38>
  401e7e:	f1a4 0210 	sub.w	r2, r4, #16
  401e82:	f022 020f 	bic.w	r2, r2, #15
  401e86:	f004 040f 	and.w	r4, r4, #15
  401e8a:	3210      	adds	r2, #16
  401e8c:	2c03      	cmp	r4, #3
  401e8e:	4413      	add	r3, r2
  401e90:	d90d      	bls.n	401eae <memset+0x82>
  401e92:	461e      	mov	r6, r3
  401e94:	4622      	mov	r2, r4
  401e96:	3a04      	subs	r2, #4
  401e98:	2a03      	cmp	r2, #3
  401e9a:	f846 5b04 	str.w	r5, [r6], #4
  401e9e:	d8fa      	bhi.n	401e96 <memset+0x6a>
  401ea0:	1f22      	subs	r2, r4, #4
  401ea2:	f022 0203 	bic.w	r2, r2, #3
  401ea6:	3204      	adds	r2, #4
  401ea8:	4413      	add	r3, r2
  401eaa:	f004 0403 	and.w	r4, r4, #3
  401eae:	b12c      	cbz	r4, 401ebc <memset+0x90>
  401eb0:	b2c9      	uxtb	r1, r1
  401eb2:	441c      	add	r4, r3
  401eb4:	f803 1b01 	strb.w	r1, [r3], #1
  401eb8:	429c      	cmp	r4, r3
  401eba:	d1fb      	bne.n	401eb4 <memset+0x88>
  401ebc:	bc70      	pop	{r4, r5, r6}
  401ebe:	4770      	bx	lr
  401ec0:	4614      	mov	r4, r2
  401ec2:	4603      	mov	r3, r0
  401ec4:	e7c2      	b.n	401e4c <memset+0x20>
  401ec6:	bf00      	nop

00401ec8 <sprintf>:
  401ec8:	b40e      	push	{r1, r2, r3}
  401eca:	b5f0      	push	{r4, r5, r6, r7, lr}
  401ecc:	b09c      	sub	sp, #112	; 0x70
  401ece:	ab21      	add	r3, sp, #132	; 0x84
  401ed0:	490f      	ldr	r1, [pc, #60]	; (401f10 <sprintf+0x48>)
  401ed2:	f853 2b04 	ldr.w	r2, [r3], #4
  401ed6:	9301      	str	r3, [sp, #4]
  401ed8:	4605      	mov	r5, r0
  401eda:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  401ede:	6808      	ldr	r0, [r1, #0]
  401ee0:	9502      	str	r5, [sp, #8]
  401ee2:	f44f 7702 	mov.w	r7, #520	; 0x208
  401ee6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  401eea:	a902      	add	r1, sp, #8
  401eec:	9506      	str	r5, [sp, #24]
  401eee:	f8ad 7014 	strh.w	r7, [sp, #20]
  401ef2:	9404      	str	r4, [sp, #16]
  401ef4:	9407      	str	r4, [sp, #28]
  401ef6:	f8ad 6016 	strh.w	r6, [sp, #22]
  401efa:	f000 f80b 	bl	401f14 <_svfprintf_r>
  401efe:	9b02      	ldr	r3, [sp, #8]
  401f00:	2200      	movs	r2, #0
  401f02:	701a      	strb	r2, [r3, #0]
  401f04:	b01c      	add	sp, #112	; 0x70
  401f06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  401f0a:	b003      	add	sp, #12
  401f0c:	4770      	bx	lr
  401f0e:	bf00      	nop
  401f10:	20400024 	.word	0x20400024

00401f14 <_svfprintf_r>:
  401f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f18:	b0c3      	sub	sp, #268	; 0x10c
  401f1a:	460c      	mov	r4, r1
  401f1c:	910b      	str	r1, [sp, #44]	; 0x2c
  401f1e:	4692      	mov	sl, r2
  401f20:	930f      	str	r3, [sp, #60]	; 0x3c
  401f22:	900c      	str	r0, [sp, #48]	; 0x30
  401f24:	f002 fa0c 	bl	404340 <_localeconv_r>
  401f28:	6803      	ldr	r3, [r0, #0]
  401f2a:	931a      	str	r3, [sp, #104]	; 0x68
  401f2c:	4618      	mov	r0, r3
  401f2e:	f003 f8e7 	bl	405100 <strlen>
  401f32:	89a3      	ldrh	r3, [r4, #12]
  401f34:	9019      	str	r0, [sp, #100]	; 0x64
  401f36:	0619      	lsls	r1, r3, #24
  401f38:	d503      	bpl.n	401f42 <_svfprintf_r+0x2e>
  401f3a:	6923      	ldr	r3, [r4, #16]
  401f3c:	2b00      	cmp	r3, #0
  401f3e:	f001 8003 	beq.w	402f48 <_svfprintf_r+0x1034>
  401f42:	2300      	movs	r3, #0
  401f44:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  401f48:	9313      	str	r3, [sp, #76]	; 0x4c
  401f4a:	9315      	str	r3, [sp, #84]	; 0x54
  401f4c:	9314      	str	r3, [sp, #80]	; 0x50
  401f4e:	9327      	str	r3, [sp, #156]	; 0x9c
  401f50:	9326      	str	r3, [sp, #152]	; 0x98
  401f52:	9318      	str	r3, [sp, #96]	; 0x60
  401f54:	931b      	str	r3, [sp, #108]	; 0x6c
  401f56:	9309      	str	r3, [sp, #36]	; 0x24
  401f58:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  401f5c:	46c8      	mov	r8, r9
  401f5e:	9316      	str	r3, [sp, #88]	; 0x58
  401f60:	9317      	str	r3, [sp, #92]	; 0x5c
  401f62:	f89a 3000 	ldrb.w	r3, [sl]
  401f66:	4654      	mov	r4, sl
  401f68:	b1e3      	cbz	r3, 401fa4 <_svfprintf_r+0x90>
  401f6a:	2b25      	cmp	r3, #37	; 0x25
  401f6c:	d102      	bne.n	401f74 <_svfprintf_r+0x60>
  401f6e:	e019      	b.n	401fa4 <_svfprintf_r+0x90>
  401f70:	2b25      	cmp	r3, #37	; 0x25
  401f72:	d003      	beq.n	401f7c <_svfprintf_r+0x68>
  401f74:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401f78:	2b00      	cmp	r3, #0
  401f7a:	d1f9      	bne.n	401f70 <_svfprintf_r+0x5c>
  401f7c:	eba4 050a 	sub.w	r5, r4, sl
  401f80:	b185      	cbz	r5, 401fa4 <_svfprintf_r+0x90>
  401f82:	9b26      	ldr	r3, [sp, #152]	; 0x98
  401f84:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  401f86:	f8c8 a000 	str.w	sl, [r8]
  401f8a:	3301      	adds	r3, #1
  401f8c:	442a      	add	r2, r5
  401f8e:	2b07      	cmp	r3, #7
  401f90:	f8c8 5004 	str.w	r5, [r8, #4]
  401f94:	9227      	str	r2, [sp, #156]	; 0x9c
  401f96:	9326      	str	r3, [sp, #152]	; 0x98
  401f98:	dc7f      	bgt.n	40209a <_svfprintf_r+0x186>
  401f9a:	f108 0808 	add.w	r8, r8, #8
  401f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401fa0:	442b      	add	r3, r5
  401fa2:	9309      	str	r3, [sp, #36]	; 0x24
  401fa4:	7823      	ldrb	r3, [r4, #0]
  401fa6:	2b00      	cmp	r3, #0
  401fa8:	d07f      	beq.n	4020aa <_svfprintf_r+0x196>
  401faa:	2300      	movs	r3, #0
  401fac:	461a      	mov	r2, r3
  401fae:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  401fb2:	4619      	mov	r1, r3
  401fb4:	930d      	str	r3, [sp, #52]	; 0x34
  401fb6:	469b      	mov	fp, r3
  401fb8:	f04f 30ff 	mov.w	r0, #4294967295
  401fbc:	7863      	ldrb	r3, [r4, #1]
  401fbe:	900a      	str	r0, [sp, #40]	; 0x28
  401fc0:	f104 0a01 	add.w	sl, r4, #1
  401fc4:	f10a 0a01 	add.w	sl, sl, #1
  401fc8:	f1a3 0020 	sub.w	r0, r3, #32
  401fcc:	2858      	cmp	r0, #88	; 0x58
  401fce:	f200 83c1 	bhi.w	402754 <_svfprintf_r+0x840>
  401fd2:	e8df f010 	tbh	[pc, r0, lsl #1]
  401fd6:	0238      	.short	0x0238
  401fd8:	03bf03bf 	.word	0x03bf03bf
  401fdc:	03bf0240 	.word	0x03bf0240
  401fe0:	03bf03bf 	.word	0x03bf03bf
  401fe4:	03bf03bf 	.word	0x03bf03bf
  401fe8:	024503bf 	.word	0x024503bf
  401fec:	03bf0203 	.word	0x03bf0203
  401ff0:	026b005d 	.word	0x026b005d
  401ff4:	028603bf 	.word	0x028603bf
  401ff8:	039d039d 	.word	0x039d039d
  401ffc:	039d039d 	.word	0x039d039d
  402000:	039d039d 	.word	0x039d039d
  402004:	039d039d 	.word	0x039d039d
  402008:	03bf039d 	.word	0x03bf039d
  40200c:	03bf03bf 	.word	0x03bf03bf
  402010:	03bf03bf 	.word	0x03bf03bf
  402014:	03bf03bf 	.word	0x03bf03bf
  402018:	03bf03bf 	.word	0x03bf03bf
  40201c:	033703bf 	.word	0x033703bf
  402020:	03bf0357 	.word	0x03bf0357
  402024:	03bf0357 	.word	0x03bf0357
  402028:	03bf03bf 	.word	0x03bf03bf
  40202c:	039803bf 	.word	0x039803bf
  402030:	03bf03bf 	.word	0x03bf03bf
  402034:	03bf03ad 	.word	0x03bf03ad
  402038:	03bf03bf 	.word	0x03bf03bf
  40203c:	03bf03bf 	.word	0x03bf03bf
  402040:	03bf0259 	.word	0x03bf0259
  402044:	031e03bf 	.word	0x031e03bf
  402048:	03bf03bf 	.word	0x03bf03bf
  40204c:	03bf03bf 	.word	0x03bf03bf
  402050:	03bf03bf 	.word	0x03bf03bf
  402054:	03bf03bf 	.word	0x03bf03bf
  402058:	03bf03bf 	.word	0x03bf03bf
  40205c:	02db02c6 	.word	0x02db02c6
  402060:	03570357 	.word	0x03570357
  402064:	028b0357 	.word	0x028b0357
  402068:	03bf02db 	.word	0x03bf02db
  40206c:	029003bf 	.word	0x029003bf
  402070:	029d03bf 	.word	0x029d03bf
  402074:	02b401cc 	.word	0x02b401cc
  402078:	03bf0208 	.word	0x03bf0208
  40207c:	03bf01e1 	.word	0x03bf01e1
  402080:	03bf007e 	.word	0x03bf007e
  402084:	020d03bf 	.word	0x020d03bf
  402088:	980d      	ldr	r0, [sp, #52]	; 0x34
  40208a:	930f      	str	r3, [sp, #60]	; 0x3c
  40208c:	4240      	negs	r0, r0
  40208e:	900d      	str	r0, [sp, #52]	; 0x34
  402090:	f04b 0b04 	orr.w	fp, fp, #4
  402094:	f89a 3000 	ldrb.w	r3, [sl]
  402098:	e794      	b.n	401fc4 <_svfprintf_r+0xb0>
  40209a:	aa25      	add	r2, sp, #148	; 0x94
  40209c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40209e:	980c      	ldr	r0, [sp, #48]	; 0x30
  4020a0:	f003 f89c 	bl	4051dc <__ssprint_r>
  4020a4:	b940      	cbnz	r0, 4020b8 <_svfprintf_r+0x1a4>
  4020a6:	46c8      	mov	r8, r9
  4020a8:	e779      	b.n	401f9e <_svfprintf_r+0x8a>
  4020aa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4020ac:	b123      	cbz	r3, 4020b8 <_svfprintf_r+0x1a4>
  4020ae:	980c      	ldr	r0, [sp, #48]	; 0x30
  4020b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4020b2:	aa25      	add	r2, sp, #148	; 0x94
  4020b4:	f003 f892 	bl	4051dc <__ssprint_r>
  4020b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4020ba:	899b      	ldrh	r3, [r3, #12]
  4020bc:	f013 0f40 	tst.w	r3, #64	; 0x40
  4020c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4020c2:	bf18      	it	ne
  4020c4:	f04f 33ff 	movne.w	r3, #4294967295
  4020c8:	9309      	str	r3, [sp, #36]	; 0x24
  4020ca:	9809      	ldr	r0, [sp, #36]	; 0x24
  4020cc:	b043      	add	sp, #268	; 0x10c
  4020ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4020d2:	f01b 0f20 	tst.w	fp, #32
  4020d6:	9311      	str	r3, [sp, #68]	; 0x44
  4020d8:	f040 81dd 	bne.w	402496 <_svfprintf_r+0x582>
  4020dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4020de:	f01b 0f10 	tst.w	fp, #16
  4020e2:	4613      	mov	r3, r2
  4020e4:	f040 856e 	bne.w	402bc4 <_svfprintf_r+0xcb0>
  4020e8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4020ec:	f000 856a 	beq.w	402bc4 <_svfprintf_r+0xcb0>
  4020f0:	8814      	ldrh	r4, [r2, #0]
  4020f2:	3204      	adds	r2, #4
  4020f4:	2500      	movs	r5, #0
  4020f6:	2301      	movs	r3, #1
  4020f8:	920f      	str	r2, [sp, #60]	; 0x3c
  4020fa:	2700      	movs	r7, #0
  4020fc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  402100:	990a      	ldr	r1, [sp, #40]	; 0x28
  402102:	1c4a      	adds	r2, r1, #1
  402104:	f000 8265 	beq.w	4025d2 <_svfprintf_r+0x6be>
  402108:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  40210c:	9207      	str	r2, [sp, #28]
  40210e:	ea54 0205 	orrs.w	r2, r4, r5
  402112:	f040 8264 	bne.w	4025de <_svfprintf_r+0x6ca>
  402116:	2900      	cmp	r1, #0
  402118:	f040 843c 	bne.w	402994 <_svfprintf_r+0xa80>
  40211c:	2b00      	cmp	r3, #0
  40211e:	f040 84d7 	bne.w	402ad0 <_svfprintf_r+0xbbc>
  402122:	f01b 0301 	ands.w	r3, fp, #1
  402126:	930e      	str	r3, [sp, #56]	; 0x38
  402128:	f000 8604 	beq.w	402d34 <_svfprintf_r+0xe20>
  40212c:	ae42      	add	r6, sp, #264	; 0x108
  40212e:	2330      	movs	r3, #48	; 0x30
  402130:	f806 3d41 	strb.w	r3, [r6, #-65]!
  402134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402136:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402138:	4293      	cmp	r3, r2
  40213a:	bfb8      	it	lt
  40213c:	4613      	movlt	r3, r2
  40213e:	9308      	str	r3, [sp, #32]
  402140:	2300      	movs	r3, #0
  402142:	9312      	str	r3, [sp, #72]	; 0x48
  402144:	b117      	cbz	r7, 40214c <_svfprintf_r+0x238>
  402146:	9b08      	ldr	r3, [sp, #32]
  402148:	3301      	adds	r3, #1
  40214a:	9308      	str	r3, [sp, #32]
  40214c:	9b07      	ldr	r3, [sp, #28]
  40214e:	f013 0302 	ands.w	r3, r3, #2
  402152:	9310      	str	r3, [sp, #64]	; 0x40
  402154:	d002      	beq.n	40215c <_svfprintf_r+0x248>
  402156:	9b08      	ldr	r3, [sp, #32]
  402158:	3302      	adds	r3, #2
  40215a:	9308      	str	r3, [sp, #32]
  40215c:	9b07      	ldr	r3, [sp, #28]
  40215e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  402162:	f040 830e 	bne.w	402782 <_svfprintf_r+0x86e>
  402166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402168:	9a08      	ldr	r2, [sp, #32]
  40216a:	eba3 0b02 	sub.w	fp, r3, r2
  40216e:	f1bb 0f00 	cmp.w	fp, #0
  402172:	f340 8306 	ble.w	402782 <_svfprintf_r+0x86e>
  402176:	f1bb 0f10 	cmp.w	fp, #16
  40217a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40217c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40217e:	dd29      	ble.n	4021d4 <_svfprintf_r+0x2c0>
  402180:	4643      	mov	r3, r8
  402182:	4621      	mov	r1, r4
  402184:	46a8      	mov	r8, r5
  402186:	2710      	movs	r7, #16
  402188:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40218a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40218c:	e006      	b.n	40219c <_svfprintf_r+0x288>
  40218e:	f1ab 0b10 	sub.w	fp, fp, #16
  402192:	f1bb 0f10 	cmp.w	fp, #16
  402196:	f103 0308 	add.w	r3, r3, #8
  40219a:	dd18      	ble.n	4021ce <_svfprintf_r+0x2ba>
  40219c:	3201      	adds	r2, #1
  40219e:	48b7      	ldr	r0, [pc, #732]	; (40247c <_svfprintf_r+0x568>)
  4021a0:	9226      	str	r2, [sp, #152]	; 0x98
  4021a2:	3110      	adds	r1, #16
  4021a4:	2a07      	cmp	r2, #7
  4021a6:	9127      	str	r1, [sp, #156]	; 0x9c
  4021a8:	e883 0081 	stmia.w	r3, {r0, r7}
  4021ac:	ddef      	ble.n	40218e <_svfprintf_r+0x27a>
  4021ae:	aa25      	add	r2, sp, #148	; 0x94
  4021b0:	4629      	mov	r1, r5
  4021b2:	4620      	mov	r0, r4
  4021b4:	f003 f812 	bl	4051dc <__ssprint_r>
  4021b8:	2800      	cmp	r0, #0
  4021ba:	f47f af7d 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  4021be:	f1ab 0b10 	sub.w	fp, fp, #16
  4021c2:	f1bb 0f10 	cmp.w	fp, #16
  4021c6:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4021c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4021ca:	464b      	mov	r3, r9
  4021cc:	dce6      	bgt.n	40219c <_svfprintf_r+0x288>
  4021ce:	4645      	mov	r5, r8
  4021d0:	460c      	mov	r4, r1
  4021d2:	4698      	mov	r8, r3
  4021d4:	3201      	adds	r2, #1
  4021d6:	4ba9      	ldr	r3, [pc, #676]	; (40247c <_svfprintf_r+0x568>)
  4021d8:	9226      	str	r2, [sp, #152]	; 0x98
  4021da:	445c      	add	r4, fp
  4021dc:	2a07      	cmp	r2, #7
  4021de:	9427      	str	r4, [sp, #156]	; 0x9c
  4021e0:	e888 0808 	stmia.w	r8, {r3, fp}
  4021e4:	f300 8498 	bgt.w	402b18 <_svfprintf_r+0xc04>
  4021e8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4021ec:	f108 0808 	add.w	r8, r8, #8
  4021f0:	b177      	cbz	r7, 402210 <_svfprintf_r+0x2fc>
  4021f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4021f4:	3301      	adds	r3, #1
  4021f6:	3401      	adds	r4, #1
  4021f8:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  4021fc:	2201      	movs	r2, #1
  4021fe:	2b07      	cmp	r3, #7
  402200:	9427      	str	r4, [sp, #156]	; 0x9c
  402202:	9326      	str	r3, [sp, #152]	; 0x98
  402204:	e888 0006 	stmia.w	r8, {r1, r2}
  402208:	f300 83db 	bgt.w	4029c2 <_svfprintf_r+0xaae>
  40220c:	f108 0808 	add.w	r8, r8, #8
  402210:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402212:	b16b      	cbz	r3, 402230 <_svfprintf_r+0x31c>
  402214:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402216:	3301      	adds	r3, #1
  402218:	3402      	adds	r4, #2
  40221a:	a91e      	add	r1, sp, #120	; 0x78
  40221c:	2202      	movs	r2, #2
  40221e:	2b07      	cmp	r3, #7
  402220:	9427      	str	r4, [sp, #156]	; 0x9c
  402222:	9326      	str	r3, [sp, #152]	; 0x98
  402224:	e888 0006 	stmia.w	r8, {r1, r2}
  402228:	f300 83d6 	bgt.w	4029d8 <_svfprintf_r+0xac4>
  40222c:	f108 0808 	add.w	r8, r8, #8
  402230:	2d80      	cmp	r5, #128	; 0x80
  402232:	f000 8315 	beq.w	402860 <_svfprintf_r+0x94c>
  402236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40223a:	1a9f      	subs	r7, r3, r2
  40223c:	2f00      	cmp	r7, #0
  40223e:	dd36      	ble.n	4022ae <_svfprintf_r+0x39a>
  402240:	2f10      	cmp	r7, #16
  402242:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402244:	4d8e      	ldr	r5, [pc, #568]	; (402480 <_svfprintf_r+0x56c>)
  402246:	dd27      	ble.n	402298 <_svfprintf_r+0x384>
  402248:	4642      	mov	r2, r8
  40224a:	4621      	mov	r1, r4
  40224c:	46b0      	mov	r8, r6
  40224e:	f04f 0b10 	mov.w	fp, #16
  402252:	462e      	mov	r6, r5
  402254:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402256:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402258:	e004      	b.n	402264 <_svfprintf_r+0x350>
  40225a:	3f10      	subs	r7, #16
  40225c:	2f10      	cmp	r7, #16
  40225e:	f102 0208 	add.w	r2, r2, #8
  402262:	dd15      	ble.n	402290 <_svfprintf_r+0x37c>
  402264:	3301      	adds	r3, #1
  402266:	3110      	adds	r1, #16
  402268:	2b07      	cmp	r3, #7
  40226a:	9127      	str	r1, [sp, #156]	; 0x9c
  40226c:	9326      	str	r3, [sp, #152]	; 0x98
  40226e:	e882 0840 	stmia.w	r2, {r6, fp}
  402272:	ddf2      	ble.n	40225a <_svfprintf_r+0x346>
  402274:	aa25      	add	r2, sp, #148	; 0x94
  402276:	4629      	mov	r1, r5
  402278:	4620      	mov	r0, r4
  40227a:	f002 ffaf 	bl	4051dc <__ssprint_r>
  40227e:	2800      	cmp	r0, #0
  402280:	f47f af1a 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  402284:	3f10      	subs	r7, #16
  402286:	2f10      	cmp	r7, #16
  402288:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40228a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40228c:	464a      	mov	r2, r9
  40228e:	dce9      	bgt.n	402264 <_svfprintf_r+0x350>
  402290:	4635      	mov	r5, r6
  402292:	460c      	mov	r4, r1
  402294:	4646      	mov	r6, r8
  402296:	4690      	mov	r8, r2
  402298:	3301      	adds	r3, #1
  40229a:	443c      	add	r4, r7
  40229c:	2b07      	cmp	r3, #7
  40229e:	9427      	str	r4, [sp, #156]	; 0x9c
  4022a0:	9326      	str	r3, [sp, #152]	; 0x98
  4022a2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4022a6:	f300 8381 	bgt.w	4029ac <_svfprintf_r+0xa98>
  4022aa:	f108 0808 	add.w	r8, r8, #8
  4022ae:	9b07      	ldr	r3, [sp, #28]
  4022b0:	05df      	lsls	r7, r3, #23
  4022b2:	f100 8268 	bmi.w	402786 <_svfprintf_r+0x872>
  4022b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4022b8:	990e      	ldr	r1, [sp, #56]	; 0x38
  4022ba:	f8c8 6000 	str.w	r6, [r8]
  4022be:	3301      	adds	r3, #1
  4022c0:	440c      	add	r4, r1
  4022c2:	2b07      	cmp	r3, #7
  4022c4:	9427      	str	r4, [sp, #156]	; 0x9c
  4022c6:	f8c8 1004 	str.w	r1, [r8, #4]
  4022ca:	9326      	str	r3, [sp, #152]	; 0x98
  4022cc:	f300 834d 	bgt.w	40296a <_svfprintf_r+0xa56>
  4022d0:	f108 0808 	add.w	r8, r8, #8
  4022d4:	9b07      	ldr	r3, [sp, #28]
  4022d6:	075b      	lsls	r3, r3, #29
  4022d8:	d53a      	bpl.n	402350 <_svfprintf_r+0x43c>
  4022da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4022dc:	9a08      	ldr	r2, [sp, #32]
  4022de:	1a9d      	subs	r5, r3, r2
  4022e0:	2d00      	cmp	r5, #0
  4022e2:	dd35      	ble.n	402350 <_svfprintf_r+0x43c>
  4022e4:	2d10      	cmp	r5, #16
  4022e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4022e8:	dd20      	ble.n	40232c <_svfprintf_r+0x418>
  4022ea:	2610      	movs	r6, #16
  4022ec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4022ee:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4022f2:	e004      	b.n	4022fe <_svfprintf_r+0x3ea>
  4022f4:	3d10      	subs	r5, #16
  4022f6:	2d10      	cmp	r5, #16
  4022f8:	f108 0808 	add.w	r8, r8, #8
  4022fc:	dd16      	ble.n	40232c <_svfprintf_r+0x418>
  4022fe:	3301      	adds	r3, #1
  402300:	4a5e      	ldr	r2, [pc, #376]	; (40247c <_svfprintf_r+0x568>)
  402302:	9326      	str	r3, [sp, #152]	; 0x98
  402304:	3410      	adds	r4, #16
  402306:	2b07      	cmp	r3, #7
  402308:	9427      	str	r4, [sp, #156]	; 0x9c
  40230a:	e888 0044 	stmia.w	r8, {r2, r6}
  40230e:	ddf1      	ble.n	4022f4 <_svfprintf_r+0x3e0>
  402310:	aa25      	add	r2, sp, #148	; 0x94
  402312:	4659      	mov	r1, fp
  402314:	4638      	mov	r0, r7
  402316:	f002 ff61 	bl	4051dc <__ssprint_r>
  40231a:	2800      	cmp	r0, #0
  40231c:	f47f aecc 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  402320:	3d10      	subs	r5, #16
  402322:	2d10      	cmp	r5, #16
  402324:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402326:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402328:	46c8      	mov	r8, r9
  40232a:	dce8      	bgt.n	4022fe <_svfprintf_r+0x3ea>
  40232c:	3301      	adds	r3, #1
  40232e:	4a53      	ldr	r2, [pc, #332]	; (40247c <_svfprintf_r+0x568>)
  402330:	9326      	str	r3, [sp, #152]	; 0x98
  402332:	442c      	add	r4, r5
  402334:	2b07      	cmp	r3, #7
  402336:	9427      	str	r4, [sp, #156]	; 0x9c
  402338:	e888 0024 	stmia.w	r8, {r2, r5}
  40233c:	dd08      	ble.n	402350 <_svfprintf_r+0x43c>
  40233e:	aa25      	add	r2, sp, #148	; 0x94
  402340:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402342:	980c      	ldr	r0, [sp, #48]	; 0x30
  402344:	f002 ff4a 	bl	4051dc <__ssprint_r>
  402348:	2800      	cmp	r0, #0
  40234a:	f47f aeb5 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  40234e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402350:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402352:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402354:	9908      	ldr	r1, [sp, #32]
  402356:	428a      	cmp	r2, r1
  402358:	bfac      	ite	ge
  40235a:	189b      	addge	r3, r3, r2
  40235c:	185b      	addlt	r3, r3, r1
  40235e:	9309      	str	r3, [sp, #36]	; 0x24
  402360:	2c00      	cmp	r4, #0
  402362:	f040 830d 	bne.w	402980 <_svfprintf_r+0xa6c>
  402366:	2300      	movs	r3, #0
  402368:	9326      	str	r3, [sp, #152]	; 0x98
  40236a:	46c8      	mov	r8, r9
  40236c:	e5f9      	b.n	401f62 <_svfprintf_r+0x4e>
  40236e:	9311      	str	r3, [sp, #68]	; 0x44
  402370:	f01b 0320 	ands.w	r3, fp, #32
  402374:	f040 81e3 	bne.w	40273e <_svfprintf_r+0x82a>
  402378:	f01b 0210 	ands.w	r2, fp, #16
  40237c:	f040 842e 	bne.w	402bdc <_svfprintf_r+0xcc8>
  402380:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  402384:	f000 842a 	beq.w	402bdc <_svfprintf_r+0xcc8>
  402388:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40238a:	4613      	mov	r3, r2
  40238c:	460a      	mov	r2, r1
  40238e:	3204      	adds	r2, #4
  402390:	880c      	ldrh	r4, [r1, #0]
  402392:	920f      	str	r2, [sp, #60]	; 0x3c
  402394:	2500      	movs	r5, #0
  402396:	e6b0      	b.n	4020fa <_svfprintf_r+0x1e6>
  402398:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40239a:	9311      	str	r3, [sp, #68]	; 0x44
  40239c:	6816      	ldr	r6, [r2, #0]
  40239e:	2400      	movs	r4, #0
  4023a0:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4023a4:	1d15      	adds	r5, r2, #4
  4023a6:	2e00      	cmp	r6, #0
  4023a8:	f000 86a7 	beq.w	4030fa <_svfprintf_r+0x11e6>
  4023ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4023ae:	1c53      	adds	r3, r2, #1
  4023b0:	f000 8609 	beq.w	402fc6 <_svfprintf_r+0x10b2>
  4023b4:	4621      	mov	r1, r4
  4023b6:	4630      	mov	r0, r6
  4023b8:	f002 fa8a 	bl	4048d0 <memchr>
  4023bc:	2800      	cmp	r0, #0
  4023be:	f000 86e1 	beq.w	403184 <_svfprintf_r+0x1270>
  4023c2:	1b83      	subs	r3, r0, r6
  4023c4:	930e      	str	r3, [sp, #56]	; 0x38
  4023c6:	940a      	str	r4, [sp, #40]	; 0x28
  4023c8:	950f      	str	r5, [sp, #60]	; 0x3c
  4023ca:	f8cd b01c 	str.w	fp, [sp, #28]
  4023ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4023d2:	9308      	str	r3, [sp, #32]
  4023d4:	9412      	str	r4, [sp, #72]	; 0x48
  4023d6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4023da:	e6b3      	b.n	402144 <_svfprintf_r+0x230>
  4023dc:	f89a 3000 	ldrb.w	r3, [sl]
  4023e0:	2201      	movs	r2, #1
  4023e2:	212b      	movs	r1, #43	; 0x2b
  4023e4:	e5ee      	b.n	401fc4 <_svfprintf_r+0xb0>
  4023e6:	f04b 0b20 	orr.w	fp, fp, #32
  4023ea:	f89a 3000 	ldrb.w	r3, [sl]
  4023ee:	e5e9      	b.n	401fc4 <_svfprintf_r+0xb0>
  4023f0:	9311      	str	r3, [sp, #68]	; 0x44
  4023f2:	2a00      	cmp	r2, #0
  4023f4:	f040 8795 	bne.w	403322 <_svfprintf_r+0x140e>
  4023f8:	4b22      	ldr	r3, [pc, #136]	; (402484 <_svfprintf_r+0x570>)
  4023fa:	9318      	str	r3, [sp, #96]	; 0x60
  4023fc:	f01b 0f20 	tst.w	fp, #32
  402400:	f040 8111 	bne.w	402626 <_svfprintf_r+0x712>
  402404:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402406:	f01b 0f10 	tst.w	fp, #16
  40240a:	4613      	mov	r3, r2
  40240c:	f040 83e1 	bne.w	402bd2 <_svfprintf_r+0xcbe>
  402410:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402414:	f000 83dd 	beq.w	402bd2 <_svfprintf_r+0xcbe>
  402418:	3304      	adds	r3, #4
  40241a:	8814      	ldrh	r4, [r2, #0]
  40241c:	930f      	str	r3, [sp, #60]	; 0x3c
  40241e:	2500      	movs	r5, #0
  402420:	f01b 0f01 	tst.w	fp, #1
  402424:	f000 810c 	beq.w	402640 <_svfprintf_r+0x72c>
  402428:	ea54 0305 	orrs.w	r3, r4, r5
  40242c:	f000 8108 	beq.w	402640 <_svfprintf_r+0x72c>
  402430:	2330      	movs	r3, #48	; 0x30
  402432:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  402436:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  40243a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  40243e:	f04b 0b02 	orr.w	fp, fp, #2
  402442:	2302      	movs	r3, #2
  402444:	e659      	b.n	4020fa <_svfprintf_r+0x1e6>
  402446:	f89a 3000 	ldrb.w	r3, [sl]
  40244a:	2900      	cmp	r1, #0
  40244c:	f47f adba 	bne.w	401fc4 <_svfprintf_r+0xb0>
  402450:	2201      	movs	r2, #1
  402452:	2120      	movs	r1, #32
  402454:	e5b6      	b.n	401fc4 <_svfprintf_r+0xb0>
  402456:	f04b 0b01 	orr.w	fp, fp, #1
  40245a:	f89a 3000 	ldrb.w	r3, [sl]
  40245e:	e5b1      	b.n	401fc4 <_svfprintf_r+0xb0>
  402460:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  402462:	6823      	ldr	r3, [r4, #0]
  402464:	930d      	str	r3, [sp, #52]	; 0x34
  402466:	4618      	mov	r0, r3
  402468:	2800      	cmp	r0, #0
  40246a:	4623      	mov	r3, r4
  40246c:	f103 0304 	add.w	r3, r3, #4
  402470:	f6ff ae0a 	blt.w	402088 <_svfprintf_r+0x174>
  402474:	930f      	str	r3, [sp, #60]	; 0x3c
  402476:	f89a 3000 	ldrb.w	r3, [sl]
  40247a:	e5a3      	b.n	401fc4 <_svfprintf_r+0xb0>
  40247c:	004071d8 	.word	0x004071d8
  402480:	004071e8 	.word	0x004071e8
  402484:	004071b8 	.word	0x004071b8
  402488:	f04b 0b10 	orr.w	fp, fp, #16
  40248c:	f01b 0f20 	tst.w	fp, #32
  402490:	9311      	str	r3, [sp, #68]	; 0x44
  402492:	f43f ae23 	beq.w	4020dc <_svfprintf_r+0x1c8>
  402496:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402498:	3507      	adds	r5, #7
  40249a:	f025 0307 	bic.w	r3, r5, #7
  40249e:	f103 0208 	add.w	r2, r3, #8
  4024a2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4024a6:	920f      	str	r2, [sp, #60]	; 0x3c
  4024a8:	2301      	movs	r3, #1
  4024aa:	e626      	b.n	4020fa <_svfprintf_r+0x1e6>
  4024ac:	f89a 3000 	ldrb.w	r3, [sl]
  4024b0:	2b2a      	cmp	r3, #42	; 0x2a
  4024b2:	f10a 0401 	add.w	r4, sl, #1
  4024b6:	f000 8727 	beq.w	403308 <_svfprintf_r+0x13f4>
  4024ba:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4024be:	2809      	cmp	r0, #9
  4024c0:	46a2      	mov	sl, r4
  4024c2:	f200 86ad 	bhi.w	403220 <_svfprintf_r+0x130c>
  4024c6:	2300      	movs	r3, #0
  4024c8:	461c      	mov	r4, r3
  4024ca:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4024ce:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4024d2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4024d6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4024da:	2809      	cmp	r0, #9
  4024dc:	d9f5      	bls.n	4024ca <_svfprintf_r+0x5b6>
  4024de:	940a      	str	r4, [sp, #40]	; 0x28
  4024e0:	e572      	b.n	401fc8 <_svfprintf_r+0xb4>
  4024e2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4024e6:	f89a 3000 	ldrb.w	r3, [sl]
  4024ea:	e56b      	b.n	401fc4 <_svfprintf_r+0xb0>
  4024ec:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4024f0:	f89a 3000 	ldrb.w	r3, [sl]
  4024f4:	e566      	b.n	401fc4 <_svfprintf_r+0xb0>
  4024f6:	f89a 3000 	ldrb.w	r3, [sl]
  4024fa:	2b6c      	cmp	r3, #108	; 0x6c
  4024fc:	bf03      	ittte	eq
  4024fe:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  402502:	f04b 0b20 	orreq.w	fp, fp, #32
  402506:	f10a 0a01 	addeq.w	sl, sl, #1
  40250a:	f04b 0b10 	orrne.w	fp, fp, #16
  40250e:	e559      	b.n	401fc4 <_svfprintf_r+0xb0>
  402510:	2a00      	cmp	r2, #0
  402512:	f040 8711 	bne.w	403338 <_svfprintf_r+0x1424>
  402516:	f01b 0f20 	tst.w	fp, #32
  40251a:	f040 84f9 	bne.w	402f10 <_svfprintf_r+0xffc>
  40251e:	f01b 0f10 	tst.w	fp, #16
  402522:	f040 84ac 	bne.w	402e7e <_svfprintf_r+0xf6a>
  402526:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40252a:	f000 84a8 	beq.w	402e7e <_svfprintf_r+0xf6a>
  40252e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402530:	6813      	ldr	r3, [r2, #0]
  402532:	3204      	adds	r2, #4
  402534:	920f      	str	r2, [sp, #60]	; 0x3c
  402536:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40253a:	801a      	strh	r2, [r3, #0]
  40253c:	e511      	b.n	401f62 <_svfprintf_r+0x4e>
  40253e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402540:	4bb3      	ldr	r3, [pc, #716]	; (402810 <_svfprintf_r+0x8fc>)
  402542:	680c      	ldr	r4, [r1, #0]
  402544:	9318      	str	r3, [sp, #96]	; 0x60
  402546:	2230      	movs	r2, #48	; 0x30
  402548:	2378      	movs	r3, #120	; 0x78
  40254a:	3104      	adds	r1, #4
  40254c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  402550:	9311      	str	r3, [sp, #68]	; 0x44
  402552:	f04b 0b02 	orr.w	fp, fp, #2
  402556:	910f      	str	r1, [sp, #60]	; 0x3c
  402558:	2500      	movs	r5, #0
  40255a:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  40255e:	2302      	movs	r3, #2
  402560:	e5cb      	b.n	4020fa <_svfprintf_r+0x1e6>
  402562:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402564:	9311      	str	r3, [sp, #68]	; 0x44
  402566:	680a      	ldr	r2, [r1, #0]
  402568:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40256c:	2300      	movs	r3, #0
  40256e:	460a      	mov	r2, r1
  402570:	461f      	mov	r7, r3
  402572:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402576:	3204      	adds	r2, #4
  402578:	2301      	movs	r3, #1
  40257a:	9308      	str	r3, [sp, #32]
  40257c:	f8cd b01c 	str.w	fp, [sp, #28]
  402580:	970a      	str	r7, [sp, #40]	; 0x28
  402582:	9712      	str	r7, [sp, #72]	; 0x48
  402584:	920f      	str	r2, [sp, #60]	; 0x3c
  402586:	930e      	str	r3, [sp, #56]	; 0x38
  402588:	ae28      	add	r6, sp, #160	; 0xa0
  40258a:	e5df      	b.n	40214c <_svfprintf_r+0x238>
  40258c:	9311      	str	r3, [sp, #68]	; 0x44
  40258e:	2a00      	cmp	r2, #0
  402590:	f040 86ea 	bne.w	403368 <_svfprintf_r+0x1454>
  402594:	f01b 0f20 	tst.w	fp, #32
  402598:	d15d      	bne.n	402656 <_svfprintf_r+0x742>
  40259a:	f01b 0f10 	tst.w	fp, #16
  40259e:	f040 8308 	bne.w	402bb2 <_svfprintf_r+0xc9e>
  4025a2:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4025a6:	f000 8304 	beq.w	402bb2 <_svfprintf_r+0xc9e>
  4025aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4025ac:	f9b1 4000 	ldrsh.w	r4, [r1]
  4025b0:	3104      	adds	r1, #4
  4025b2:	17e5      	asrs	r5, r4, #31
  4025b4:	4622      	mov	r2, r4
  4025b6:	462b      	mov	r3, r5
  4025b8:	910f      	str	r1, [sp, #60]	; 0x3c
  4025ba:	2a00      	cmp	r2, #0
  4025bc:	f173 0300 	sbcs.w	r3, r3, #0
  4025c0:	db58      	blt.n	402674 <_svfprintf_r+0x760>
  4025c2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4025c4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4025c8:	1c4a      	adds	r2, r1, #1
  4025ca:	f04f 0301 	mov.w	r3, #1
  4025ce:	f47f ad9b 	bne.w	402108 <_svfprintf_r+0x1f4>
  4025d2:	ea54 0205 	orrs.w	r2, r4, r5
  4025d6:	f000 81df 	beq.w	402998 <_svfprintf_r+0xa84>
  4025da:	f8cd b01c 	str.w	fp, [sp, #28]
  4025de:	2b01      	cmp	r3, #1
  4025e0:	f000 827b 	beq.w	402ada <_svfprintf_r+0xbc6>
  4025e4:	2b02      	cmp	r3, #2
  4025e6:	f040 8206 	bne.w	4029f6 <_svfprintf_r+0xae2>
  4025ea:	9818      	ldr	r0, [sp, #96]	; 0x60
  4025ec:	464e      	mov	r6, r9
  4025ee:	0923      	lsrs	r3, r4, #4
  4025f0:	f004 010f 	and.w	r1, r4, #15
  4025f4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4025f8:	092a      	lsrs	r2, r5, #4
  4025fa:	461c      	mov	r4, r3
  4025fc:	4615      	mov	r5, r2
  4025fe:	5c43      	ldrb	r3, [r0, r1]
  402600:	f806 3d01 	strb.w	r3, [r6, #-1]!
  402604:	ea54 0305 	orrs.w	r3, r4, r5
  402608:	d1f1      	bne.n	4025ee <_svfprintf_r+0x6da>
  40260a:	eba9 0306 	sub.w	r3, r9, r6
  40260e:	930e      	str	r3, [sp, #56]	; 0x38
  402610:	e590      	b.n	402134 <_svfprintf_r+0x220>
  402612:	9311      	str	r3, [sp, #68]	; 0x44
  402614:	2a00      	cmp	r2, #0
  402616:	f040 86a3 	bne.w	403360 <_svfprintf_r+0x144c>
  40261a:	4b7e      	ldr	r3, [pc, #504]	; (402814 <_svfprintf_r+0x900>)
  40261c:	9318      	str	r3, [sp, #96]	; 0x60
  40261e:	f01b 0f20 	tst.w	fp, #32
  402622:	f43f aeef 	beq.w	402404 <_svfprintf_r+0x4f0>
  402626:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402628:	3507      	adds	r5, #7
  40262a:	f025 0307 	bic.w	r3, r5, #7
  40262e:	f103 0208 	add.w	r2, r3, #8
  402632:	f01b 0f01 	tst.w	fp, #1
  402636:	920f      	str	r2, [sp, #60]	; 0x3c
  402638:	e9d3 4500 	ldrd	r4, r5, [r3]
  40263c:	f47f aef4 	bne.w	402428 <_svfprintf_r+0x514>
  402640:	2302      	movs	r3, #2
  402642:	e55a      	b.n	4020fa <_svfprintf_r+0x1e6>
  402644:	9311      	str	r3, [sp, #68]	; 0x44
  402646:	2a00      	cmp	r2, #0
  402648:	f040 8686 	bne.w	403358 <_svfprintf_r+0x1444>
  40264c:	f04b 0b10 	orr.w	fp, fp, #16
  402650:	f01b 0f20 	tst.w	fp, #32
  402654:	d0a1      	beq.n	40259a <_svfprintf_r+0x686>
  402656:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402658:	3507      	adds	r5, #7
  40265a:	f025 0507 	bic.w	r5, r5, #7
  40265e:	e9d5 2300 	ldrd	r2, r3, [r5]
  402662:	2a00      	cmp	r2, #0
  402664:	f105 0108 	add.w	r1, r5, #8
  402668:	461d      	mov	r5, r3
  40266a:	f173 0300 	sbcs.w	r3, r3, #0
  40266e:	910f      	str	r1, [sp, #60]	; 0x3c
  402670:	4614      	mov	r4, r2
  402672:	daa6      	bge.n	4025c2 <_svfprintf_r+0x6ae>
  402674:	272d      	movs	r7, #45	; 0x2d
  402676:	4264      	negs	r4, r4
  402678:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40267c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  402680:	2301      	movs	r3, #1
  402682:	e53d      	b.n	402100 <_svfprintf_r+0x1ec>
  402684:	9311      	str	r3, [sp, #68]	; 0x44
  402686:	2a00      	cmp	r2, #0
  402688:	f040 8662 	bne.w	403350 <_svfprintf_r+0x143c>
  40268c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40268e:	3507      	adds	r5, #7
  402690:	f025 0307 	bic.w	r3, r5, #7
  402694:	f103 0208 	add.w	r2, r3, #8
  402698:	920f      	str	r2, [sp, #60]	; 0x3c
  40269a:	681a      	ldr	r2, [r3, #0]
  40269c:	9215      	str	r2, [sp, #84]	; 0x54
  40269e:	685b      	ldr	r3, [r3, #4]
  4026a0:	9314      	str	r3, [sp, #80]	; 0x50
  4026a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4026a4:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4026a6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4026aa:	4628      	mov	r0, r5
  4026ac:	4621      	mov	r1, r4
  4026ae:	f04f 32ff 	mov.w	r2, #4294967295
  4026b2:	4b59      	ldr	r3, [pc, #356]	; (402818 <_svfprintf_r+0x904>)
  4026b4:	f003 fe58 	bl	406368 <__aeabi_dcmpun>
  4026b8:	2800      	cmp	r0, #0
  4026ba:	f040 834a 	bne.w	402d52 <_svfprintf_r+0xe3e>
  4026be:	4628      	mov	r0, r5
  4026c0:	4621      	mov	r1, r4
  4026c2:	f04f 32ff 	mov.w	r2, #4294967295
  4026c6:	4b54      	ldr	r3, [pc, #336]	; (402818 <_svfprintf_r+0x904>)
  4026c8:	f003 fe30 	bl	40632c <__aeabi_dcmple>
  4026cc:	2800      	cmp	r0, #0
  4026ce:	f040 8340 	bne.w	402d52 <_svfprintf_r+0xe3e>
  4026d2:	a815      	add	r0, sp, #84	; 0x54
  4026d4:	c80d      	ldmia	r0, {r0, r2, r3}
  4026d6:	9914      	ldr	r1, [sp, #80]	; 0x50
  4026d8:	f003 fe1e 	bl	406318 <__aeabi_dcmplt>
  4026dc:	2800      	cmp	r0, #0
  4026de:	f040 8530 	bne.w	403142 <_svfprintf_r+0x122e>
  4026e2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4026e6:	4e4d      	ldr	r6, [pc, #308]	; (40281c <_svfprintf_r+0x908>)
  4026e8:	4b4d      	ldr	r3, [pc, #308]	; (402820 <_svfprintf_r+0x90c>)
  4026ea:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4026ee:	9007      	str	r0, [sp, #28]
  4026f0:	9811      	ldr	r0, [sp, #68]	; 0x44
  4026f2:	2203      	movs	r2, #3
  4026f4:	2100      	movs	r1, #0
  4026f6:	9208      	str	r2, [sp, #32]
  4026f8:	910a      	str	r1, [sp, #40]	; 0x28
  4026fa:	2847      	cmp	r0, #71	; 0x47
  4026fc:	bfd8      	it	le
  4026fe:	461e      	movle	r6, r3
  402700:	920e      	str	r2, [sp, #56]	; 0x38
  402702:	9112      	str	r1, [sp, #72]	; 0x48
  402704:	e51e      	b.n	402144 <_svfprintf_r+0x230>
  402706:	f04b 0b08 	orr.w	fp, fp, #8
  40270a:	f89a 3000 	ldrb.w	r3, [sl]
  40270e:	e459      	b.n	401fc4 <_svfprintf_r+0xb0>
  402710:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402714:	2300      	movs	r3, #0
  402716:	461c      	mov	r4, r3
  402718:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40271c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402720:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  402724:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402728:	2809      	cmp	r0, #9
  40272a:	d9f5      	bls.n	402718 <_svfprintf_r+0x804>
  40272c:	940d      	str	r4, [sp, #52]	; 0x34
  40272e:	e44b      	b.n	401fc8 <_svfprintf_r+0xb4>
  402730:	f04b 0b10 	orr.w	fp, fp, #16
  402734:	9311      	str	r3, [sp, #68]	; 0x44
  402736:	f01b 0320 	ands.w	r3, fp, #32
  40273a:	f43f ae1d 	beq.w	402378 <_svfprintf_r+0x464>
  40273e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402740:	3507      	adds	r5, #7
  402742:	f025 0307 	bic.w	r3, r5, #7
  402746:	f103 0208 	add.w	r2, r3, #8
  40274a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40274e:	920f      	str	r2, [sp, #60]	; 0x3c
  402750:	2300      	movs	r3, #0
  402752:	e4d2      	b.n	4020fa <_svfprintf_r+0x1e6>
  402754:	9311      	str	r3, [sp, #68]	; 0x44
  402756:	2a00      	cmp	r2, #0
  402758:	f040 85e7 	bne.w	40332a <_svfprintf_r+0x1416>
  40275c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40275e:	2a00      	cmp	r2, #0
  402760:	f43f aca3 	beq.w	4020aa <_svfprintf_r+0x196>
  402764:	2300      	movs	r3, #0
  402766:	2101      	movs	r1, #1
  402768:	461f      	mov	r7, r3
  40276a:	9108      	str	r1, [sp, #32]
  40276c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  402770:	f8cd b01c 	str.w	fp, [sp, #28]
  402774:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402778:	930a      	str	r3, [sp, #40]	; 0x28
  40277a:	9312      	str	r3, [sp, #72]	; 0x48
  40277c:	910e      	str	r1, [sp, #56]	; 0x38
  40277e:	ae28      	add	r6, sp, #160	; 0xa0
  402780:	e4e4      	b.n	40214c <_svfprintf_r+0x238>
  402782:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402784:	e534      	b.n	4021f0 <_svfprintf_r+0x2dc>
  402786:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402788:	2b65      	cmp	r3, #101	; 0x65
  40278a:	f340 80a7 	ble.w	4028dc <_svfprintf_r+0x9c8>
  40278e:	a815      	add	r0, sp, #84	; 0x54
  402790:	c80d      	ldmia	r0, {r0, r2, r3}
  402792:	9914      	ldr	r1, [sp, #80]	; 0x50
  402794:	f003 fdb6 	bl	406304 <__aeabi_dcmpeq>
  402798:	2800      	cmp	r0, #0
  40279a:	f000 8150 	beq.w	402a3e <_svfprintf_r+0xb2a>
  40279e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4027a0:	4a20      	ldr	r2, [pc, #128]	; (402824 <_svfprintf_r+0x910>)
  4027a2:	f8c8 2000 	str.w	r2, [r8]
  4027a6:	3301      	adds	r3, #1
  4027a8:	3401      	adds	r4, #1
  4027aa:	2201      	movs	r2, #1
  4027ac:	2b07      	cmp	r3, #7
  4027ae:	9427      	str	r4, [sp, #156]	; 0x9c
  4027b0:	9326      	str	r3, [sp, #152]	; 0x98
  4027b2:	f8c8 2004 	str.w	r2, [r8, #4]
  4027b6:	f300 836a 	bgt.w	402e8e <_svfprintf_r+0xf7a>
  4027ba:	f108 0808 	add.w	r8, r8, #8
  4027be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4027c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4027c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4027c4:	4293      	cmp	r3, r2
  4027c6:	db03      	blt.n	4027d0 <_svfprintf_r+0x8bc>
  4027c8:	9b07      	ldr	r3, [sp, #28]
  4027ca:	07dd      	lsls	r5, r3, #31
  4027cc:	f57f ad82 	bpl.w	4022d4 <_svfprintf_r+0x3c0>
  4027d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4027d2:	9919      	ldr	r1, [sp, #100]	; 0x64
  4027d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4027d6:	f8c8 2000 	str.w	r2, [r8]
  4027da:	3301      	adds	r3, #1
  4027dc:	440c      	add	r4, r1
  4027de:	2b07      	cmp	r3, #7
  4027e0:	f8c8 1004 	str.w	r1, [r8, #4]
  4027e4:	9427      	str	r4, [sp, #156]	; 0x9c
  4027e6:	9326      	str	r3, [sp, #152]	; 0x98
  4027e8:	f300 839e 	bgt.w	402f28 <_svfprintf_r+0x1014>
  4027ec:	f108 0808 	add.w	r8, r8, #8
  4027f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4027f2:	1e5e      	subs	r6, r3, #1
  4027f4:	2e00      	cmp	r6, #0
  4027f6:	f77f ad6d 	ble.w	4022d4 <_svfprintf_r+0x3c0>
  4027fa:	2e10      	cmp	r6, #16
  4027fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4027fe:	4d0a      	ldr	r5, [pc, #40]	; (402828 <_svfprintf_r+0x914>)
  402800:	f340 81f5 	ble.w	402bee <_svfprintf_r+0xcda>
  402804:	4622      	mov	r2, r4
  402806:	2710      	movs	r7, #16
  402808:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40280c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40280e:	e013      	b.n	402838 <_svfprintf_r+0x924>
  402810:	004071b8 	.word	0x004071b8
  402814:	004071a4 	.word	0x004071a4
  402818:	7fefffff 	.word	0x7fefffff
  40281c:	00407198 	.word	0x00407198
  402820:	00407194 	.word	0x00407194
  402824:	004071d4 	.word	0x004071d4
  402828:	004071e8 	.word	0x004071e8
  40282c:	f108 0808 	add.w	r8, r8, #8
  402830:	3e10      	subs	r6, #16
  402832:	2e10      	cmp	r6, #16
  402834:	f340 81da 	ble.w	402bec <_svfprintf_r+0xcd8>
  402838:	3301      	adds	r3, #1
  40283a:	3210      	adds	r2, #16
  40283c:	2b07      	cmp	r3, #7
  40283e:	9227      	str	r2, [sp, #156]	; 0x9c
  402840:	9326      	str	r3, [sp, #152]	; 0x98
  402842:	e888 00a0 	stmia.w	r8, {r5, r7}
  402846:	ddf1      	ble.n	40282c <_svfprintf_r+0x918>
  402848:	aa25      	add	r2, sp, #148	; 0x94
  40284a:	4621      	mov	r1, r4
  40284c:	4658      	mov	r0, fp
  40284e:	f002 fcc5 	bl	4051dc <__ssprint_r>
  402852:	2800      	cmp	r0, #0
  402854:	f47f ac30 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  402858:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40285a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40285c:	46c8      	mov	r8, r9
  40285e:	e7e7      	b.n	402830 <_svfprintf_r+0x91c>
  402860:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402862:	9a08      	ldr	r2, [sp, #32]
  402864:	1a9f      	subs	r7, r3, r2
  402866:	2f00      	cmp	r7, #0
  402868:	f77f ace5 	ble.w	402236 <_svfprintf_r+0x322>
  40286c:	2f10      	cmp	r7, #16
  40286e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402870:	4db6      	ldr	r5, [pc, #728]	; (402b4c <_svfprintf_r+0xc38>)
  402872:	dd27      	ble.n	4028c4 <_svfprintf_r+0x9b0>
  402874:	4642      	mov	r2, r8
  402876:	4621      	mov	r1, r4
  402878:	46b0      	mov	r8, r6
  40287a:	f04f 0b10 	mov.w	fp, #16
  40287e:	462e      	mov	r6, r5
  402880:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402882:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402884:	e004      	b.n	402890 <_svfprintf_r+0x97c>
  402886:	3f10      	subs	r7, #16
  402888:	2f10      	cmp	r7, #16
  40288a:	f102 0208 	add.w	r2, r2, #8
  40288e:	dd15      	ble.n	4028bc <_svfprintf_r+0x9a8>
  402890:	3301      	adds	r3, #1
  402892:	3110      	adds	r1, #16
  402894:	2b07      	cmp	r3, #7
  402896:	9127      	str	r1, [sp, #156]	; 0x9c
  402898:	9326      	str	r3, [sp, #152]	; 0x98
  40289a:	e882 0840 	stmia.w	r2, {r6, fp}
  40289e:	ddf2      	ble.n	402886 <_svfprintf_r+0x972>
  4028a0:	aa25      	add	r2, sp, #148	; 0x94
  4028a2:	4629      	mov	r1, r5
  4028a4:	4620      	mov	r0, r4
  4028a6:	f002 fc99 	bl	4051dc <__ssprint_r>
  4028aa:	2800      	cmp	r0, #0
  4028ac:	f47f ac04 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  4028b0:	3f10      	subs	r7, #16
  4028b2:	2f10      	cmp	r7, #16
  4028b4:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4028b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4028b8:	464a      	mov	r2, r9
  4028ba:	dce9      	bgt.n	402890 <_svfprintf_r+0x97c>
  4028bc:	4635      	mov	r5, r6
  4028be:	460c      	mov	r4, r1
  4028c0:	4646      	mov	r6, r8
  4028c2:	4690      	mov	r8, r2
  4028c4:	3301      	adds	r3, #1
  4028c6:	443c      	add	r4, r7
  4028c8:	2b07      	cmp	r3, #7
  4028ca:	9427      	str	r4, [sp, #156]	; 0x9c
  4028cc:	9326      	str	r3, [sp, #152]	; 0x98
  4028ce:	e888 00a0 	stmia.w	r8, {r5, r7}
  4028d2:	f300 8232 	bgt.w	402d3a <_svfprintf_r+0xe26>
  4028d6:	f108 0808 	add.w	r8, r8, #8
  4028da:	e4ac      	b.n	402236 <_svfprintf_r+0x322>
  4028dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4028de:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4028e0:	2b01      	cmp	r3, #1
  4028e2:	f340 81fe 	ble.w	402ce2 <_svfprintf_r+0xdce>
  4028e6:	3701      	adds	r7, #1
  4028e8:	3401      	adds	r4, #1
  4028ea:	2301      	movs	r3, #1
  4028ec:	2f07      	cmp	r7, #7
  4028ee:	9427      	str	r4, [sp, #156]	; 0x9c
  4028f0:	9726      	str	r7, [sp, #152]	; 0x98
  4028f2:	f8c8 6000 	str.w	r6, [r8]
  4028f6:	f8c8 3004 	str.w	r3, [r8, #4]
  4028fa:	f300 8203 	bgt.w	402d04 <_svfprintf_r+0xdf0>
  4028fe:	f108 0808 	add.w	r8, r8, #8
  402902:	9a19      	ldr	r2, [sp, #100]	; 0x64
  402904:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402906:	f8c8 3000 	str.w	r3, [r8]
  40290a:	3701      	adds	r7, #1
  40290c:	4414      	add	r4, r2
  40290e:	2f07      	cmp	r7, #7
  402910:	9427      	str	r4, [sp, #156]	; 0x9c
  402912:	9726      	str	r7, [sp, #152]	; 0x98
  402914:	f8c8 2004 	str.w	r2, [r8, #4]
  402918:	f300 8200 	bgt.w	402d1c <_svfprintf_r+0xe08>
  40291c:	f108 0808 	add.w	r8, r8, #8
  402920:	a815      	add	r0, sp, #84	; 0x54
  402922:	c80d      	ldmia	r0, {r0, r2, r3}
  402924:	9914      	ldr	r1, [sp, #80]	; 0x50
  402926:	f003 fced 	bl	406304 <__aeabi_dcmpeq>
  40292a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40292c:	2800      	cmp	r0, #0
  40292e:	f040 8101 	bne.w	402b34 <_svfprintf_r+0xc20>
  402932:	3b01      	subs	r3, #1
  402934:	3701      	adds	r7, #1
  402936:	3601      	adds	r6, #1
  402938:	441c      	add	r4, r3
  40293a:	2f07      	cmp	r7, #7
  40293c:	9726      	str	r7, [sp, #152]	; 0x98
  40293e:	9427      	str	r4, [sp, #156]	; 0x9c
  402940:	f8c8 6000 	str.w	r6, [r8]
  402944:	f8c8 3004 	str.w	r3, [r8, #4]
  402948:	f300 8127 	bgt.w	402b9a <_svfprintf_r+0xc86>
  40294c:	f108 0808 	add.w	r8, r8, #8
  402950:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  402952:	f8c8 2004 	str.w	r2, [r8, #4]
  402956:	3701      	adds	r7, #1
  402958:	4414      	add	r4, r2
  40295a:	ab21      	add	r3, sp, #132	; 0x84
  40295c:	2f07      	cmp	r7, #7
  40295e:	9427      	str	r4, [sp, #156]	; 0x9c
  402960:	9726      	str	r7, [sp, #152]	; 0x98
  402962:	f8c8 3000 	str.w	r3, [r8]
  402966:	f77f acb3 	ble.w	4022d0 <_svfprintf_r+0x3bc>
  40296a:	aa25      	add	r2, sp, #148	; 0x94
  40296c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40296e:	980c      	ldr	r0, [sp, #48]	; 0x30
  402970:	f002 fc34 	bl	4051dc <__ssprint_r>
  402974:	2800      	cmp	r0, #0
  402976:	f47f ab9f 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  40297a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40297c:	46c8      	mov	r8, r9
  40297e:	e4a9      	b.n	4022d4 <_svfprintf_r+0x3c0>
  402980:	aa25      	add	r2, sp, #148	; 0x94
  402982:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402984:	980c      	ldr	r0, [sp, #48]	; 0x30
  402986:	f002 fc29 	bl	4051dc <__ssprint_r>
  40298a:	2800      	cmp	r0, #0
  40298c:	f43f aceb 	beq.w	402366 <_svfprintf_r+0x452>
  402990:	f7ff bb92 	b.w	4020b8 <_svfprintf_r+0x1a4>
  402994:	f8dd b01c 	ldr.w	fp, [sp, #28]
  402998:	2b01      	cmp	r3, #1
  40299a:	f000 8134 	beq.w	402c06 <_svfprintf_r+0xcf2>
  40299e:	2b02      	cmp	r3, #2
  4029a0:	d125      	bne.n	4029ee <_svfprintf_r+0xada>
  4029a2:	f8cd b01c 	str.w	fp, [sp, #28]
  4029a6:	2400      	movs	r4, #0
  4029a8:	2500      	movs	r5, #0
  4029aa:	e61e      	b.n	4025ea <_svfprintf_r+0x6d6>
  4029ac:	aa25      	add	r2, sp, #148	; 0x94
  4029ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4029b0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4029b2:	f002 fc13 	bl	4051dc <__ssprint_r>
  4029b6:	2800      	cmp	r0, #0
  4029b8:	f47f ab7e 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  4029bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4029be:	46c8      	mov	r8, r9
  4029c0:	e475      	b.n	4022ae <_svfprintf_r+0x39a>
  4029c2:	aa25      	add	r2, sp, #148	; 0x94
  4029c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4029c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4029c8:	f002 fc08 	bl	4051dc <__ssprint_r>
  4029cc:	2800      	cmp	r0, #0
  4029ce:	f47f ab73 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  4029d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4029d4:	46c8      	mov	r8, r9
  4029d6:	e41b      	b.n	402210 <_svfprintf_r+0x2fc>
  4029d8:	aa25      	add	r2, sp, #148	; 0x94
  4029da:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4029dc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4029de:	f002 fbfd 	bl	4051dc <__ssprint_r>
  4029e2:	2800      	cmp	r0, #0
  4029e4:	f47f ab68 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  4029e8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4029ea:	46c8      	mov	r8, r9
  4029ec:	e420      	b.n	402230 <_svfprintf_r+0x31c>
  4029ee:	f8cd b01c 	str.w	fp, [sp, #28]
  4029f2:	2400      	movs	r4, #0
  4029f4:	2500      	movs	r5, #0
  4029f6:	4649      	mov	r1, r9
  4029f8:	e000      	b.n	4029fc <_svfprintf_r+0xae8>
  4029fa:	4631      	mov	r1, r6
  4029fc:	08e2      	lsrs	r2, r4, #3
  4029fe:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  402a02:	08e8      	lsrs	r0, r5, #3
  402a04:	f004 0307 	and.w	r3, r4, #7
  402a08:	4605      	mov	r5, r0
  402a0a:	4614      	mov	r4, r2
  402a0c:	3330      	adds	r3, #48	; 0x30
  402a0e:	ea54 0205 	orrs.w	r2, r4, r5
  402a12:	f801 3c01 	strb.w	r3, [r1, #-1]
  402a16:	f101 36ff 	add.w	r6, r1, #4294967295
  402a1a:	d1ee      	bne.n	4029fa <_svfprintf_r+0xae6>
  402a1c:	9a07      	ldr	r2, [sp, #28]
  402a1e:	07d2      	lsls	r2, r2, #31
  402a20:	f57f adf3 	bpl.w	40260a <_svfprintf_r+0x6f6>
  402a24:	2b30      	cmp	r3, #48	; 0x30
  402a26:	f43f adf0 	beq.w	40260a <_svfprintf_r+0x6f6>
  402a2a:	3902      	subs	r1, #2
  402a2c:	2330      	movs	r3, #48	; 0x30
  402a2e:	f806 3c01 	strb.w	r3, [r6, #-1]
  402a32:	eba9 0301 	sub.w	r3, r9, r1
  402a36:	930e      	str	r3, [sp, #56]	; 0x38
  402a38:	460e      	mov	r6, r1
  402a3a:	f7ff bb7b 	b.w	402134 <_svfprintf_r+0x220>
  402a3e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  402a40:	2900      	cmp	r1, #0
  402a42:	f340 822e 	ble.w	402ea2 <_svfprintf_r+0xf8e>
  402a46:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402a48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402a4a:	4293      	cmp	r3, r2
  402a4c:	bfa8      	it	ge
  402a4e:	4613      	movge	r3, r2
  402a50:	2b00      	cmp	r3, #0
  402a52:	461f      	mov	r7, r3
  402a54:	dd0d      	ble.n	402a72 <_svfprintf_r+0xb5e>
  402a56:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402a58:	f8c8 6000 	str.w	r6, [r8]
  402a5c:	3301      	adds	r3, #1
  402a5e:	443c      	add	r4, r7
  402a60:	2b07      	cmp	r3, #7
  402a62:	9427      	str	r4, [sp, #156]	; 0x9c
  402a64:	f8c8 7004 	str.w	r7, [r8, #4]
  402a68:	9326      	str	r3, [sp, #152]	; 0x98
  402a6a:	f300 831f 	bgt.w	4030ac <_svfprintf_r+0x1198>
  402a6e:	f108 0808 	add.w	r8, r8, #8
  402a72:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402a74:	2f00      	cmp	r7, #0
  402a76:	bfa8      	it	ge
  402a78:	1bdb      	subge	r3, r3, r7
  402a7a:	2b00      	cmp	r3, #0
  402a7c:	461f      	mov	r7, r3
  402a7e:	f340 80d6 	ble.w	402c2e <_svfprintf_r+0xd1a>
  402a82:	2f10      	cmp	r7, #16
  402a84:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402a86:	4d31      	ldr	r5, [pc, #196]	; (402b4c <_svfprintf_r+0xc38>)
  402a88:	f340 81ed 	ble.w	402e66 <_svfprintf_r+0xf52>
  402a8c:	4642      	mov	r2, r8
  402a8e:	4621      	mov	r1, r4
  402a90:	46b0      	mov	r8, r6
  402a92:	f04f 0b10 	mov.w	fp, #16
  402a96:	462e      	mov	r6, r5
  402a98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402a9a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402a9c:	e004      	b.n	402aa8 <_svfprintf_r+0xb94>
  402a9e:	3208      	adds	r2, #8
  402aa0:	3f10      	subs	r7, #16
  402aa2:	2f10      	cmp	r7, #16
  402aa4:	f340 81db 	ble.w	402e5e <_svfprintf_r+0xf4a>
  402aa8:	3301      	adds	r3, #1
  402aaa:	3110      	adds	r1, #16
  402aac:	2b07      	cmp	r3, #7
  402aae:	9127      	str	r1, [sp, #156]	; 0x9c
  402ab0:	9326      	str	r3, [sp, #152]	; 0x98
  402ab2:	e882 0840 	stmia.w	r2, {r6, fp}
  402ab6:	ddf2      	ble.n	402a9e <_svfprintf_r+0xb8a>
  402ab8:	aa25      	add	r2, sp, #148	; 0x94
  402aba:	4629      	mov	r1, r5
  402abc:	4620      	mov	r0, r4
  402abe:	f002 fb8d 	bl	4051dc <__ssprint_r>
  402ac2:	2800      	cmp	r0, #0
  402ac4:	f47f aaf8 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  402ac8:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402aca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402acc:	464a      	mov	r2, r9
  402ace:	e7e7      	b.n	402aa0 <_svfprintf_r+0xb8c>
  402ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402ad2:	930e      	str	r3, [sp, #56]	; 0x38
  402ad4:	464e      	mov	r6, r9
  402ad6:	f7ff bb2d 	b.w	402134 <_svfprintf_r+0x220>
  402ada:	2d00      	cmp	r5, #0
  402adc:	bf08      	it	eq
  402ade:	2c0a      	cmpeq	r4, #10
  402ae0:	f0c0 808f 	bcc.w	402c02 <_svfprintf_r+0xcee>
  402ae4:	464e      	mov	r6, r9
  402ae6:	4620      	mov	r0, r4
  402ae8:	4629      	mov	r1, r5
  402aea:	220a      	movs	r2, #10
  402aec:	2300      	movs	r3, #0
  402aee:	f003 fc79 	bl	4063e4 <__aeabi_uldivmod>
  402af2:	3230      	adds	r2, #48	; 0x30
  402af4:	f806 2d01 	strb.w	r2, [r6, #-1]!
  402af8:	4620      	mov	r0, r4
  402afa:	4629      	mov	r1, r5
  402afc:	2300      	movs	r3, #0
  402afe:	220a      	movs	r2, #10
  402b00:	f003 fc70 	bl	4063e4 <__aeabi_uldivmod>
  402b04:	4604      	mov	r4, r0
  402b06:	460d      	mov	r5, r1
  402b08:	ea54 0305 	orrs.w	r3, r4, r5
  402b0c:	d1eb      	bne.n	402ae6 <_svfprintf_r+0xbd2>
  402b0e:	eba9 0306 	sub.w	r3, r9, r6
  402b12:	930e      	str	r3, [sp, #56]	; 0x38
  402b14:	f7ff bb0e 	b.w	402134 <_svfprintf_r+0x220>
  402b18:	aa25      	add	r2, sp, #148	; 0x94
  402b1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402b1c:	980c      	ldr	r0, [sp, #48]	; 0x30
  402b1e:	f002 fb5d 	bl	4051dc <__ssprint_r>
  402b22:	2800      	cmp	r0, #0
  402b24:	f47f aac8 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  402b28:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402b2c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402b2e:	46c8      	mov	r8, r9
  402b30:	f7ff bb5e 	b.w	4021f0 <_svfprintf_r+0x2dc>
  402b34:	1e5e      	subs	r6, r3, #1
  402b36:	2e00      	cmp	r6, #0
  402b38:	f77f af0a 	ble.w	402950 <_svfprintf_r+0xa3c>
  402b3c:	2e10      	cmp	r6, #16
  402b3e:	4d03      	ldr	r5, [pc, #12]	; (402b4c <_svfprintf_r+0xc38>)
  402b40:	dd22      	ble.n	402b88 <_svfprintf_r+0xc74>
  402b42:	4622      	mov	r2, r4
  402b44:	f04f 0b10 	mov.w	fp, #16
  402b48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402b4a:	e006      	b.n	402b5a <_svfprintf_r+0xc46>
  402b4c:	004071e8 	.word	0x004071e8
  402b50:	3e10      	subs	r6, #16
  402b52:	2e10      	cmp	r6, #16
  402b54:	f108 0808 	add.w	r8, r8, #8
  402b58:	dd15      	ble.n	402b86 <_svfprintf_r+0xc72>
  402b5a:	3701      	adds	r7, #1
  402b5c:	3210      	adds	r2, #16
  402b5e:	2f07      	cmp	r7, #7
  402b60:	9227      	str	r2, [sp, #156]	; 0x9c
  402b62:	9726      	str	r7, [sp, #152]	; 0x98
  402b64:	e888 0820 	stmia.w	r8, {r5, fp}
  402b68:	ddf2      	ble.n	402b50 <_svfprintf_r+0xc3c>
  402b6a:	aa25      	add	r2, sp, #148	; 0x94
  402b6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402b6e:	4620      	mov	r0, r4
  402b70:	f002 fb34 	bl	4051dc <__ssprint_r>
  402b74:	2800      	cmp	r0, #0
  402b76:	f47f aa9f 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  402b7a:	3e10      	subs	r6, #16
  402b7c:	2e10      	cmp	r6, #16
  402b7e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402b80:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402b82:	46c8      	mov	r8, r9
  402b84:	dce9      	bgt.n	402b5a <_svfprintf_r+0xc46>
  402b86:	4614      	mov	r4, r2
  402b88:	3701      	adds	r7, #1
  402b8a:	4434      	add	r4, r6
  402b8c:	2f07      	cmp	r7, #7
  402b8e:	9427      	str	r4, [sp, #156]	; 0x9c
  402b90:	9726      	str	r7, [sp, #152]	; 0x98
  402b92:	e888 0060 	stmia.w	r8, {r5, r6}
  402b96:	f77f aed9 	ble.w	40294c <_svfprintf_r+0xa38>
  402b9a:	aa25      	add	r2, sp, #148	; 0x94
  402b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402b9e:	980c      	ldr	r0, [sp, #48]	; 0x30
  402ba0:	f002 fb1c 	bl	4051dc <__ssprint_r>
  402ba4:	2800      	cmp	r0, #0
  402ba6:	f47f aa87 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  402baa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402bac:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402bae:	46c8      	mov	r8, r9
  402bb0:	e6ce      	b.n	402950 <_svfprintf_r+0xa3c>
  402bb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402bb4:	6814      	ldr	r4, [r2, #0]
  402bb6:	4613      	mov	r3, r2
  402bb8:	3304      	adds	r3, #4
  402bba:	17e5      	asrs	r5, r4, #31
  402bbc:	930f      	str	r3, [sp, #60]	; 0x3c
  402bbe:	4622      	mov	r2, r4
  402bc0:	462b      	mov	r3, r5
  402bc2:	e4fa      	b.n	4025ba <_svfprintf_r+0x6a6>
  402bc4:	3204      	adds	r2, #4
  402bc6:	681c      	ldr	r4, [r3, #0]
  402bc8:	920f      	str	r2, [sp, #60]	; 0x3c
  402bca:	2301      	movs	r3, #1
  402bcc:	2500      	movs	r5, #0
  402bce:	f7ff ba94 	b.w	4020fa <_svfprintf_r+0x1e6>
  402bd2:	681c      	ldr	r4, [r3, #0]
  402bd4:	3304      	adds	r3, #4
  402bd6:	930f      	str	r3, [sp, #60]	; 0x3c
  402bd8:	2500      	movs	r5, #0
  402bda:	e421      	b.n	402420 <_svfprintf_r+0x50c>
  402bdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402bde:	460a      	mov	r2, r1
  402be0:	3204      	adds	r2, #4
  402be2:	680c      	ldr	r4, [r1, #0]
  402be4:	920f      	str	r2, [sp, #60]	; 0x3c
  402be6:	2500      	movs	r5, #0
  402be8:	f7ff ba87 	b.w	4020fa <_svfprintf_r+0x1e6>
  402bec:	4614      	mov	r4, r2
  402bee:	3301      	adds	r3, #1
  402bf0:	4434      	add	r4, r6
  402bf2:	2b07      	cmp	r3, #7
  402bf4:	9427      	str	r4, [sp, #156]	; 0x9c
  402bf6:	9326      	str	r3, [sp, #152]	; 0x98
  402bf8:	e888 0060 	stmia.w	r8, {r5, r6}
  402bfc:	f77f ab68 	ble.w	4022d0 <_svfprintf_r+0x3bc>
  402c00:	e6b3      	b.n	40296a <_svfprintf_r+0xa56>
  402c02:	f8dd b01c 	ldr.w	fp, [sp, #28]
  402c06:	f8cd b01c 	str.w	fp, [sp, #28]
  402c0a:	ae42      	add	r6, sp, #264	; 0x108
  402c0c:	3430      	adds	r4, #48	; 0x30
  402c0e:	2301      	movs	r3, #1
  402c10:	f806 4d41 	strb.w	r4, [r6, #-65]!
  402c14:	930e      	str	r3, [sp, #56]	; 0x38
  402c16:	f7ff ba8d 	b.w	402134 <_svfprintf_r+0x220>
  402c1a:	aa25      	add	r2, sp, #148	; 0x94
  402c1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402c1e:	980c      	ldr	r0, [sp, #48]	; 0x30
  402c20:	f002 fadc 	bl	4051dc <__ssprint_r>
  402c24:	2800      	cmp	r0, #0
  402c26:	f47f aa47 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  402c2a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402c2c:	46c8      	mov	r8, r9
  402c2e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  402c30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402c32:	429a      	cmp	r2, r3
  402c34:	db44      	blt.n	402cc0 <_svfprintf_r+0xdac>
  402c36:	9b07      	ldr	r3, [sp, #28]
  402c38:	07d9      	lsls	r1, r3, #31
  402c3a:	d441      	bmi.n	402cc0 <_svfprintf_r+0xdac>
  402c3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402c3e:	9812      	ldr	r0, [sp, #72]	; 0x48
  402c40:	1a9a      	subs	r2, r3, r2
  402c42:	1a1d      	subs	r5, r3, r0
  402c44:	4295      	cmp	r5, r2
  402c46:	bfa8      	it	ge
  402c48:	4615      	movge	r5, r2
  402c4a:	2d00      	cmp	r5, #0
  402c4c:	dd0e      	ble.n	402c6c <_svfprintf_r+0xd58>
  402c4e:	9926      	ldr	r1, [sp, #152]	; 0x98
  402c50:	f8c8 5004 	str.w	r5, [r8, #4]
  402c54:	3101      	adds	r1, #1
  402c56:	4406      	add	r6, r0
  402c58:	442c      	add	r4, r5
  402c5a:	2907      	cmp	r1, #7
  402c5c:	f8c8 6000 	str.w	r6, [r8]
  402c60:	9427      	str	r4, [sp, #156]	; 0x9c
  402c62:	9126      	str	r1, [sp, #152]	; 0x98
  402c64:	f300 823b 	bgt.w	4030de <_svfprintf_r+0x11ca>
  402c68:	f108 0808 	add.w	r8, r8, #8
  402c6c:	2d00      	cmp	r5, #0
  402c6e:	bfac      	ite	ge
  402c70:	1b56      	subge	r6, r2, r5
  402c72:	4616      	movlt	r6, r2
  402c74:	2e00      	cmp	r6, #0
  402c76:	f77f ab2d 	ble.w	4022d4 <_svfprintf_r+0x3c0>
  402c7a:	2e10      	cmp	r6, #16
  402c7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402c7e:	4db0      	ldr	r5, [pc, #704]	; (402f40 <_svfprintf_r+0x102c>)
  402c80:	ddb5      	ble.n	402bee <_svfprintf_r+0xcda>
  402c82:	4622      	mov	r2, r4
  402c84:	2710      	movs	r7, #16
  402c86:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  402c8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  402c8c:	e004      	b.n	402c98 <_svfprintf_r+0xd84>
  402c8e:	f108 0808 	add.w	r8, r8, #8
  402c92:	3e10      	subs	r6, #16
  402c94:	2e10      	cmp	r6, #16
  402c96:	dda9      	ble.n	402bec <_svfprintf_r+0xcd8>
  402c98:	3301      	adds	r3, #1
  402c9a:	3210      	adds	r2, #16
  402c9c:	2b07      	cmp	r3, #7
  402c9e:	9227      	str	r2, [sp, #156]	; 0x9c
  402ca0:	9326      	str	r3, [sp, #152]	; 0x98
  402ca2:	e888 00a0 	stmia.w	r8, {r5, r7}
  402ca6:	ddf2      	ble.n	402c8e <_svfprintf_r+0xd7a>
  402ca8:	aa25      	add	r2, sp, #148	; 0x94
  402caa:	4621      	mov	r1, r4
  402cac:	4658      	mov	r0, fp
  402cae:	f002 fa95 	bl	4051dc <__ssprint_r>
  402cb2:	2800      	cmp	r0, #0
  402cb4:	f47f aa00 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  402cb8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402cba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402cbc:	46c8      	mov	r8, r9
  402cbe:	e7e8      	b.n	402c92 <_svfprintf_r+0xd7e>
  402cc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402cc2:	9819      	ldr	r0, [sp, #100]	; 0x64
  402cc4:	991a      	ldr	r1, [sp, #104]	; 0x68
  402cc6:	f8c8 1000 	str.w	r1, [r8]
  402cca:	3301      	adds	r3, #1
  402ccc:	4404      	add	r4, r0
  402cce:	2b07      	cmp	r3, #7
  402cd0:	9427      	str	r4, [sp, #156]	; 0x9c
  402cd2:	f8c8 0004 	str.w	r0, [r8, #4]
  402cd6:	9326      	str	r3, [sp, #152]	; 0x98
  402cd8:	f300 81f5 	bgt.w	4030c6 <_svfprintf_r+0x11b2>
  402cdc:	f108 0808 	add.w	r8, r8, #8
  402ce0:	e7ac      	b.n	402c3c <_svfprintf_r+0xd28>
  402ce2:	9b07      	ldr	r3, [sp, #28]
  402ce4:	07da      	lsls	r2, r3, #31
  402ce6:	f53f adfe 	bmi.w	4028e6 <_svfprintf_r+0x9d2>
  402cea:	3701      	adds	r7, #1
  402cec:	3401      	adds	r4, #1
  402cee:	2301      	movs	r3, #1
  402cf0:	2f07      	cmp	r7, #7
  402cf2:	9427      	str	r4, [sp, #156]	; 0x9c
  402cf4:	9726      	str	r7, [sp, #152]	; 0x98
  402cf6:	f8c8 6000 	str.w	r6, [r8]
  402cfa:	f8c8 3004 	str.w	r3, [r8, #4]
  402cfe:	f77f ae25 	ble.w	40294c <_svfprintf_r+0xa38>
  402d02:	e74a      	b.n	402b9a <_svfprintf_r+0xc86>
  402d04:	aa25      	add	r2, sp, #148	; 0x94
  402d06:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402d08:	980c      	ldr	r0, [sp, #48]	; 0x30
  402d0a:	f002 fa67 	bl	4051dc <__ssprint_r>
  402d0e:	2800      	cmp	r0, #0
  402d10:	f47f a9d2 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  402d14:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402d16:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402d18:	46c8      	mov	r8, r9
  402d1a:	e5f2      	b.n	402902 <_svfprintf_r+0x9ee>
  402d1c:	aa25      	add	r2, sp, #148	; 0x94
  402d1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402d20:	980c      	ldr	r0, [sp, #48]	; 0x30
  402d22:	f002 fa5b 	bl	4051dc <__ssprint_r>
  402d26:	2800      	cmp	r0, #0
  402d28:	f47f a9c6 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  402d2c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402d2e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402d30:	46c8      	mov	r8, r9
  402d32:	e5f5      	b.n	402920 <_svfprintf_r+0xa0c>
  402d34:	464e      	mov	r6, r9
  402d36:	f7ff b9fd 	b.w	402134 <_svfprintf_r+0x220>
  402d3a:	aa25      	add	r2, sp, #148	; 0x94
  402d3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402d3e:	980c      	ldr	r0, [sp, #48]	; 0x30
  402d40:	f002 fa4c 	bl	4051dc <__ssprint_r>
  402d44:	2800      	cmp	r0, #0
  402d46:	f47f a9b7 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  402d4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402d4c:	46c8      	mov	r8, r9
  402d4e:	f7ff ba72 	b.w	402236 <_svfprintf_r+0x322>
  402d52:	9c15      	ldr	r4, [sp, #84]	; 0x54
  402d54:	4622      	mov	r2, r4
  402d56:	4620      	mov	r0, r4
  402d58:	9c14      	ldr	r4, [sp, #80]	; 0x50
  402d5a:	4623      	mov	r3, r4
  402d5c:	4621      	mov	r1, r4
  402d5e:	f003 fb03 	bl	406368 <__aeabi_dcmpun>
  402d62:	2800      	cmp	r0, #0
  402d64:	f040 8286 	bne.w	403274 <_svfprintf_r+0x1360>
  402d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402d6a:	3301      	adds	r3, #1
  402d6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402d6e:	f023 0320 	bic.w	r3, r3, #32
  402d72:	930e      	str	r3, [sp, #56]	; 0x38
  402d74:	f000 81e2 	beq.w	40313c <_svfprintf_r+0x1228>
  402d78:	2b47      	cmp	r3, #71	; 0x47
  402d7a:	f000 811e 	beq.w	402fba <_svfprintf_r+0x10a6>
  402d7e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  402d82:	9307      	str	r3, [sp, #28]
  402d84:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402d86:	1e1f      	subs	r7, r3, #0
  402d88:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402d8a:	9308      	str	r3, [sp, #32]
  402d8c:	bfbb      	ittet	lt
  402d8e:	463b      	movlt	r3, r7
  402d90:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  402d94:	2300      	movge	r3, #0
  402d96:	232d      	movlt	r3, #45	; 0x2d
  402d98:	9310      	str	r3, [sp, #64]	; 0x40
  402d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402d9c:	2b66      	cmp	r3, #102	; 0x66
  402d9e:	f000 81bb 	beq.w	403118 <_svfprintf_r+0x1204>
  402da2:	2b46      	cmp	r3, #70	; 0x46
  402da4:	f000 80df 	beq.w	402f66 <_svfprintf_r+0x1052>
  402da8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402daa:	9a08      	ldr	r2, [sp, #32]
  402dac:	2b45      	cmp	r3, #69	; 0x45
  402dae:	bf0c      	ite	eq
  402db0:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  402db2:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  402db4:	a823      	add	r0, sp, #140	; 0x8c
  402db6:	a920      	add	r1, sp, #128	; 0x80
  402db8:	bf08      	it	eq
  402dba:	1c5d      	addeq	r5, r3, #1
  402dbc:	9004      	str	r0, [sp, #16]
  402dbe:	9103      	str	r1, [sp, #12]
  402dc0:	a81f      	add	r0, sp, #124	; 0x7c
  402dc2:	2102      	movs	r1, #2
  402dc4:	463b      	mov	r3, r7
  402dc6:	9002      	str	r0, [sp, #8]
  402dc8:	9501      	str	r5, [sp, #4]
  402dca:	9100      	str	r1, [sp, #0]
  402dcc:	980c      	ldr	r0, [sp, #48]	; 0x30
  402dce:	f000 fb73 	bl	4034b8 <_dtoa_r>
  402dd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402dd4:	2b67      	cmp	r3, #103	; 0x67
  402dd6:	4606      	mov	r6, r0
  402dd8:	f040 81e0 	bne.w	40319c <_svfprintf_r+0x1288>
  402ddc:	f01b 0f01 	tst.w	fp, #1
  402de0:	f000 8246 	beq.w	403270 <_svfprintf_r+0x135c>
  402de4:	1974      	adds	r4, r6, r5
  402de6:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402de8:	9808      	ldr	r0, [sp, #32]
  402dea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402dec:	4639      	mov	r1, r7
  402dee:	f003 fa89 	bl	406304 <__aeabi_dcmpeq>
  402df2:	2800      	cmp	r0, #0
  402df4:	f040 8165 	bne.w	4030c2 <_svfprintf_r+0x11ae>
  402df8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402dfa:	42a3      	cmp	r3, r4
  402dfc:	d206      	bcs.n	402e0c <_svfprintf_r+0xef8>
  402dfe:	2130      	movs	r1, #48	; 0x30
  402e00:	1c5a      	adds	r2, r3, #1
  402e02:	9223      	str	r2, [sp, #140]	; 0x8c
  402e04:	7019      	strb	r1, [r3, #0]
  402e06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402e08:	429c      	cmp	r4, r3
  402e0a:	d8f9      	bhi.n	402e00 <_svfprintf_r+0xeec>
  402e0c:	1b9b      	subs	r3, r3, r6
  402e0e:	9313      	str	r3, [sp, #76]	; 0x4c
  402e10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402e12:	2b47      	cmp	r3, #71	; 0x47
  402e14:	f000 80e9 	beq.w	402fea <_svfprintf_r+0x10d6>
  402e18:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402e1a:	2b65      	cmp	r3, #101	; 0x65
  402e1c:	f340 81cd 	ble.w	4031ba <_svfprintf_r+0x12a6>
  402e20:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402e22:	2b66      	cmp	r3, #102	; 0x66
  402e24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402e26:	9312      	str	r3, [sp, #72]	; 0x48
  402e28:	f000 819e 	beq.w	403168 <_svfprintf_r+0x1254>
  402e2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402e2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  402e30:	4619      	mov	r1, r3
  402e32:	4291      	cmp	r1, r2
  402e34:	f300 818a 	bgt.w	40314c <_svfprintf_r+0x1238>
  402e38:	f01b 0f01 	tst.w	fp, #1
  402e3c:	f040 8213 	bne.w	403266 <_svfprintf_r+0x1352>
  402e40:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  402e44:	9308      	str	r3, [sp, #32]
  402e46:	2367      	movs	r3, #103	; 0x67
  402e48:	920e      	str	r2, [sp, #56]	; 0x38
  402e4a:	9311      	str	r3, [sp, #68]	; 0x44
  402e4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402e4e:	2b00      	cmp	r3, #0
  402e50:	f040 80c4 	bne.w	402fdc <_svfprintf_r+0x10c8>
  402e54:	930a      	str	r3, [sp, #40]	; 0x28
  402e56:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402e5a:	f7ff b973 	b.w	402144 <_svfprintf_r+0x230>
  402e5e:	4635      	mov	r5, r6
  402e60:	460c      	mov	r4, r1
  402e62:	4646      	mov	r6, r8
  402e64:	4690      	mov	r8, r2
  402e66:	3301      	adds	r3, #1
  402e68:	443c      	add	r4, r7
  402e6a:	2b07      	cmp	r3, #7
  402e6c:	9427      	str	r4, [sp, #156]	; 0x9c
  402e6e:	9326      	str	r3, [sp, #152]	; 0x98
  402e70:	e888 00a0 	stmia.w	r8, {r5, r7}
  402e74:	f73f aed1 	bgt.w	402c1a <_svfprintf_r+0xd06>
  402e78:	f108 0808 	add.w	r8, r8, #8
  402e7c:	e6d7      	b.n	402c2e <_svfprintf_r+0xd1a>
  402e7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402e80:	6813      	ldr	r3, [r2, #0]
  402e82:	3204      	adds	r2, #4
  402e84:	920f      	str	r2, [sp, #60]	; 0x3c
  402e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402e88:	601a      	str	r2, [r3, #0]
  402e8a:	f7ff b86a 	b.w	401f62 <_svfprintf_r+0x4e>
  402e8e:	aa25      	add	r2, sp, #148	; 0x94
  402e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402e92:	980c      	ldr	r0, [sp, #48]	; 0x30
  402e94:	f002 f9a2 	bl	4051dc <__ssprint_r>
  402e98:	2800      	cmp	r0, #0
  402e9a:	f47f a90d 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  402e9e:	46c8      	mov	r8, r9
  402ea0:	e48d      	b.n	4027be <_svfprintf_r+0x8aa>
  402ea2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402ea4:	4a27      	ldr	r2, [pc, #156]	; (402f44 <_svfprintf_r+0x1030>)
  402ea6:	f8c8 2000 	str.w	r2, [r8]
  402eaa:	3301      	adds	r3, #1
  402eac:	3401      	adds	r4, #1
  402eae:	2201      	movs	r2, #1
  402eb0:	2b07      	cmp	r3, #7
  402eb2:	9427      	str	r4, [sp, #156]	; 0x9c
  402eb4:	9326      	str	r3, [sp, #152]	; 0x98
  402eb6:	f8c8 2004 	str.w	r2, [r8, #4]
  402eba:	dc72      	bgt.n	402fa2 <_svfprintf_r+0x108e>
  402ebc:	f108 0808 	add.w	r8, r8, #8
  402ec0:	b929      	cbnz	r1, 402ece <_svfprintf_r+0xfba>
  402ec2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402ec4:	b91b      	cbnz	r3, 402ece <_svfprintf_r+0xfba>
  402ec6:	9b07      	ldr	r3, [sp, #28]
  402ec8:	07d8      	lsls	r0, r3, #31
  402eca:	f57f aa03 	bpl.w	4022d4 <_svfprintf_r+0x3c0>
  402ece:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402ed0:	9819      	ldr	r0, [sp, #100]	; 0x64
  402ed2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  402ed4:	f8c8 2000 	str.w	r2, [r8]
  402ed8:	3301      	adds	r3, #1
  402eda:	4602      	mov	r2, r0
  402edc:	4422      	add	r2, r4
  402ede:	2b07      	cmp	r3, #7
  402ee0:	9227      	str	r2, [sp, #156]	; 0x9c
  402ee2:	f8c8 0004 	str.w	r0, [r8, #4]
  402ee6:	9326      	str	r3, [sp, #152]	; 0x98
  402ee8:	f300 818d 	bgt.w	403206 <_svfprintf_r+0x12f2>
  402eec:	f108 0808 	add.w	r8, r8, #8
  402ef0:	2900      	cmp	r1, #0
  402ef2:	f2c0 8165 	blt.w	4031c0 <_svfprintf_r+0x12ac>
  402ef6:	9913      	ldr	r1, [sp, #76]	; 0x4c
  402ef8:	f8c8 6000 	str.w	r6, [r8]
  402efc:	3301      	adds	r3, #1
  402efe:	188c      	adds	r4, r1, r2
  402f00:	2b07      	cmp	r3, #7
  402f02:	9427      	str	r4, [sp, #156]	; 0x9c
  402f04:	9326      	str	r3, [sp, #152]	; 0x98
  402f06:	f8c8 1004 	str.w	r1, [r8, #4]
  402f0a:	f77f a9e1 	ble.w	4022d0 <_svfprintf_r+0x3bc>
  402f0e:	e52c      	b.n	40296a <_svfprintf_r+0xa56>
  402f10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402f12:	9909      	ldr	r1, [sp, #36]	; 0x24
  402f14:	6813      	ldr	r3, [r2, #0]
  402f16:	17cd      	asrs	r5, r1, #31
  402f18:	4608      	mov	r0, r1
  402f1a:	3204      	adds	r2, #4
  402f1c:	4629      	mov	r1, r5
  402f1e:	920f      	str	r2, [sp, #60]	; 0x3c
  402f20:	e9c3 0100 	strd	r0, r1, [r3]
  402f24:	f7ff b81d 	b.w	401f62 <_svfprintf_r+0x4e>
  402f28:	aa25      	add	r2, sp, #148	; 0x94
  402f2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f2c:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f2e:	f002 f955 	bl	4051dc <__ssprint_r>
  402f32:	2800      	cmp	r0, #0
  402f34:	f47f a8c0 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  402f38:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402f3a:	46c8      	mov	r8, r9
  402f3c:	e458      	b.n	4027f0 <_svfprintf_r+0x8dc>
  402f3e:	bf00      	nop
  402f40:	004071e8 	.word	0x004071e8
  402f44:	004071d4 	.word	0x004071d4
  402f48:	2140      	movs	r1, #64	; 0x40
  402f4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f4c:	f001 fa0a 	bl	404364 <_malloc_r>
  402f50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402f52:	6010      	str	r0, [r2, #0]
  402f54:	6110      	str	r0, [r2, #16]
  402f56:	2800      	cmp	r0, #0
  402f58:	f000 81f2 	beq.w	403340 <_svfprintf_r+0x142c>
  402f5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402f5e:	2340      	movs	r3, #64	; 0x40
  402f60:	6153      	str	r3, [r2, #20]
  402f62:	f7fe bfee 	b.w	401f42 <_svfprintf_r+0x2e>
  402f66:	a823      	add	r0, sp, #140	; 0x8c
  402f68:	a920      	add	r1, sp, #128	; 0x80
  402f6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  402f6c:	9004      	str	r0, [sp, #16]
  402f6e:	9103      	str	r1, [sp, #12]
  402f70:	a81f      	add	r0, sp, #124	; 0x7c
  402f72:	2103      	movs	r1, #3
  402f74:	9002      	str	r0, [sp, #8]
  402f76:	9a08      	ldr	r2, [sp, #32]
  402f78:	9401      	str	r4, [sp, #4]
  402f7a:	463b      	mov	r3, r7
  402f7c:	9100      	str	r1, [sp, #0]
  402f7e:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f80:	f000 fa9a 	bl	4034b8 <_dtoa_r>
  402f84:	4625      	mov	r5, r4
  402f86:	4606      	mov	r6, r0
  402f88:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402f8a:	2b46      	cmp	r3, #70	; 0x46
  402f8c:	eb06 0405 	add.w	r4, r6, r5
  402f90:	f47f af29 	bne.w	402de6 <_svfprintf_r+0xed2>
  402f94:	7833      	ldrb	r3, [r6, #0]
  402f96:	2b30      	cmp	r3, #48	; 0x30
  402f98:	f000 8178 	beq.w	40328c <_svfprintf_r+0x1378>
  402f9c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  402f9e:	442c      	add	r4, r5
  402fa0:	e721      	b.n	402de6 <_svfprintf_r+0xed2>
  402fa2:	aa25      	add	r2, sp, #148	; 0x94
  402fa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402fa6:	980c      	ldr	r0, [sp, #48]	; 0x30
  402fa8:	f002 f918 	bl	4051dc <__ssprint_r>
  402fac:	2800      	cmp	r0, #0
  402fae:	f47f a883 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  402fb2:	991f      	ldr	r1, [sp, #124]	; 0x7c
  402fb4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402fb6:	46c8      	mov	r8, r9
  402fb8:	e782      	b.n	402ec0 <_svfprintf_r+0xfac>
  402fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402fbc:	2b00      	cmp	r3, #0
  402fbe:	bf08      	it	eq
  402fc0:	2301      	moveq	r3, #1
  402fc2:	930a      	str	r3, [sp, #40]	; 0x28
  402fc4:	e6db      	b.n	402d7e <_svfprintf_r+0xe6a>
  402fc6:	4630      	mov	r0, r6
  402fc8:	940a      	str	r4, [sp, #40]	; 0x28
  402fca:	f002 f899 	bl	405100 <strlen>
  402fce:	950f      	str	r5, [sp, #60]	; 0x3c
  402fd0:	900e      	str	r0, [sp, #56]	; 0x38
  402fd2:	f8cd b01c 	str.w	fp, [sp, #28]
  402fd6:	4603      	mov	r3, r0
  402fd8:	f7ff b9f9 	b.w	4023ce <_svfprintf_r+0x4ba>
  402fdc:	272d      	movs	r7, #45	; 0x2d
  402fde:	2300      	movs	r3, #0
  402fe0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  402fe4:	930a      	str	r3, [sp, #40]	; 0x28
  402fe6:	f7ff b8ae 	b.w	402146 <_svfprintf_r+0x232>
  402fea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402fec:	9312      	str	r3, [sp, #72]	; 0x48
  402fee:	461a      	mov	r2, r3
  402ff0:	3303      	adds	r3, #3
  402ff2:	db04      	blt.n	402ffe <_svfprintf_r+0x10ea>
  402ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402ff6:	4619      	mov	r1, r3
  402ff8:	4291      	cmp	r1, r2
  402ffa:	f6bf af17 	bge.w	402e2c <_svfprintf_r+0xf18>
  402ffe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403000:	3b02      	subs	r3, #2
  403002:	9311      	str	r3, [sp, #68]	; 0x44
  403004:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  403008:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  40300c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40300e:	3b01      	subs	r3, #1
  403010:	2b00      	cmp	r3, #0
  403012:	931f      	str	r3, [sp, #124]	; 0x7c
  403014:	bfbd      	ittte	lt
  403016:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  403018:	f1c3 0301 	rsblt	r3, r3, #1
  40301c:	222d      	movlt	r2, #45	; 0x2d
  40301e:	222b      	movge	r2, #43	; 0x2b
  403020:	2b09      	cmp	r3, #9
  403022:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  403026:	f340 8116 	ble.w	403256 <_svfprintf_r+0x1342>
  40302a:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  40302e:	4620      	mov	r0, r4
  403030:	4dab      	ldr	r5, [pc, #684]	; (4032e0 <_svfprintf_r+0x13cc>)
  403032:	e000      	b.n	403036 <_svfprintf_r+0x1122>
  403034:	4610      	mov	r0, r2
  403036:	fb85 1203 	smull	r1, r2, r5, r3
  40303a:	17d9      	asrs	r1, r3, #31
  40303c:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  403040:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403044:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  403048:	3230      	adds	r2, #48	; 0x30
  40304a:	2909      	cmp	r1, #9
  40304c:	f800 2c01 	strb.w	r2, [r0, #-1]
  403050:	460b      	mov	r3, r1
  403052:	f100 32ff 	add.w	r2, r0, #4294967295
  403056:	dced      	bgt.n	403034 <_svfprintf_r+0x1120>
  403058:	3330      	adds	r3, #48	; 0x30
  40305a:	3802      	subs	r0, #2
  40305c:	b2d9      	uxtb	r1, r3
  40305e:	4284      	cmp	r4, r0
  403060:	f802 1c01 	strb.w	r1, [r2, #-1]
  403064:	f240 8165 	bls.w	403332 <_svfprintf_r+0x141e>
  403068:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  40306c:	4613      	mov	r3, r2
  40306e:	e001      	b.n	403074 <_svfprintf_r+0x1160>
  403070:	f813 1b01 	ldrb.w	r1, [r3], #1
  403074:	f800 1b01 	strb.w	r1, [r0], #1
  403078:	42a3      	cmp	r3, r4
  40307a:	d1f9      	bne.n	403070 <_svfprintf_r+0x115c>
  40307c:	3301      	adds	r3, #1
  40307e:	1a9b      	subs	r3, r3, r2
  403080:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  403084:	4413      	add	r3, r2
  403086:	aa21      	add	r2, sp, #132	; 0x84
  403088:	1a9b      	subs	r3, r3, r2
  40308a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40308c:	931b      	str	r3, [sp, #108]	; 0x6c
  40308e:	2a01      	cmp	r2, #1
  403090:	4413      	add	r3, r2
  403092:	930e      	str	r3, [sp, #56]	; 0x38
  403094:	f340 8119 	ble.w	4032ca <_svfprintf_r+0x13b6>
  403098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40309a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40309c:	4413      	add	r3, r2
  40309e:	930e      	str	r3, [sp, #56]	; 0x38
  4030a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4030a4:	9308      	str	r3, [sp, #32]
  4030a6:	2300      	movs	r3, #0
  4030a8:	9312      	str	r3, [sp, #72]	; 0x48
  4030aa:	e6cf      	b.n	402e4c <_svfprintf_r+0xf38>
  4030ac:	aa25      	add	r2, sp, #148	; 0x94
  4030ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4030b0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4030b2:	f002 f893 	bl	4051dc <__ssprint_r>
  4030b6:	2800      	cmp	r0, #0
  4030b8:	f47e affe 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  4030bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4030be:	46c8      	mov	r8, r9
  4030c0:	e4d7      	b.n	402a72 <_svfprintf_r+0xb5e>
  4030c2:	4623      	mov	r3, r4
  4030c4:	e6a2      	b.n	402e0c <_svfprintf_r+0xef8>
  4030c6:	aa25      	add	r2, sp, #148	; 0x94
  4030c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4030ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4030cc:	f002 f886 	bl	4051dc <__ssprint_r>
  4030d0:	2800      	cmp	r0, #0
  4030d2:	f47e aff1 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  4030d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4030d8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4030da:	46c8      	mov	r8, r9
  4030dc:	e5ae      	b.n	402c3c <_svfprintf_r+0xd28>
  4030de:	aa25      	add	r2, sp, #148	; 0x94
  4030e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4030e2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4030e4:	f002 f87a 	bl	4051dc <__ssprint_r>
  4030e8:	2800      	cmp	r0, #0
  4030ea:	f47e afe5 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  4030ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4030f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4030f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4030f4:	1a9a      	subs	r2, r3, r2
  4030f6:	46c8      	mov	r8, r9
  4030f8:	e5b8      	b.n	402c6c <_svfprintf_r+0xd58>
  4030fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4030fc:	9612      	str	r6, [sp, #72]	; 0x48
  4030fe:	2b06      	cmp	r3, #6
  403100:	bf28      	it	cs
  403102:	2306      	movcs	r3, #6
  403104:	960a      	str	r6, [sp, #40]	; 0x28
  403106:	4637      	mov	r7, r6
  403108:	9308      	str	r3, [sp, #32]
  40310a:	950f      	str	r5, [sp, #60]	; 0x3c
  40310c:	f8cd b01c 	str.w	fp, [sp, #28]
  403110:	930e      	str	r3, [sp, #56]	; 0x38
  403112:	4e74      	ldr	r6, [pc, #464]	; (4032e4 <_svfprintf_r+0x13d0>)
  403114:	f7ff b816 	b.w	402144 <_svfprintf_r+0x230>
  403118:	a823      	add	r0, sp, #140	; 0x8c
  40311a:	a920      	add	r1, sp, #128	; 0x80
  40311c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40311e:	9004      	str	r0, [sp, #16]
  403120:	9103      	str	r1, [sp, #12]
  403122:	a81f      	add	r0, sp, #124	; 0x7c
  403124:	2103      	movs	r1, #3
  403126:	9002      	str	r0, [sp, #8]
  403128:	9a08      	ldr	r2, [sp, #32]
  40312a:	9501      	str	r5, [sp, #4]
  40312c:	463b      	mov	r3, r7
  40312e:	9100      	str	r1, [sp, #0]
  403130:	980c      	ldr	r0, [sp, #48]	; 0x30
  403132:	f000 f9c1 	bl	4034b8 <_dtoa_r>
  403136:	4606      	mov	r6, r0
  403138:	1944      	adds	r4, r0, r5
  40313a:	e72b      	b.n	402f94 <_svfprintf_r+0x1080>
  40313c:	2306      	movs	r3, #6
  40313e:	930a      	str	r3, [sp, #40]	; 0x28
  403140:	e61d      	b.n	402d7e <_svfprintf_r+0xe6a>
  403142:	272d      	movs	r7, #45	; 0x2d
  403144:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403148:	f7ff bacd 	b.w	4026e6 <_svfprintf_r+0x7d2>
  40314c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40314e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403150:	4413      	add	r3, r2
  403152:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403154:	930e      	str	r3, [sp, #56]	; 0x38
  403156:	2a00      	cmp	r2, #0
  403158:	f340 80b0 	ble.w	4032bc <_svfprintf_r+0x13a8>
  40315c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403160:	9308      	str	r3, [sp, #32]
  403162:	2367      	movs	r3, #103	; 0x67
  403164:	9311      	str	r3, [sp, #68]	; 0x44
  403166:	e671      	b.n	402e4c <_svfprintf_r+0xf38>
  403168:	2b00      	cmp	r3, #0
  40316a:	f340 80c3 	ble.w	4032f4 <_svfprintf_r+0x13e0>
  40316e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403170:	2a00      	cmp	r2, #0
  403172:	f040 8099 	bne.w	4032a8 <_svfprintf_r+0x1394>
  403176:	f01b 0f01 	tst.w	fp, #1
  40317a:	f040 8095 	bne.w	4032a8 <_svfprintf_r+0x1394>
  40317e:	9308      	str	r3, [sp, #32]
  403180:	930e      	str	r3, [sp, #56]	; 0x38
  403182:	e663      	b.n	402e4c <_svfprintf_r+0xf38>
  403184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403186:	9308      	str	r3, [sp, #32]
  403188:	930e      	str	r3, [sp, #56]	; 0x38
  40318a:	900a      	str	r0, [sp, #40]	; 0x28
  40318c:	950f      	str	r5, [sp, #60]	; 0x3c
  40318e:	f8cd b01c 	str.w	fp, [sp, #28]
  403192:	9012      	str	r0, [sp, #72]	; 0x48
  403194:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403198:	f7fe bfd4 	b.w	402144 <_svfprintf_r+0x230>
  40319c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40319e:	2b47      	cmp	r3, #71	; 0x47
  4031a0:	f47f ae20 	bne.w	402de4 <_svfprintf_r+0xed0>
  4031a4:	f01b 0f01 	tst.w	fp, #1
  4031a8:	f47f aeee 	bne.w	402f88 <_svfprintf_r+0x1074>
  4031ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4031ae:	1b9b      	subs	r3, r3, r6
  4031b0:	9313      	str	r3, [sp, #76]	; 0x4c
  4031b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4031b4:	2b47      	cmp	r3, #71	; 0x47
  4031b6:	f43f af18 	beq.w	402fea <_svfprintf_r+0x10d6>
  4031ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4031bc:	9312      	str	r3, [sp, #72]	; 0x48
  4031be:	e721      	b.n	403004 <_svfprintf_r+0x10f0>
  4031c0:	424f      	negs	r7, r1
  4031c2:	3110      	adds	r1, #16
  4031c4:	4d48      	ldr	r5, [pc, #288]	; (4032e8 <_svfprintf_r+0x13d4>)
  4031c6:	da2f      	bge.n	403228 <_svfprintf_r+0x1314>
  4031c8:	2410      	movs	r4, #16
  4031ca:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4031ce:	e004      	b.n	4031da <_svfprintf_r+0x12c6>
  4031d0:	f108 0808 	add.w	r8, r8, #8
  4031d4:	3f10      	subs	r7, #16
  4031d6:	2f10      	cmp	r7, #16
  4031d8:	dd26      	ble.n	403228 <_svfprintf_r+0x1314>
  4031da:	3301      	adds	r3, #1
  4031dc:	3210      	adds	r2, #16
  4031de:	2b07      	cmp	r3, #7
  4031e0:	9227      	str	r2, [sp, #156]	; 0x9c
  4031e2:	9326      	str	r3, [sp, #152]	; 0x98
  4031e4:	f8c8 5000 	str.w	r5, [r8]
  4031e8:	f8c8 4004 	str.w	r4, [r8, #4]
  4031ec:	ddf0      	ble.n	4031d0 <_svfprintf_r+0x12bc>
  4031ee:	aa25      	add	r2, sp, #148	; 0x94
  4031f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4031f2:	4658      	mov	r0, fp
  4031f4:	f001 fff2 	bl	4051dc <__ssprint_r>
  4031f8:	2800      	cmp	r0, #0
  4031fa:	f47e af5d 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  4031fe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403200:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403202:	46c8      	mov	r8, r9
  403204:	e7e6      	b.n	4031d4 <_svfprintf_r+0x12c0>
  403206:	aa25      	add	r2, sp, #148	; 0x94
  403208:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40320a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40320c:	f001 ffe6 	bl	4051dc <__ssprint_r>
  403210:	2800      	cmp	r0, #0
  403212:	f47e af51 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  403216:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403218:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40321a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40321c:	46c8      	mov	r8, r9
  40321e:	e667      	b.n	402ef0 <_svfprintf_r+0xfdc>
  403220:	2000      	movs	r0, #0
  403222:	900a      	str	r0, [sp, #40]	; 0x28
  403224:	f7fe bed0 	b.w	401fc8 <_svfprintf_r+0xb4>
  403228:	3301      	adds	r3, #1
  40322a:	443a      	add	r2, r7
  40322c:	2b07      	cmp	r3, #7
  40322e:	e888 00a0 	stmia.w	r8, {r5, r7}
  403232:	9227      	str	r2, [sp, #156]	; 0x9c
  403234:	9326      	str	r3, [sp, #152]	; 0x98
  403236:	f108 0808 	add.w	r8, r8, #8
  40323a:	f77f ae5c 	ble.w	402ef6 <_svfprintf_r+0xfe2>
  40323e:	aa25      	add	r2, sp, #148	; 0x94
  403240:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403242:	980c      	ldr	r0, [sp, #48]	; 0x30
  403244:	f001 ffca 	bl	4051dc <__ssprint_r>
  403248:	2800      	cmp	r0, #0
  40324a:	f47e af35 	bne.w	4020b8 <_svfprintf_r+0x1a4>
  40324e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403250:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403252:	46c8      	mov	r8, r9
  403254:	e64f      	b.n	402ef6 <_svfprintf_r+0xfe2>
  403256:	3330      	adds	r3, #48	; 0x30
  403258:	2230      	movs	r2, #48	; 0x30
  40325a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40325e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  403262:	ab22      	add	r3, sp, #136	; 0x88
  403264:	e70f      	b.n	403086 <_svfprintf_r+0x1172>
  403266:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403268:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40326a:	4413      	add	r3, r2
  40326c:	930e      	str	r3, [sp, #56]	; 0x38
  40326e:	e775      	b.n	40315c <_svfprintf_r+0x1248>
  403270:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403272:	e5cb      	b.n	402e0c <_svfprintf_r+0xef8>
  403274:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403276:	4e1d      	ldr	r6, [pc, #116]	; (4032ec <_svfprintf_r+0x13d8>)
  403278:	2b00      	cmp	r3, #0
  40327a:	bfb6      	itet	lt
  40327c:	272d      	movlt	r7, #45	; 0x2d
  40327e:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  403282:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  403286:	4b1a      	ldr	r3, [pc, #104]	; (4032f0 <_svfprintf_r+0x13dc>)
  403288:	f7ff ba2f 	b.w	4026ea <_svfprintf_r+0x7d6>
  40328c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40328e:	9808      	ldr	r0, [sp, #32]
  403290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403292:	4639      	mov	r1, r7
  403294:	f003 f836 	bl	406304 <__aeabi_dcmpeq>
  403298:	2800      	cmp	r0, #0
  40329a:	f47f ae7f 	bne.w	402f9c <_svfprintf_r+0x1088>
  40329e:	f1c5 0501 	rsb	r5, r5, #1
  4032a2:	951f      	str	r5, [sp, #124]	; 0x7c
  4032a4:	442c      	add	r4, r5
  4032a6:	e59e      	b.n	402de6 <_svfprintf_r+0xed2>
  4032a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4032aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4032ac:	4413      	add	r3, r2
  4032ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4032b0:	441a      	add	r2, r3
  4032b2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4032b6:	920e      	str	r2, [sp, #56]	; 0x38
  4032b8:	9308      	str	r3, [sp, #32]
  4032ba:	e5c7      	b.n	402e4c <_svfprintf_r+0xf38>
  4032bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4032be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4032c0:	f1c3 0301 	rsb	r3, r3, #1
  4032c4:	441a      	add	r2, r3
  4032c6:	4613      	mov	r3, r2
  4032c8:	e7d0      	b.n	40326c <_svfprintf_r+0x1358>
  4032ca:	f01b 0301 	ands.w	r3, fp, #1
  4032ce:	9312      	str	r3, [sp, #72]	; 0x48
  4032d0:	f47f aee2 	bne.w	403098 <_svfprintf_r+0x1184>
  4032d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4032d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4032da:	9308      	str	r3, [sp, #32]
  4032dc:	e5b6      	b.n	402e4c <_svfprintf_r+0xf38>
  4032de:	bf00      	nop
  4032e0:	66666667 	.word	0x66666667
  4032e4:	004071cc 	.word	0x004071cc
  4032e8:	004071e8 	.word	0x004071e8
  4032ec:	004071a0 	.word	0x004071a0
  4032f0:	0040719c 	.word	0x0040719c
  4032f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4032f6:	b913      	cbnz	r3, 4032fe <_svfprintf_r+0x13ea>
  4032f8:	f01b 0f01 	tst.w	fp, #1
  4032fc:	d002      	beq.n	403304 <_svfprintf_r+0x13f0>
  4032fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403300:	3301      	adds	r3, #1
  403302:	e7d4      	b.n	4032ae <_svfprintf_r+0x139a>
  403304:	2301      	movs	r3, #1
  403306:	e73a      	b.n	40317e <_svfprintf_r+0x126a>
  403308:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40330a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40330e:	6828      	ldr	r0, [r5, #0]
  403310:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  403314:	900a      	str	r0, [sp, #40]	; 0x28
  403316:	4628      	mov	r0, r5
  403318:	3004      	adds	r0, #4
  40331a:	46a2      	mov	sl, r4
  40331c:	900f      	str	r0, [sp, #60]	; 0x3c
  40331e:	f7fe be51 	b.w	401fc4 <_svfprintf_r+0xb0>
  403322:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403326:	f7ff b867 	b.w	4023f8 <_svfprintf_r+0x4e4>
  40332a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40332e:	f7ff ba15 	b.w	40275c <_svfprintf_r+0x848>
  403332:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  403336:	e6a6      	b.n	403086 <_svfprintf_r+0x1172>
  403338:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40333c:	f7ff b8eb 	b.w	402516 <_svfprintf_r+0x602>
  403340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403342:	230c      	movs	r3, #12
  403344:	6013      	str	r3, [r2, #0]
  403346:	f04f 33ff 	mov.w	r3, #4294967295
  40334a:	9309      	str	r3, [sp, #36]	; 0x24
  40334c:	f7fe bebd 	b.w	4020ca <_svfprintf_r+0x1b6>
  403350:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403354:	f7ff b99a 	b.w	40268c <_svfprintf_r+0x778>
  403358:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40335c:	f7ff b976 	b.w	40264c <_svfprintf_r+0x738>
  403360:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403364:	f7ff b959 	b.w	40261a <_svfprintf_r+0x706>
  403368:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40336c:	f7ff b912 	b.w	402594 <_svfprintf_r+0x680>

00403370 <register_fini>:
  403370:	4b02      	ldr	r3, [pc, #8]	; (40337c <register_fini+0xc>)
  403372:	b113      	cbz	r3, 40337a <register_fini+0xa>
  403374:	4802      	ldr	r0, [pc, #8]	; (403380 <register_fini+0x10>)
  403376:	f000 b805 	b.w	403384 <atexit>
  40337a:	4770      	bx	lr
  40337c:	00000000 	.word	0x00000000
  403380:	0040430d 	.word	0x0040430d

00403384 <atexit>:
  403384:	2300      	movs	r3, #0
  403386:	4601      	mov	r1, r0
  403388:	461a      	mov	r2, r3
  40338a:	4618      	mov	r0, r3
  40338c:	f001 bfa4 	b.w	4052d8 <__register_exitproc>

00403390 <quorem>:
  403390:	6902      	ldr	r2, [r0, #16]
  403392:	690b      	ldr	r3, [r1, #16]
  403394:	4293      	cmp	r3, r2
  403396:	f300 808d 	bgt.w	4034b4 <quorem+0x124>
  40339a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40339e:	f103 38ff 	add.w	r8, r3, #4294967295
  4033a2:	f101 0714 	add.w	r7, r1, #20
  4033a6:	f100 0b14 	add.w	fp, r0, #20
  4033aa:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4033ae:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4033b2:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4033b6:	b083      	sub	sp, #12
  4033b8:	3201      	adds	r2, #1
  4033ba:	fbb3 f9f2 	udiv	r9, r3, r2
  4033be:	eb0b 0304 	add.w	r3, fp, r4
  4033c2:	9400      	str	r4, [sp, #0]
  4033c4:	eb07 0a04 	add.w	sl, r7, r4
  4033c8:	9301      	str	r3, [sp, #4]
  4033ca:	f1b9 0f00 	cmp.w	r9, #0
  4033ce:	d039      	beq.n	403444 <quorem+0xb4>
  4033d0:	2500      	movs	r5, #0
  4033d2:	462e      	mov	r6, r5
  4033d4:	46bc      	mov	ip, r7
  4033d6:	46de      	mov	lr, fp
  4033d8:	f85c 4b04 	ldr.w	r4, [ip], #4
  4033dc:	f8de 3000 	ldr.w	r3, [lr]
  4033e0:	b2a2      	uxth	r2, r4
  4033e2:	fb09 5502 	mla	r5, r9, r2, r5
  4033e6:	0c22      	lsrs	r2, r4, #16
  4033e8:	0c2c      	lsrs	r4, r5, #16
  4033ea:	fb09 4202 	mla	r2, r9, r2, r4
  4033ee:	b2ad      	uxth	r5, r5
  4033f0:	1b75      	subs	r5, r6, r5
  4033f2:	b296      	uxth	r6, r2
  4033f4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4033f8:	fa15 f383 	uxtah	r3, r5, r3
  4033fc:	eb06 4623 	add.w	r6, r6, r3, asr #16
  403400:	b29b      	uxth	r3, r3
  403402:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  403406:	45e2      	cmp	sl, ip
  403408:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40340c:	f84e 3b04 	str.w	r3, [lr], #4
  403410:	ea4f 4626 	mov.w	r6, r6, asr #16
  403414:	d2e0      	bcs.n	4033d8 <quorem+0x48>
  403416:	9b00      	ldr	r3, [sp, #0]
  403418:	f85b 3003 	ldr.w	r3, [fp, r3]
  40341c:	b993      	cbnz	r3, 403444 <quorem+0xb4>
  40341e:	9c01      	ldr	r4, [sp, #4]
  403420:	1f23      	subs	r3, r4, #4
  403422:	459b      	cmp	fp, r3
  403424:	d20c      	bcs.n	403440 <quorem+0xb0>
  403426:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40342a:	b94b      	cbnz	r3, 403440 <quorem+0xb0>
  40342c:	f1a4 0308 	sub.w	r3, r4, #8
  403430:	e002      	b.n	403438 <quorem+0xa8>
  403432:	681a      	ldr	r2, [r3, #0]
  403434:	3b04      	subs	r3, #4
  403436:	b91a      	cbnz	r2, 403440 <quorem+0xb0>
  403438:	459b      	cmp	fp, r3
  40343a:	f108 38ff 	add.w	r8, r8, #4294967295
  40343e:	d3f8      	bcc.n	403432 <quorem+0xa2>
  403440:	f8c0 8010 	str.w	r8, [r0, #16]
  403444:	4604      	mov	r4, r0
  403446:	f001 fd37 	bl	404eb8 <__mcmp>
  40344a:	2800      	cmp	r0, #0
  40344c:	db2e      	blt.n	4034ac <quorem+0x11c>
  40344e:	f109 0901 	add.w	r9, r9, #1
  403452:	465d      	mov	r5, fp
  403454:	2300      	movs	r3, #0
  403456:	f857 1b04 	ldr.w	r1, [r7], #4
  40345a:	6828      	ldr	r0, [r5, #0]
  40345c:	b28a      	uxth	r2, r1
  40345e:	1a9a      	subs	r2, r3, r2
  403460:	0c0b      	lsrs	r3, r1, #16
  403462:	fa12 f280 	uxtah	r2, r2, r0
  403466:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40346a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40346e:	b292      	uxth	r2, r2
  403470:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  403474:	45ba      	cmp	sl, r7
  403476:	f845 2b04 	str.w	r2, [r5], #4
  40347a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40347e:	d2ea      	bcs.n	403456 <quorem+0xc6>
  403480:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  403484:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  403488:	b982      	cbnz	r2, 4034ac <quorem+0x11c>
  40348a:	1f1a      	subs	r2, r3, #4
  40348c:	4593      	cmp	fp, r2
  40348e:	d20b      	bcs.n	4034a8 <quorem+0x118>
  403490:	f853 2c04 	ldr.w	r2, [r3, #-4]
  403494:	b942      	cbnz	r2, 4034a8 <quorem+0x118>
  403496:	3b08      	subs	r3, #8
  403498:	e002      	b.n	4034a0 <quorem+0x110>
  40349a:	681a      	ldr	r2, [r3, #0]
  40349c:	3b04      	subs	r3, #4
  40349e:	b91a      	cbnz	r2, 4034a8 <quorem+0x118>
  4034a0:	459b      	cmp	fp, r3
  4034a2:	f108 38ff 	add.w	r8, r8, #4294967295
  4034a6:	d3f8      	bcc.n	40349a <quorem+0x10a>
  4034a8:	f8c4 8010 	str.w	r8, [r4, #16]
  4034ac:	4648      	mov	r0, r9
  4034ae:	b003      	add	sp, #12
  4034b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034b4:	2000      	movs	r0, #0
  4034b6:	4770      	bx	lr

004034b8 <_dtoa_r>:
  4034b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4034bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4034be:	b09b      	sub	sp, #108	; 0x6c
  4034c0:	4604      	mov	r4, r0
  4034c2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4034c4:	4692      	mov	sl, r2
  4034c6:	469b      	mov	fp, r3
  4034c8:	b141      	cbz	r1, 4034dc <_dtoa_r+0x24>
  4034ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4034cc:	604a      	str	r2, [r1, #4]
  4034ce:	2301      	movs	r3, #1
  4034d0:	4093      	lsls	r3, r2
  4034d2:	608b      	str	r3, [r1, #8]
  4034d4:	f001 fb18 	bl	404b08 <_Bfree>
  4034d8:	2300      	movs	r3, #0
  4034da:	6423      	str	r3, [r4, #64]	; 0x40
  4034dc:	f1bb 0f00 	cmp.w	fp, #0
  4034e0:	465d      	mov	r5, fp
  4034e2:	db35      	blt.n	403550 <_dtoa_r+0x98>
  4034e4:	2300      	movs	r3, #0
  4034e6:	6033      	str	r3, [r6, #0]
  4034e8:	4b9d      	ldr	r3, [pc, #628]	; (403760 <_dtoa_r+0x2a8>)
  4034ea:	43ab      	bics	r3, r5
  4034ec:	d015      	beq.n	40351a <_dtoa_r+0x62>
  4034ee:	4650      	mov	r0, sl
  4034f0:	4659      	mov	r1, fp
  4034f2:	2200      	movs	r2, #0
  4034f4:	2300      	movs	r3, #0
  4034f6:	f002 ff05 	bl	406304 <__aeabi_dcmpeq>
  4034fa:	4680      	mov	r8, r0
  4034fc:	2800      	cmp	r0, #0
  4034fe:	d02d      	beq.n	40355c <_dtoa_r+0xa4>
  403500:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403502:	2301      	movs	r3, #1
  403504:	6013      	str	r3, [r2, #0]
  403506:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403508:	2b00      	cmp	r3, #0
  40350a:	f000 80bd 	beq.w	403688 <_dtoa_r+0x1d0>
  40350e:	4895      	ldr	r0, [pc, #596]	; (403764 <_dtoa_r+0x2ac>)
  403510:	6018      	str	r0, [r3, #0]
  403512:	3801      	subs	r0, #1
  403514:	b01b      	add	sp, #108	; 0x6c
  403516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40351a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40351c:	f242 730f 	movw	r3, #9999	; 0x270f
  403520:	6013      	str	r3, [r2, #0]
  403522:	f1ba 0f00 	cmp.w	sl, #0
  403526:	d10d      	bne.n	403544 <_dtoa_r+0x8c>
  403528:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40352c:	b955      	cbnz	r5, 403544 <_dtoa_r+0x8c>
  40352e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403530:	488d      	ldr	r0, [pc, #564]	; (403768 <_dtoa_r+0x2b0>)
  403532:	2b00      	cmp	r3, #0
  403534:	d0ee      	beq.n	403514 <_dtoa_r+0x5c>
  403536:	f100 0308 	add.w	r3, r0, #8
  40353a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40353c:	6013      	str	r3, [r2, #0]
  40353e:	b01b      	add	sp, #108	; 0x6c
  403540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403544:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403546:	4889      	ldr	r0, [pc, #548]	; (40376c <_dtoa_r+0x2b4>)
  403548:	2b00      	cmp	r3, #0
  40354a:	d0e3      	beq.n	403514 <_dtoa_r+0x5c>
  40354c:	1cc3      	adds	r3, r0, #3
  40354e:	e7f4      	b.n	40353a <_dtoa_r+0x82>
  403550:	2301      	movs	r3, #1
  403552:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  403556:	6033      	str	r3, [r6, #0]
  403558:	46ab      	mov	fp, r5
  40355a:	e7c5      	b.n	4034e8 <_dtoa_r+0x30>
  40355c:	aa18      	add	r2, sp, #96	; 0x60
  40355e:	ab19      	add	r3, sp, #100	; 0x64
  403560:	9201      	str	r2, [sp, #4]
  403562:	9300      	str	r3, [sp, #0]
  403564:	4652      	mov	r2, sl
  403566:	465b      	mov	r3, fp
  403568:	4620      	mov	r0, r4
  40356a:	f001 fd45 	bl	404ff8 <__d2b>
  40356e:	0d2b      	lsrs	r3, r5, #20
  403570:	4681      	mov	r9, r0
  403572:	d071      	beq.n	403658 <_dtoa_r+0x1a0>
  403574:	f3cb 0213 	ubfx	r2, fp, #0, #20
  403578:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40357c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40357e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  403582:	4650      	mov	r0, sl
  403584:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  403588:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40358c:	2200      	movs	r2, #0
  40358e:	4b78      	ldr	r3, [pc, #480]	; (403770 <_dtoa_r+0x2b8>)
  403590:	f002 fa9c 	bl	405acc <__aeabi_dsub>
  403594:	a36c      	add	r3, pc, #432	; (adr r3, 403748 <_dtoa_r+0x290>)
  403596:	e9d3 2300 	ldrd	r2, r3, [r3]
  40359a:	f002 fc4b 	bl	405e34 <__aeabi_dmul>
  40359e:	a36c      	add	r3, pc, #432	; (adr r3, 403750 <_dtoa_r+0x298>)
  4035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4035a4:	f002 fa94 	bl	405ad0 <__adddf3>
  4035a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4035ac:	4630      	mov	r0, r6
  4035ae:	f002 fbdb 	bl	405d68 <__aeabi_i2d>
  4035b2:	a369      	add	r3, pc, #420	; (adr r3, 403758 <_dtoa_r+0x2a0>)
  4035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4035b8:	f002 fc3c 	bl	405e34 <__aeabi_dmul>
  4035bc:	4602      	mov	r2, r0
  4035be:	460b      	mov	r3, r1
  4035c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4035c4:	f002 fa84 	bl	405ad0 <__adddf3>
  4035c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4035cc:	f002 fee2 	bl	406394 <__aeabi_d2iz>
  4035d0:	2200      	movs	r2, #0
  4035d2:	9002      	str	r0, [sp, #8]
  4035d4:	2300      	movs	r3, #0
  4035d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4035da:	f002 fe9d 	bl	406318 <__aeabi_dcmplt>
  4035de:	2800      	cmp	r0, #0
  4035e0:	f040 8173 	bne.w	4038ca <_dtoa_r+0x412>
  4035e4:	9d02      	ldr	r5, [sp, #8]
  4035e6:	2d16      	cmp	r5, #22
  4035e8:	f200 815d 	bhi.w	4038a6 <_dtoa_r+0x3ee>
  4035ec:	4b61      	ldr	r3, [pc, #388]	; (403774 <_dtoa_r+0x2bc>)
  4035ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4035f2:	e9d3 0100 	ldrd	r0, r1, [r3]
  4035f6:	4652      	mov	r2, sl
  4035f8:	465b      	mov	r3, fp
  4035fa:	f002 feab 	bl	406354 <__aeabi_dcmpgt>
  4035fe:	2800      	cmp	r0, #0
  403600:	f000 81c5 	beq.w	40398e <_dtoa_r+0x4d6>
  403604:	1e6b      	subs	r3, r5, #1
  403606:	9302      	str	r3, [sp, #8]
  403608:	2300      	movs	r3, #0
  40360a:	930e      	str	r3, [sp, #56]	; 0x38
  40360c:	1bbf      	subs	r7, r7, r6
  40360e:	1e7b      	subs	r3, r7, #1
  403610:	9306      	str	r3, [sp, #24]
  403612:	f100 8154 	bmi.w	4038be <_dtoa_r+0x406>
  403616:	2300      	movs	r3, #0
  403618:	9308      	str	r3, [sp, #32]
  40361a:	9b02      	ldr	r3, [sp, #8]
  40361c:	2b00      	cmp	r3, #0
  40361e:	f2c0 8145 	blt.w	4038ac <_dtoa_r+0x3f4>
  403622:	9a06      	ldr	r2, [sp, #24]
  403624:	930d      	str	r3, [sp, #52]	; 0x34
  403626:	4611      	mov	r1, r2
  403628:	4419      	add	r1, r3
  40362a:	2300      	movs	r3, #0
  40362c:	9106      	str	r1, [sp, #24]
  40362e:	930c      	str	r3, [sp, #48]	; 0x30
  403630:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403632:	2b09      	cmp	r3, #9
  403634:	d82a      	bhi.n	40368c <_dtoa_r+0x1d4>
  403636:	2b05      	cmp	r3, #5
  403638:	f340 865b 	ble.w	4042f2 <_dtoa_r+0xe3a>
  40363c:	3b04      	subs	r3, #4
  40363e:	9324      	str	r3, [sp, #144]	; 0x90
  403640:	2500      	movs	r5, #0
  403642:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403644:	3b02      	subs	r3, #2
  403646:	2b03      	cmp	r3, #3
  403648:	f200 8642 	bhi.w	4042d0 <_dtoa_r+0xe18>
  40364c:	e8df f013 	tbh	[pc, r3, lsl #1]
  403650:	02c903d4 	.word	0x02c903d4
  403654:	046103df 	.word	0x046103df
  403658:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40365a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40365c:	443e      	add	r6, r7
  40365e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  403662:	2b20      	cmp	r3, #32
  403664:	f340 818e 	ble.w	403984 <_dtoa_r+0x4cc>
  403668:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40366c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  403670:	409d      	lsls	r5, r3
  403672:	fa2a f000 	lsr.w	r0, sl, r0
  403676:	4328      	orrs	r0, r5
  403678:	f002 fb66 	bl	405d48 <__aeabi_ui2d>
  40367c:	2301      	movs	r3, #1
  40367e:	3e01      	subs	r6, #1
  403680:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403684:	9314      	str	r3, [sp, #80]	; 0x50
  403686:	e781      	b.n	40358c <_dtoa_r+0xd4>
  403688:	483b      	ldr	r0, [pc, #236]	; (403778 <_dtoa_r+0x2c0>)
  40368a:	e743      	b.n	403514 <_dtoa_r+0x5c>
  40368c:	2100      	movs	r1, #0
  40368e:	6461      	str	r1, [r4, #68]	; 0x44
  403690:	4620      	mov	r0, r4
  403692:	9125      	str	r1, [sp, #148]	; 0x94
  403694:	f001 fa12 	bl	404abc <_Balloc>
  403698:	f04f 33ff 	mov.w	r3, #4294967295
  40369c:	930a      	str	r3, [sp, #40]	; 0x28
  40369e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4036a0:	930f      	str	r3, [sp, #60]	; 0x3c
  4036a2:	2301      	movs	r3, #1
  4036a4:	9004      	str	r0, [sp, #16]
  4036a6:	6420      	str	r0, [r4, #64]	; 0x40
  4036a8:	9224      	str	r2, [sp, #144]	; 0x90
  4036aa:	930b      	str	r3, [sp, #44]	; 0x2c
  4036ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4036ae:	2b00      	cmp	r3, #0
  4036b0:	f2c0 80d9 	blt.w	403866 <_dtoa_r+0x3ae>
  4036b4:	9a02      	ldr	r2, [sp, #8]
  4036b6:	2a0e      	cmp	r2, #14
  4036b8:	f300 80d5 	bgt.w	403866 <_dtoa_r+0x3ae>
  4036bc:	4b2d      	ldr	r3, [pc, #180]	; (403774 <_dtoa_r+0x2bc>)
  4036be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4036c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4036ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4036cc:	2b00      	cmp	r3, #0
  4036ce:	f2c0 83ba 	blt.w	403e46 <_dtoa_r+0x98e>
  4036d2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4036d6:	4650      	mov	r0, sl
  4036d8:	462a      	mov	r2, r5
  4036da:	4633      	mov	r3, r6
  4036dc:	4659      	mov	r1, fp
  4036de:	f002 fcd3 	bl	406088 <__aeabi_ddiv>
  4036e2:	f002 fe57 	bl	406394 <__aeabi_d2iz>
  4036e6:	4680      	mov	r8, r0
  4036e8:	f002 fb3e 	bl	405d68 <__aeabi_i2d>
  4036ec:	462a      	mov	r2, r5
  4036ee:	4633      	mov	r3, r6
  4036f0:	f002 fba0 	bl	405e34 <__aeabi_dmul>
  4036f4:	460b      	mov	r3, r1
  4036f6:	4602      	mov	r2, r0
  4036f8:	4659      	mov	r1, fp
  4036fa:	4650      	mov	r0, sl
  4036fc:	f002 f9e6 	bl	405acc <__aeabi_dsub>
  403700:	9d04      	ldr	r5, [sp, #16]
  403702:	f108 0330 	add.w	r3, r8, #48	; 0x30
  403706:	702b      	strb	r3, [r5, #0]
  403708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40370a:	2b01      	cmp	r3, #1
  40370c:	4606      	mov	r6, r0
  40370e:	460f      	mov	r7, r1
  403710:	f105 0501 	add.w	r5, r5, #1
  403714:	d068      	beq.n	4037e8 <_dtoa_r+0x330>
  403716:	2200      	movs	r2, #0
  403718:	4b18      	ldr	r3, [pc, #96]	; (40377c <_dtoa_r+0x2c4>)
  40371a:	f002 fb8b 	bl	405e34 <__aeabi_dmul>
  40371e:	2200      	movs	r2, #0
  403720:	2300      	movs	r3, #0
  403722:	4606      	mov	r6, r0
  403724:	460f      	mov	r7, r1
  403726:	f002 fded 	bl	406304 <__aeabi_dcmpeq>
  40372a:	2800      	cmp	r0, #0
  40372c:	f040 8088 	bne.w	403840 <_dtoa_r+0x388>
  403730:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  403734:	f04f 0a00 	mov.w	sl, #0
  403738:	f8df b040 	ldr.w	fp, [pc, #64]	; 40377c <_dtoa_r+0x2c4>
  40373c:	940c      	str	r4, [sp, #48]	; 0x30
  40373e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  403742:	e028      	b.n	403796 <_dtoa_r+0x2de>
  403744:	f3af 8000 	nop.w
  403748:	636f4361 	.word	0x636f4361
  40374c:	3fd287a7 	.word	0x3fd287a7
  403750:	8b60c8b3 	.word	0x8b60c8b3
  403754:	3fc68a28 	.word	0x3fc68a28
  403758:	509f79fb 	.word	0x509f79fb
  40375c:	3fd34413 	.word	0x3fd34413
  403760:	7ff00000 	.word	0x7ff00000
  403764:	004071d5 	.word	0x004071d5
  403768:	004071f8 	.word	0x004071f8
  40376c:	00407204 	.word	0x00407204
  403770:	3ff80000 	.word	0x3ff80000
  403774:	00407230 	.word	0x00407230
  403778:	004071d4 	.word	0x004071d4
  40377c:	40240000 	.word	0x40240000
  403780:	f002 fb58 	bl	405e34 <__aeabi_dmul>
  403784:	2200      	movs	r2, #0
  403786:	2300      	movs	r3, #0
  403788:	4606      	mov	r6, r0
  40378a:	460f      	mov	r7, r1
  40378c:	f002 fdba 	bl	406304 <__aeabi_dcmpeq>
  403790:	2800      	cmp	r0, #0
  403792:	f040 83c1 	bne.w	403f18 <_dtoa_r+0xa60>
  403796:	4642      	mov	r2, r8
  403798:	464b      	mov	r3, r9
  40379a:	4630      	mov	r0, r6
  40379c:	4639      	mov	r1, r7
  40379e:	f002 fc73 	bl	406088 <__aeabi_ddiv>
  4037a2:	f002 fdf7 	bl	406394 <__aeabi_d2iz>
  4037a6:	4604      	mov	r4, r0
  4037a8:	f002 fade 	bl	405d68 <__aeabi_i2d>
  4037ac:	4642      	mov	r2, r8
  4037ae:	464b      	mov	r3, r9
  4037b0:	f002 fb40 	bl	405e34 <__aeabi_dmul>
  4037b4:	4602      	mov	r2, r0
  4037b6:	460b      	mov	r3, r1
  4037b8:	4630      	mov	r0, r6
  4037ba:	4639      	mov	r1, r7
  4037bc:	f002 f986 	bl	405acc <__aeabi_dsub>
  4037c0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4037c4:	9e04      	ldr	r6, [sp, #16]
  4037c6:	f805 eb01 	strb.w	lr, [r5], #1
  4037ca:	eba5 0e06 	sub.w	lr, r5, r6
  4037ce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4037d0:	45b6      	cmp	lr, r6
  4037d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4037d6:	4652      	mov	r2, sl
  4037d8:	465b      	mov	r3, fp
  4037da:	d1d1      	bne.n	403780 <_dtoa_r+0x2c8>
  4037dc:	46a0      	mov	r8, r4
  4037de:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4037e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4037e4:	4606      	mov	r6, r0
  4037e6:	460f      	mov	r7, r1
  4037e8:	4632      	mov	r2, r6
  4037ea:	463b      	mov	r3, r7
  4037ec:	4630      	mov	r0, r6
  4037ee:	4639      	mov	r1, r7
  4037f0:	f002 f96e 	bl	405ad0 <__adddf3>
  4037f4:	4606      	mov	r6, r0
  4037f6:	460f      	mov	r7, r1
  4037f8:	4602      	mov	r2, r0
  4037fa:	460b      	mov	r3, r1
  4037fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403800:	f002 fd8a 	bl	406318 <__aeabi_dcmplt>
  403804:	b948      	cbnz	r0, 40381a <_dtoa_r+0x362>
  403806:	4632      	mov	r2, r6
  403808:	463b      	mov	r3, r7
  40380a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40380e:	f002 fd79 	bl	406304 <__aeabi_dcmpeq>
  403812:	b1a8      	cbz	r0, 403840 <_dtoa_r+0x388>
  403814:	f018 0f01 	tst.w	r8, #1
  403818:	d012      	beq.n	403840 <_dtoa_r+0x388>
  40381a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40381e:	9a04      	ldr	r2, [sp, #16]
  403820:	1e6b      	subs	r3, r5, #1
  403822:	e004      	b.n	40382e <_dtoa_r+0x376>
  403824:	429a      	cmp	r2, r3
  403826:	f000 8401 	beq.w	40402c <_dtoa_r+0xb74>
  40382a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40382e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403832:	f103 0501 	add.w	r5, r3, #1
  403836:	d0f5      	beq.n	403824 <_dtoa_r+0x36c>
  403838:	f108 0801 	add.w	r8, r8, #1
  40383c:	f883 8000 	strb.w	r8, [r3]
  403840:	4649      	mov	r1, r9
  403842:	4620      	mov	r0, r4
  403844:	f001 f960 	bl	404b08 <_Bfree>
  403848:	2200      	movs	r2, #0
  40384a:	9b02      	ldr	r3, [sp, #8]
  40384c:	702a      	strb	r2, [r5, #0]
  40384e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403850:	3301      	adds	r3, #1
  403852:	6013      	str	r3, [r2, #0]
  403854:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403856:	2b00      	cmp	r3, #0
  403858:	f000 839e 	beq.w	403f98 <_dtoa_r+0xae0>
  40385c:	9804      	ldr	r0, [sp, #16]
  40385e:	601d      	str	r5, [r3, #0]
  403860:	b01b      	add	sp, #108	; 0x6c
  403862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403866:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403868:	2a00      	cmp	r2, #0
  40386a:	d03e      	beq.n	4038ea <_dtoa_r+0x432>
  40386c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40386e:	2a01      	cmp	r2, #1
  403870:	f340 8311 	ble.w	403e96 <_dtoa_r+0x9de>
  403874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403876:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403878:	1e5f      	subs	r7, r3, #1
  40387a:	42ba      	cmp	r2, r7
  40387c:	f2c0 838f 	blt.w	403f9e <_dtoa_r+0xae6>
  403880:	1bd7      	subs	r7, r2, r7
  403882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403884:	2b00      	cmp	r3, #0
  403886:	f2c0 848b 	blt.w	4041a0 <_dtoa_r+0xce8>
  40388a:	9d08      	ldr	r5, [sp, #32]
  40388c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40388e:	9a08      	ldr	r2, [sp, #32]
  403890:	441a      	add	r2, r3
  403892:	9208      	str	r2, [sp, #32]
  403894:	9a06      	ldr	r2, [sp, #24]
  403896:	2101      	movs	r1, #1
  403898:	441a      	add	r2, r3
  40389a:	4620      	mov	r0, r4
  40389c:	9206      	str	r2, [sp, #24]
  40389e:	f001 f9cd 	bl	404c3c <__i2b>
  4038a2:	4606      	mov	r6, r0
  4038a4:	e024      	b.n	4038f0 <_dtoa_r+0x438>
  4038a6:	2301      	movs	r3, #1
  4038a8:	930e      	str	r3, [sp, #56]	; 0x38
  4038aa:	e6af      	b.n	40360c <_dtoa_r+0x154>
  4038ac:	9a08      	ldr	r2, [sp, #32]
  4038ae:	9b02      	ldr	r3, [sp, #8]
  4038b0:	1ad2      	subs	r2, r2, r3
  4038b2:	425b      	negs	r3, r3
  4038b4:	930c      	str	r3, [sp, #48]	; 0x30
  4038b6:	2300      	movs	r3, #0
  4038b8:	9208      	str	r2, [sp, #32]
  4038ba:	930d      	str	r3, [sp, #52]	; 0x34
  4038bc:	e6b8      	b.n	403630 <_dtoa_r+0x178>
  4038be:	f1c7 0301 	rsb	r3, r7, #1
  4038c2:	9308      	str	r3, [sp, #32]
  4038c4:	2300      	movs	r3, #0
  4038c6:	9306      	str	r3, [sp, #24]
  4038c8:	e6a7      	b.n	40361a <_dtoa_r+0x162>
  4038ca:	9d02      	ldr	r5, [sp, #8]
  4038cc:	4628      	mov	r0, r5
  4038ce:	f002 fa4b 	bl	405d68 <__aeabi_i2d>
  4038d2:	4602      	mov	r2, r0
  4038d4:	460b      	mov	r3, r1
  4038d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4038da:	f002 fd13 	bl	406304 <__aeabi_dcmpeq>
  4038de:	2800      	cmp	r0, #0
  4038e0:	f47f ae80 	bne.w	4035e4 <_dtoa_r+0x12c>
  4038e4:	1e6b      	subs	r3, r5, #1
  4038e6:	9302      	str	r3, [sp, #8]
  4038e8:	e67c      	b.n	4035e4 <_dtoa_r+0x12c>
  4038ea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4038ec:	9d08      	ldr	r5, [sp, #32]
  4038ee:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4038f0:	2d00      	cmp	r5, #0
  4038f2:	dd0c      	ble.n	40390e <_dtoa_r+0x456>
  4038f4:	9906      	ldr	r1, [sp, #24]
  4038f6:	2900      	cmp	r1, #0
  4038f8:	460b      	mov	r3, r1
  4038fa:	dd08      	ble.n	40390e <_dtoa_r+0x456>
  4038fc:	42a9      	cmp	r1, r5
  4038fe:	9a08      	ldr	r2, [sp, #32]
  403900:	bfa8      	it	ge
  403902:	462b      	movge	r3, r5
  403904:	1ad2      	subs	r2, r2, r3
  403906:	1aed      	subs	r5, r5, r3
  403908:	1acb      	subs	r3, r1, r3
  40390a:	9208      	str	r2, [sp, #32]
  40390c:	9306      	str	r3, [sp, #24]
  40390e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403910:	b1d3      	cbz	r3, 403948 <_dtoa_r+0x490>
  403912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403914:	2b00      	cmp	r3, #0
  403916:	f000 82b7 	beq.w	403e88 <_dtoa_r+0x9d0>
  40391a:	2f00      	cmp	r7, #0
  40391c:	dd10      	ble.n	403940 <_dtoa_r+0x488>
  40391e:	4631      	mov	r1, r6
  403920:	463a      	mov	r2, r7
  403922:	4620      	mov	r0, r4
  403924:	f001 fa26 	bl	404d74 <__pow5mult>
  403928:	464a      	mov	r2, r9
  40392a:	4601      	mov	r1, r0
  40392c:	4606      	mov	r6, r0
  40392e:	4620      	mov	r0, r4
  403930:	f001 f98e 	bl	404c50 <__multiply>
  403934:	4649      	mov	r1, r9
  403936:	4680      	mov	r8, r0
  403938:	4620      	mov	r0, r4
  40393a:	f001 f8e5 	bl	404b08 <_Bfree>
  40393e:	46c1      	mov	r9, r8
  403940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403942:	1bda      	subs	r2, r3, r7
  403944:	f040 82a1 	bne.w	403e8a <_dtoa_r+0x9d2>
  403948:	2101      	movs	r1, #1
  40394a:	4620      	mov	r0, r4
  40394c:	f001 f976 	bl	404c3c <__i2b>
  403950:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403952:	2b00      	cmp	r3, #0
  403954:	4680      	mov	r8, r0
  403956:	dd1c      	ble.n	403992 <_dtoa_r+0x4da>
  403958:	4601      	mov	r1, r0
  40395a:	461a      	mov	r2, r3
  40395c:	4620      	mov	r0, r4
  40395e:	f001 fa09 	bl	404d74 <__pow5mult>
  403962:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403964:	2b01      	cmp	r3, #1
  403966:	4680      	mov	r8, r0
  403968:	f340 8254 	ble.w	403e14 <_dtoa_r+0x95c>
  40396c:	2300      	movs	r3, #0
  40396e:	930c      	str	r3, [sp, #48]	; 0x30
  403970:	f8d8 3010 	ldr.w	r3, [r8, #16]
  403974:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  403978:	6918      	ldr	r0, [r3, #16]
  40397a:	f001 f90f 	bl	404b9c <__hi0bits>
  40397e:	f1c0 0020 	rsb	r0, r0, #32
  403982:	e010      	b.n	4039a6 <_dtoa_r+0x4ee>
  403984:	f1c3 0520 	rsb	r5, r3, #32
  403988:	fa0a f005 	lsl.w	r0, sl, r5
  40398c:	e674      	b.n	403678 <_dtoa_r+0x1c0>
  40398e:	900e      	str	r0, [sp, #56]	; 0x38
  403990:	e63c      	b.n	40360c <_dtoa_r+0x154>
  403992:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403994:	2b01      	cmp	r3, #1
  403996:	f340 8287 	ble.w	403ea8 <_dtoa_r+0x9f0>
  40399a:	2300      	movs	r3, #0
  40399c:	930c      	str	r3, [sp, #48]	; 0x30
  40399e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4039a0:	2001      	movs	r0, #1
  4039a2:	2b00      	cmp	r3, #0
  4039a4:	d1e4      	bne.n	403970 <_dtoa_r+0x4b8>
  4039a6:	9a06      	ldr	r2, [sp, #24]
  4039a8:	4410      	add	r0, r2
  4039aa:	f010 001f 	ands.w	r0, r0, #31
  4039ae:	f000 80a1 	beq.w	403af4 <_dtoa_r+0x63c>
  4039b2:	f1c0 0320 	rsb	r3, r0, #32
  4039b6:	2b04      	cmp	r3, #4
  4039b8:	f340 849e 	ble.w	4042f8 <_dtoa_r+0xe40>
  4039bc:	9b08      	ldr	r3, [sp, #32]
  4039be:	f1c0 001c 	rsb	r0, r0, #28
  4039c2:	4403      	add	r3, r0
  4039c4:	9308      	str	r3, [sp, #32]
  4039c6:	4613      	mov	r3, r2
  4039c8:	4403      	add	r3, r0
  4039ca:	4405      	add	r5, r0
  4039cc:	9306      	str	r3, [sp, #24]
  4039ce:	9b08      	ldr	r3, [sp, #32]
  4039d0:	2b00      	cmp	r3, #0
  4039d2:	dd05      	ble.n	4039e0 <_dtoa_r+0x528>
  4039d4:	4649      	mov	r1, r9
  4039d6:	461a      	mov	r2, r3
  4039d8:	4620      	mov	r0, r4
  4039da:	f001 fa1b 	bl	404e14 <__lshift>
  4039de:	4681      	mov	r9, r0
  4039e0:	9b06      	ldr	r3, [sp, #24]
  4039e2:	2b00      	cmp	r3, #0
  4039e4:	dd05      	ble.n	4039f2 <_dtoa_r+0x53a>
  4039e6:	4641      	mov	r1, r8
  4039e8:	461a      	mov	r2, r3
  4039ea:	4620      	mov	r0, r4
  4039ec:	f001 fa12 	bl	404e14 <__lshift>
  4039f0:	4680      	mov	r8, r0
  4039f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4039f4:	2b00      	cmp	r3, #0
  4039f6:	f040 8086 	bne.w	403b06 <_dtoa_r+0x64e>
  4039fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4039fc:	2b00      	cmp	r3, #0
  4039fe:	f340 8266 	ble.w	403ece <_dtoa_r+0xa16>
  403a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403a04:	2b00      	cmp	r3, #0
  403a06:	f000 8098 	beq.w	403b3a <_dtoa_r+0x682>
  403a0a:	2d00      	cmp	r5, #0
  403a0c:	dd05      	ble.n	403a1a <_dtoa_r+0x562>
  403a0e:	4631      	mov	r1, r6
  403a10:	462a      	mov	r2, r5
  403a12:	4620      	mov	r0, r4
  403a14:	f001 f9fe 	bl	404e14 <__lshift>
  403a18:	4606      	mov	r6, r0
  403a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403a1c:	2b00      	cmp	r3, #0
  403a1e:	f040 8337 	bne.w	404090 <_dtoa_r+0xbd8>
  403a22:	9606      	str	r6, [sp, #24]
  403a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403a26:	9a04      	ldr	r2, [sp, #16]
  403a28:	f8dd b018 	ldr.w	fp, [sp, #24]
  403a2c:	3b01      	subs	r3, #1
  403a2e:	18d3      	adds	r3, r2, r3
  403a30:	930b      	str	r3, [sp, #44]	; 0x2c
  403a32:	f00a 0301 	and.w	r3, sl, #1
  403a36:	930c      	str	r3, [sp, #48]	; 0x30
  403a38:	4617      	mov	r7, r2
  403a3a:	46c2      	mov	sl, r8
  403a3c:	4651      	mov	r1, sl
  403a3e:	4648      	mov	r0, r9
  403a40:	f7ff fca6 	bl	403390 <quorem>
  403a44:	4631      	mov	r1, r6
  403a46:	4605      	mov	r5, r0
  403a48:	4648      	mov	r0, r9
  403a4a:	f001 fa35 	bl	404eb8 <__mcmp>
  403a4e:	465a      	mov	r2, fp
  403a50:	900a      	str	r0, [sp, #40]	; 0x28
  403a52:	4651      	mov	r1, sl
  403a54:	4620      	mov	r0, r4
  403a56:	f001 fa4b 	bl	404ef0 <__mdiff>
  403a5a:	68c2      	ldr	r2, [r0, #12]
  403a5c:	4680      	mov	r8, r0
  403a5e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  403a62:	2a00      	cmp	r2, #0
  403a64:	f040 822b 	bne.w	403ebe <_dtoa_r+0xa06>
  403a68:	4601      	mov	r1, r0
  403a6a:	4648      	mov	r0, r9
  403a6c:	9308      	str	r3, [sp, #32]
  403a6e:	f001 fa23 	bl	404eb8 <__mcmp>
  403a72:	4641      	mov	r1, r8
  403a74:	9006      	str	r0, [sp, #24]
  403a76:	4620      	mov	r0, r4
  403a78:	f001 f846 	bl	404b08 <_Bfree>
  403a7c:	9a06      	ldr	r2, [sp, #24]
  403a7e:	9b08      	ldr	r3, [sp, #32]
  403a80:	b932      	cbnz	r2, 403a90 <_dtoa_r+0x5d8>
  403a82:	9924      	ldr	r1, [sp, #144]	; 0x90
  403a84:	b921      	cbnz	r1, 403a90 <_dtoa_r+0x5d8>
  403a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403a88:	2a00      	cmp	r2, #0
  403a8a:	f000 83ef 	beq.w	40426c <_dtoa_r+0xdb4>
  403a8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403a90:	990a      	ldr	r1, [sp, #40]	; 0x28
  403a92:	2900      	cmp	r1, #0
  403a94:	f2c0 829f 	blt.w	403fd6 <_dtoa_r+0xb1e>
  403a98:	d105      	bne.n	403aa6 <_dtoa_r+0x5ee>
  403a9a:	9924      	ldr	r1, [sp, #144]	; 0x90
  403a9c:	b919      	cbnz	r1, 403aa6 <_dtoa_r+0x5ee>
  403a9e:	990c      	ldr	r1, [sp, #48]	; 0x30
  403aa0:	2900      	cmp	r1, #0
  403aa2:	f000 8298 	beq.w	403fd6 <_dtoa_r+0xb1e>
  403aa6:	2a00      	cmp	r2, #0
  403aa8:	f300 8306 	bgt.w	4040b8 <_dtoa_r+0xc00>
  403aac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403aae:	703b      	strb	r3, [r7, #0]
  403ab0:	f107 0801 	add.w	r8, r7, #1
  403ab4:	4297      	cmp	r7, r2
  403ab6:	4645      	mov	r5, r8
  403ab8:	f000 830c 	beq.w	4040d4 <_dtoa_r+0xc1c>
  403abc:	4649      	mov	r1, r9
  403abe:	2300      	movs	r3, #0
  403ac0:	220a      	movs	r2, #10
  403ac2:	4620      	mov	r0, r4
  403ac4:	f001 f82a 	bl	404b1c <__multadd>
  403ac8:	455e      	cmp	r6, fp
  403aca:	4681      	mov	r9, r0
  403acc:	4631      	mov	r1, r6
  403ace:	f04f 0300 	mov.w	r3, #0
  403ad2:	f04f 020a 	mov.w	r2, #10
  403ad6:	4620      	mov	r0, r4
  403ad8:	f000 81eb 	beq.w	403eb2 <_dtoa_r+0x9fa>
  403adc:	f001 f81e 	bl	404b1c <__multadd>
  403ae0:	4659      	mov	r1, fp
  403ae2:	4606      	mov	r6, r0
  403ae4:	2300      	movs	r3, #0
  403ae6:	220a      	movs	r2, #10
  403ae8:	4620      	mov	r0, r4
  403aea:	f001 f817 	bl	404b1c <__multadd>
  403aee:	4647      	mov	r7, r8
  403af0:	4683      	mov	fp, r0
  403af2:	e7a3      	b.n	403a3c <_dtoa_r+0x584>
  403af4:	201c      	movs	r0, #28
  403af6:	9b08      	ldr	r3, [sp, #32]
  403af8:	4403      	add	r3, r0
  403afa:	9308      	str	r3, [sp, #32]
  403afc:	9b06      	ldr	r3, [sp, #24]
  403afe:	4403      	add	r3, r0
  403b00:	4405      	add	r5, r0
  403b02:	9306      	str	r3, [sp, #24]
  403b04:	e763      	b.n	4039ce <_dtoa_r+0x516>
  403b06:	4641      	mov	r1, r8
  403b08:	4648      	mov	r0, r9
  403b0a:	f001 f9d5 	bl	404eb8 <__mcmp>
  403b0e:	2800      	cmp	r0, #0
  403b10:	f6bf af73 	bge.w	4039fa <_dtoa_r+0x542>
  403b14:	9f02      	ldr	r7, [sp, #8]
  403b16:	4649      	mov	r1, r9
  403b18:	2300      	movs	r3, #0
  403b1a:	220a      	movs	r2, #10
  403b1c:	4620      	mov	r0, r4
  403b1e:	3f01      	subs	r7, #1
  403b20:	9702      	str	r7, [sp, #8]
  403b22:	f000 fffb 	bl	404b1c <__multadd>
  403b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403b28:	4681      	mov	r9, r0
  403b2a:	2b00      	cmp	r3, #0
  403b2c:	f040 83b6 	bne.w	40429c <_dtoa_r+0xde4>
  403b30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403b32:	2b00      	cmp	r3, #0
  403b34:	f340 83bf 	ble.w	4042b6 <_dtoa_r+0xdfe>
  403b38:	930a      	str	r3, [sp, #40]	; 0x28
  403b3a:	f8dd b010 	ldr.w	fp, [sp, #16]
  403b3e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  403b40:	465d      	mov	r5, fp
  403b42:	e002      	b.n	403b4a <_dtoa_r+0x692>
  403b44:	f000 ffea 	bl	404b1c <__multadd>
  403b48:	4681      	mov	r9, r0
  403b4a:	4641      	mov	r1, r8
  403b4c:	4648      	mov	r0, r9
  403b4e:	f7ff fc1f 	bl	403390 <quorem>
  403b52:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  403b56:	f805 ab01 	strb.w	sl, [r5], #1
  403b5a:	eba5 030b 	sub.w	r3, r5, fp
  403b5e:	42bb      	cmp	r3, r7
  403b60:	f04f 020a 	mov.w	r2, #10
  403b64:	f04f 0300 	mov.w	r3, #0
  403b68:	4649      	mov	r1, r9
  403b6a:	4620      	mov	r0, r4
  403b6c:	dbea      	blt.n	403b44 <_dtoa_r+0x68c>
  403b6e:	9b04      	ldr	r3, [sp, #16]
  403b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403b72:	2a01      	cmp	r2, #1
  403b74:	bfac      	ite	ge
  403b76:	189b      	addge	r3, r3, r2
  403b78:	3301      	addlt	r3, #1
  403b7a:	461d      	mov	r5, r3
  403b7c:	f04f 0b00 	mov.w	fp, #0
  403b80:	4649      	mov	r1, r9
  403b82:	2201      	movs	r2, #1
  403b84:	4620      	mov	r0, r4
  403b86:	f001 f945 	bl	404e14 <__lshift>
  403b8a:	4641      	mov	r1, r8
  403b8c:	4681      	mov	r9, r0
  403b8e:	f001 f993 	bl	404eb8 <__mcmp>
  403b92:	2800      	cmp	r0, #0
  403b94:	f340 823d 	ble.w	404012 <_dtoa_r+0xb5a>
  403b98:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  403b9c:	9904      	ldr	r1, [sp, #16]
  403b9e:	1e6b      	subs	r3, r5, #1
  403ba0:	e004      	b.n	403bac <_dtoa_r+0x6f4>
  403ba2:	428b      	cmp	r3, r1
  403ba4:	f000 81ae 	beq.w	403f04 <_dtoa_r+0xa4c>
  403ba8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  403bac:	2a39      	cmp	r2, #57	; 0x39
  403bae:	f103 0501 	add.w	r5, r3, #1
  403bb2:	d0f6      	beq.n	403ba2 <_dtoa_r+0x6ea>
  403bb4:	3201      	adds	r2, #1
  403bb6:	701a      	strb	r2, [r3, #0]
  403bb8:	4641      	mov	r1, r8
  403bba:	4620      	mov	r0, r4
  403bbc:	f000 ffa4 	bl	404b08 <_Bfree>
  403bc0:	2e00      	cmp	r6, #0
  403bc2:	f43f ae3d 	beq.w	403840 <_dtoa_r+0x388>
  403bc6:	f1bb 0f00 	cmp.w	fp, #0
  403bca:	d005      	beq.n	403bd8 <_dtoa_r+0x720>
  403bcc:	45b3      	cmp	fp, r6
  403bce:	d003      	beq.n	403bd8 <_dtoa_r+0x720>
  403bd0:	4659      	mov	r1, fp
  403bd2:	4620      	mov	r0, r4
  403bd4:	f000 ff98 	bl	404b08 <_Bfree>
  403bd8:	4631      	mov	r1, r6
  403bda:	4620      	mov	r0, r4
  403bdc:	f000 ff94 	bl	404b08 <_Bfree>
  403be0:	e62e      	b.n	403840 <_dtoa_r+0x388>
  403be2:	2300      	movs	r3, #0
  403be4:	930b      	str	r3, [sp, #44]	; 0x2c
  403be6:	9b02      	ldr	r3, [sp, #8]
  403be8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403bea:	4413      	add	r3, r2
  403bec:	930f      	str	r3, [sp, #60]	; 0x3c
  403bee:	3301      	adds	r3, #1
  403bf0:	2b01      	cmp	r3, #1
  403bf2:	461f      	mov	r7, r3
  403bf4:	461e      	mov	r6, r3
  403bf6:	930a      	str	r3, [sp, #40]	; 0x28
  403bf8:	bfb8      	it	lt
  403bfa:	2701      	movlt	r7, #1
  403bfc:	2100      	movs	r1, #0
  403bfe:	2f17      	cmp	r7, #23
  403c00:	6461      	str	r1, [r4, #68]	; 0x44
  403c02:	d90a      	bls.n	403c1a <_dtoa_r+0x762>
  403c04:	2201      	movs	r2, #1
  403c06:	2304      	movs	r3, #4
  403c08:	005b      	lsls	r3, r3, #1
  403c0a:	f103 0014 	add.w	r0, r3, #20
  403c0e:	4287      	cmp	r7, r0
  403c10:	4611      	mov	r1, r2
  403c12:	f102 0201 	add.w	r2, r2, #1
  403c16:	d2f7      	bcs.n	403c08 <_dtoa_r+0x750>
  403c18:	6461      	str	r1, [r4, #68]	; 0x44
  403c1a:	4620      	mov	r0, r4
  403c1c:	f000 ff4e 	bl	404abc <_Balloc>
  403c20:	2e0e      	cmp	r6, #14
  403c22:	9004      	str	r0, [sp, #16]
  403c24:	6420      	str	r0, [r4, #64]	; 0x40
  403c26:	f63f ad41 	bhi.w	4036ac <_dtoa_r+0x1f4>
  403c2a:	2d00      	cmp	r5, #0
  403c2c:	f43f ad3e 	beq.w	4036ac <_dtoa_r+0x1f4>
  403c30:	9902      	ldr	r1, [sp, #8]
  403c32:	2900      	cmp	r1, #0
  403c34:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  403c38:	f340 8202 	ble.w	404040 <_dtoa_r+0xb88>
  403c3c:	4bb8      	ldr	r3, [pc, #736]	; (403f20 <_dtoa_r+0xa68>)
  403c3e:	f001 020f 	and.w	r2, r1, #15
  403c42:	110d      	asrs	r5, r1, #4
  403c44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403c48:	06e9      	lsls	r1, r5, #27
  403c4a:	e9d3 6700 	ldrd	r6, r7, [r3]
  403c4e:	f140 81ae 	bpl.w	403fae <_dtoa_r+0xaf6>
  403c52:	4bb4      	ldr	r3, [pc, #720]	; (403f24 <_dtoa_r+0xa6c>)
  403c54:	4650      	mov	r0, sl
  403c56:	4659      	mov	r1, fp
  403c58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  403c5c:	f002 fa14 	bl	406088 <__aeabi_ddiv>
  403c60:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  403c64:	f005 050f 	and.w	r5, r5, #15
  403c68:	f04f 0a03 	mov.w	sl, #3
  403c6c:	b18d      	cbz	r5, 403c92 <_dtoa_r+0x7da>
  403c6e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 403f24 <_dtoa_r+0xa6c>
  403c72:	07ea      	lsls	r2, r5, #31
  403c74:	d509      	bpl.n	403c8a <_dtoa_r+0x7d2>
  403c76:	4630      	mov	r0, r6
  403c78:	4639      	mov	r1, r7
  403c7a:	e9d8 2300 	ldrd	r2, r3, [r8]
  403c7e:	f002 f8d9 	bl	405e34 <__aeabi_dmul>
  403c82:	f10a 0a01 	add.w	sl, sl, #1
  403c86:	4606      	mov	r6, r0
  403c88:	460f      	mov	r7, r1
  403c8a:	106d      	asrs	r5, r5, #1
  403c8c:	f108 0808 	add.w	r8, r8, #8
  403c90:	d1ef      	bne.n	403c72 <_dtoa_r+0x7ba>
  403c92:	463b      	mov	r3, r7
  403c94:	4632      	mov	r2, r6
  403c96:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  403c9a:	f002 f9f5 	bl	406088 <__aeabi_ddiv>
  403c9e:	4607      	mov	r7, r0
  403ca0:	4688      	mov	r8, r1
  403ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403ca4:	b143      	cbz	r3, 403cb8 <_dtoa_r+0x800>
  403ca6:	2200      	movs	r2, #0
  403ca8:	4b9f      	ldr	r3, [pc, #636]	; (403f28 <_dtoa_r+0xa70>)
  403caa:	4638      	mov	r0, r7
  403cac:	4641      	mov	r1, r8
  403cae:	f002 fb33 	bl	406318 <__aeabi_dcmplt>
  403cb2:	2800      	cmp	r0, #0
  403cb4:	f040 8286 	bne.w	4041c4 <_dtoa_r+0xd0c>
  403cb8:	4650      	mov	r0, sl
  403cba:	f002 f855 	bl	405d68 <__aeabi_i2d>
  403cbe:	463a      	mov	r2, r7
  403cc0:	4643      	mov	r3, r8
  403cc2:	f002 f8b7 	bl	405e34 <__aeabi_dmul>
  403cc6:	4b99      	ldr	r3, [pc, #612]	; (403f2c <_dtoa_r+0xa74>)
  403cc8:	2200      	movs	r2, #0
  403cca:	f001 ff01 	bl	405ad0 <__adddf3>
  403cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403cd0:	4605      	mov	r5, r0
  403cd2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  403cd6:	2b00      	cmp	r3, #0
  403cd8:	f000 813e 	beq.w	403f58 <_dtoa_r+0xaa0>
  403cdc:	9b02      	ldr	r3, [sp, #8]
  403cde:	9315      	str	r3, [sp, #84]	; 0x54
  403ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403ce2:	9312      	str	r3, [sp, #72]	; 0x48
  403ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403ce6:	2b00      	cmp	r3, #0
  403ce8:	f000 81fa 	beq.w	4040e0 <_dtoa_r+0xc28>
  403cec:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403cee:	4b8c      	ldr	r3, [pc, #560]	; (403f20 <_dtoa_r+0xa68>)
  403cf0:	498f      	ldr	r1, [pc, #572]	; (403f30 <_dtoa_r+0xa78>)
  403cf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403cf6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  403cfa:	2000      	movs	r0, #0
  403cfc:	f002 f9c4 	bl	406088 <__aeabi_ddiv>
  403d00:	462a      	mov	r2, r5
  403d02:	4633      	mov	r3, r6
  403d04:	f001 fee2 	bl	405acc <__aeabi_dsub>
  403d08:	4682      	mov	sl, r0
  403d0a:	468b      	mov	fp, r1
  403d0c:	4638      	mov	r0, r7
  403d0e:	4641      	mov	r1, r8
  403d10:	f002 fb40 	bl	406394 <__aeabi_d2iz>
  403d14:	4605      	mov	r5, r0
  403d16:	f002 f827 	bl	405d68 <__aeabi_i2d>
  403d1a:	4602      	mov	r2, r0
  403d1c:	460b      	mov	r3, r1
  403d1e:	4638      	mov	r0, r7
  403d20:	4641      	mov	r1, r8
  403d22:	f001 fed3 	bl	405acc <__aeabi_dsub>
  403d26:	3530      	adds	r5, #48	; 0x30
  403d28:	fa5f f885 	uxtb.w	r8, r5
  403d2c:	9d04      	ldr	r5, [sp, #16]
  403d2e:	4606      	mov	r6, r0
  403d30:	460f      	mov	r7, r1
  403d32:	f885 8000 	strb.w	r8, [r5]
  403d36:	4602      	mov	r2, r0
  403d38:	460b      	mov	r3, r1
  403d3a:	4650      	mov	r0, sl
  403d3c:	4659      	mov	r1, fp
  403d3e:	3501      	adds	r5, #1
  403d40:	f002 fb08 	bl	406354 <__aeabi_dcmpgt>
  403d44:	2800      	cmp	r0, #0
  403d46:	d154      	bne.n	403df2 <_dtoa_r+0x93a>
  403d48:	4632      	mov	r2, r6
  403d4a:	463b      	mov	r3, r7
  403d4c:	2000      	movs	r0, #0
  403d4e:	4976      	ldr	r1, [pc, #472]	; (403f28 <_dtoa_r+0xa70>)
  403d50:	f001 febc 	bl	405acc <__aeabi_dsub>
  403d54:	4602      	mov	r2, r0
  403d56:	460b      	mov	r3, r1
  403d58:	4650      	mov	r0, sl
  403d5a:	4659      	mov	r1, fp
  403d5c:	f002 fafa 	bl	406354 <__aeabi_dcmpgt>
  403d60:	2800      	cmp	r0, #0
  403d62:	f040 8270 	bne.w	404246 <_dtoa_r+0xd8e>
  403d66:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403d68:	2a01      	cmp	r2, #1
  403d6a:	f000 8111 	beq.w	403f90 <_dtoa_r+0xad8>
  403d6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403d70:	9a04      	ldr	r2, [sp, #16]
  403d72:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  403d76:	4413      	add	r3, r2
  403d78:	4699      	mov	r9, r3
  403d7a:	e00d      	b.n	403d98 <_dtoa_r+0x8e0>
  403d7c:	2000      	movs	r0, #0
  403d7e:	496a      	ldr	r1, [pc, #424]	; (403f28 <_dtoa_r+0xa70>)
  403d80:	f001 fea4 	bl	405acc <__aeabi_dsub>
  403d84:	4652      	mov	r2, sl
  403d86:	465b      	mov	r3, fp
  403d88:	f002 fac6 	bl	406318 <__aeabi_dcmplt>
  403d8c:	2800      	cmp	r0, #0
  403d8e:	f040 8258 	bne.w	404242 <_dtoa_r+0xd8a>
  403d92:	454d      	cmp	r5, r9
  403d94:	f000 80fa 	beq.w	403f8c <_dtoa_r+0xad4>
  403d98:	4650      	mov	r0, sl
  403d9a:	4659      	mov	r1, fp
  403d9c:	2200      	movs	r2, #0
  403d9e:	4b65      	ldr	r3, [pc, #404]	; (403f34 <_dtoa_r+0xa7c>)
  403da0:	f002 f848 	bl	405e34 <__aeabi_dmul>
  403da4:	2200      	movs	r2, #0
  403da6:	4b63      	ldr	r3, [pc, #396]	; (403f34 <_dtoa_r+0xa7c>)
  403da8:	4682      	mov	sl, r0
  403daa:	468b      	mov	fp, r1
  403dac:	4630      	mov	r0, r6
  403dae:	4639      	mov	r1, r7
  403db0:	f002 f840 	bl	405e34 <__aeabi_dmul>
  403db4:	460f      	mov	r7, r1
  403db6:	4606      	mov	r6, r0
  403db8:	f002 faec 	bl	406394 <__aeabi_d2iz>
  403dbc:	4680      	mov	r8, r0
  403dbe:	f001 ffd3 	bl	405d68 <__aeabi_i2d>
  403dc2:	4602      	mov	r2, r0
  403dc4:	460b      	mov	r3, r1
  403dc6:	4630      	mov	r0, r6
  403dc8:	4639      	mov	r1, r7
  403dca:	f001 fe7f 	bl	405acc <__aeabi_dsub>
  403dce:	f108 0830 	add.w	r8, r8, #48	; 0x30
  403dd2:	fa5f f888 	uxtb.w	r8, r8
  403dd6:	4652      	mov	r2, sl
  403dd8:	465b      	mov	r3, fp
  403dda:	f805 8b01 	strb.w	r8, [r5], #1
  403dde:	4606      	mov	r6, r0
  403de0:	460f      	mov	r7, r1
  403de2:	f002 fa99 	bl	406318 <__aeabi_dcmplt>
  403de6:	4632      	mov	r2, r6
  403de8:	463b      	mov	r3, r7
  403dea:	2800      	cmp	r0, #0
  403dec:	d0c6      	beq.n	403d7c <_dtoa_r+0x8c4>
  403dee:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  403df2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403df4:	9302      	str	r3, [sp, #8]
  403df6:	e523      	b.n	403840 <_dtoa_r+0x388>
  403df8:	2300      	movs	r3, #0
  403dfa:	930b      	str	r3, [sp, #44]	; 0x2c
  403dfc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403dfe:	2b00      	cmp	r3, #0
  403e00:	f340 80dc 	ble.w	403fbc <_dtoa_r+0xb04>
  403e04:	461f      	mov	r7, r3
  403e06:	461e      	mov	r6, r3
  403e08:	930f      	str	r3, [sp, #60]	; 0x3c
  403e0a:	930a      	str	r3, [sp, #40]	; 0x28
  403e0c:	e6f6      	b.n	403bfc <_dtoa_r+0x744>
  403e0e:	2301      	movs	r3, #1
  403e10:	930b      	str	r3, [sp, #44]	; 0x2c
  403e12:	e7f3      	b.n	403dfc <_dtoa_r+0x944>
  403e14:	f1ba 0f00 	cmp.w	sl, #0
  403e18:	f47f ada8 	bne.w	40396c <_dtoa_r+0x4b4>
  403e1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  403e20:	2b00      	cmp	r3, #0
  403e22:	f47f adba 	bne.w	40399a <_dtoa_r+0x4e2>
  403e26:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  403e2a:	0d3f      	lsrs	r7, r7, #20
  403e2c:	053f      	lsls	r7, r7, #20
  403e2e:	2f00      	cmp	r7, #0
  403e30:	f000 820d 	beq.w	40424e <_dtoa_r+0xd96>
  403e34:	9b08      	ldr	r3, [sp, #32]
  403e36:	3301      	adds	r3, #1
  403e38:	9308      	str	r3, [sp, #32]
  403e3a:	9b06      	ldr	r3, [sp, #24]
  403e3c:	3301      	adds	r3, #1
  403e3e:	9306      	str	r3, [sp, #24]
  403e40:	2301      	movs	r3, #1
  403e42:	930c      	str	r3, [sp, #48]	; 0x30
  403e44:	e5ab      	b.n	40399e <_dtoa_r+0x4e6>
  403e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403e48:	2b00      	cmp	r3, #0
  403e4a:	f73f ac42 	bgt.w	4036d2 <_dtoa_r+0x21a>
  403e4e:	f040 8221 	bne.w	404294 <_dtoa_r+0xddc>
  403e52:	2200      	movs	r2, #0
  403e54:	4b38      	ldr	r3, [pc, #224]	; (403f38 <_dtoa_r+0xa80>)
  403e56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403e5a:	f001 ffeb 	bl	405e34 <__aeabi_dmul>
  403e5e:	4652      	mov	r2, sl
  403e60:	465b      	mov	r3, fp
  403e62:	f002 fa6d 	bl	406340 <__aeabi_dcmpge>
  403e66:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  403e6a:	4646      	mov	r6, r8
  403e6c:	2800      	cmp	r0, #0
  403e6e:	d041      	beq.n	403ef4 <_dtoa_r+0xa3c>
  403e70:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403e72:	9d04      	ldr	r5, [sp, #16]
  403e74:	43db      	mvns	r3, r3
  403e76:	9302      	str	r3, [sp, #8]
  403e78:	4641      	mov	r1, r8
  403e7a:	4620      	mov	r0, r4
  403e7c:	f000 fe44 	bl	404b08 <_Bfree>
  403e80:	2e00      	cmp	r6, #0
  403e82:	f43f acdd 	beq.w	403840 <_dtoa_r+0x388>
  403e86:	e6a7      	b.n	403bd8 <_dtoa_r+0x720>
  403e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403e8a:	4649      	mov	r1, r9
  403e8c:	4620      	mov	r0, r4
  403e8e:	f000 ff71 	bl	404d74 <__pow5mult>
  403e92:	4681      	mov	r9, r0
  403e94:	e558      	b.n	403948 <_dtoa_r+0x490>
  403e96:	9a14      	ldr	r2, [sp, #80]	; 0x50
  403e98:	2a00      	cmp	r2, #0
  403e9a:	f000 8187 	beq.w	4041ac <_dtoa_r+0xcf4>
  403e9e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  403ea2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403ea4:	9d08      	ldr	r5, [sp, #32]
  403ea6:	e4f2      	b.n	40388e <_dtoa_r+0x3d6>
  403ea8:	f1ba 0f00 	cmp.w	sl, #0
  403eac:	f47f ad75 	bne.w	40399a <_dtoa_r+0x4e2>
  403eb0:	e7b4      	b.n	403e1c <_dtoa_r+0x964>
  403eb2:	f000 fe33 	bl	404b1c <__multadd>
  403eb6:	4647      	mov	r7, r8
  403eb8:	4606      	mov	r6, r0
  403eba:	4683      	mov	fp, r0
  403ebc:	e5be      	b.n	403a3c <_dtoa_r+0x584>
  403ebe:	4601      	mov	r1, r0
  403ec0:	4620      	mov	r0, r4
  403ec2:	9306      	str	r3, [sp, #24]
  403ec4:	f000 fe20 	bl	404b08 <_Bfree>
  403ec8:	2201      	movs	r2, #1
  403eca:	9b06      	ldr	r3, [sp, #24]
  403ecc:	e5e0      	b.n	403a90 <_dtoa_r+0x5d8>
  403ece:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ed0:	2b02      	cmp	r3, #2
  403ed2:	f77f ad96 	ble.w	403a02 <_dtoa_r+0x54a>
  403ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403ed8:	2b00      	cmp	r3, #0
  403eda:	d1c9      	bne.n	403e70 <_dtoa_r+0x9b8>
  403edc:	4641      	mov	r1, r8
  403ede:	2205      	movs	r2, #5
  403ee0:	4620      	mov	r0, r4
  403ee2:	f000 fe1b 	bl	404b1c <__multadd>
  403ee6:	4601      	mov	r1, r0
  403ee8:	4680      	mov	r8, r0
  403eea:	4648      	mov	r0, r9
  403eec:	f000 ffe4 	bl	404eb8 <__mcmp>
  403ef0:	2800      	cmp	r0, #0
  403ef2:	ddbd      	ble.n	403e70 <_dtoa_r+0x9b8>
  403ef4:	9a02      	ldr	r2, [sp, #8]
  403ef6:	9904      	ldr	r1, [sp, #16]
  403ef8:	2331      	movs	r3, #49	; 0x31
  403efa:	3201      	adds	r2, #1
  403efc:	9202      	str	r2, [sp, #8]
  403efe:	700b      	strb	r3, [r1, #0]
  403f00:	1c4d      	adds	r5, r1, #1
  403f02:	e7b9      	b.n	403e78 <_dtoa_r+0x9c0>
  403f04:	9a02      	ldr	r2, [sp, #8]
  403f06:	3201      	adds	r2, #1
  403f08:	9202      	str	r2, [sp, #8]
  403f0a:	9a04      	ldr	r2, [sp, #16]
  403f0c:	2331      	movs	r3, #49	; 0x31
  403f0e:	7013      	strb	r3, [r2, #0]
  403f10:	e652      	b.n	403bb8 <_dtoa_r+0x700>
  403f12:	2301      	movs	r3, #1
  403f14:	930b      	str	r3, [sp, #44]	; 0x2c
  403f16:	e666      	b.n	403be6 <_dtoa_r+0x72e>
  403f18:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  403f1c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403f1e:	e48f      	b.n	403840 <_dtoa_r+0x388>
  403f20:	00407230 	.word	0x00407230
  403f24:	00407208 	.word	0x00407208
  403f28:	3ff00000 	.word	0x3ff00000
  403f2c:	401c0000 	.word	0x401c0000
  403f30:	3fe00000 	.word	0x3fe00000
  403f34:	40240000 	.word	0x40240000
  403f38:	40140000 	.word	0x40140000
  403f3c:	4650      	mov	r0, sl
  403f3e:	f001 ff13 	bl	405d68 <__aeabi_i2d>
  403f42:	463a      	mov	r2, r7
  403f44:	4643      	mov	r3, r8
  403f46:	f001 ff75 	bl	405e34 <__aeabi_dmul>
  403f4a:	2200      	movs	r2, #0
  403f4c:	4bc1      	ldr	r3, [pc, #772]	; (404254 <_dtoa_r+0xd9c>)
  403f4e:	f001 fdbf 	bl	405ad0 <__adddf3>
  403f52:	4605      	mov	r5, r0
  403f54:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  403f58:	4641      	mov	r1, r8
  403f5a:	2200      	movs	r2, #0
  403f5c:	4bbe      	ldr	r3, [pc, #760]	; (404258 <_dtoa_r+0xda0>)
  403f5e:	4638      	mov	r0, r7
  403f60:	f001 fdb4 	bl	405acc <__aeabi_dsub>
  403f64:	462a      	mov	r2, r5
  403f66:	4633      	mov	r3, r6
  403f68:	4682      	mov	sl, r0
  403f6a:	468b      	mov	fp, r1
  403f6c:	f002 f9f2 	bl	406354 <__aeabi_dcmpgt>
  403f70:	4680      	mov	r8, r0
  403f72:	2800      	cmp	r0, #0
  403f74:	f040 8110 	bne.w	404198 <_dtoa_r+0xce0>
  403f78:	462a      	mov	r2, r5
  403f7a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  403f7e:	4650      	mov	r0, sl
  403f80:	4659      	mov	r1, fp
  403f82:	f002 f9c9 	bl	406318 <__aeabi_dcmplt>
  403f86:	b118      	cbz	r0, 403f90 <_dtoa_r+0xad8>
  403f88:	4646      	mov	r6, r8
  403f8a:	e771      	b.n	403e70 <_dtoa_r+0x9b8>
  403f8c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  403f90:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  403f94:	f7ff bb8a 	b.w	4036ac <_dtoa_r+0x1f4>
  403f98:	9804      	ldr	r0, [sp, #16]
  403f9a:	f7ff babb 	b.w	403514 <_dtoa_r+0x5c>
  403f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403fa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403fa2:	970c      	str	r7, [sp, #48]	; 0x30
  403fa4:	1afb      	subs	r3, r7, r3
  403fa6:	441a      	add	r2, r3
  403fa8:	920d      	str	r2, [sp, #52]	; 0x34
  403faa:	2700      	movs	r7, #0
  403fac:	e469      	b.n	403882 <_dtoa_r+0x3ca>
  403fae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  403fb2:	f04f 0a02 	mov.w	sl, #2
  403fb6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  403fba:	e657      	b.n	403c6c <_dtoa_r+0x7b4>
  403fbc:	2100      	movs	r1, #0
  403fbe:	2301      	movs	r3, #1
  403fc0:	6461      	str	r1, [r4, #68]	; 0x44
  403fc2:	4620      	mov	r0, r4
  403fc4:	9325      	str	r3, [sp, #148]	; 0x94
  403fc6:	f000 fd79 	bl	404abc <_Balloc>
  403fca:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403fcc:	9004      	str	r0, [sp, #16]
  403fce:	6420      	str	r0, [r4, #64]	; 0x40
  403fd0:	930a      	str	r3, [sp, #40]	; 0x28
  403fd2:	930f      	str	r3, [sp, #60]	; 0x3c
  403fd4:	e629      	b.n	403c2a <_dtoa_r+0x772>
  403fd6:	2a00      	cmp	r2, #0
  403fd8:	46d0      	mov	r8, sl
  403fda:	f8cd b018 	str.w	fp, [sp, #24]
  403fde:	469a      	mov	sl, r3
  403fe0:	dd11      	ble.n	404006 <_dtoa_r+0xb4e>
  403fe2:	4649      	mov	r1, r9
  403fe4:	2201      	movs	r2, #1
  403fe6:	4620      	mov	r0, r4
  403fe8:	f000 ff14 	bl	404e14 <__lshift>
  403fec:	4641      	mov	r1, r8
  403fee:	4681      	mov	r9, r0
  403ff0:	f000 ff62 	bl	404eb8 <__mcmp>
  403ff4:	2800      	cmp	r0, #0
  403ff6:	f340 8146 	ble.w	404286 <_dtoa_r+0xdce>
  403ffa:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  403ffe:	f000 8106 	beq.w	40420e <_dtoa_r+0xd56>
  404002:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  404006:	46b3      	mov	fp, r6
  404008:	f887 a000 	strb.w	sl, [r7]
  40400c:	1c7d      	adds	r5, r7, #1
  40400e:	9e06      	ldr	r6, [sp, #24]
  404010:	e5d2      	b.n	403bb8 <_dtoa_r+0x700>
  404012:	d104      	bne.n	40401e <_dtoa_r+0xb66>
  404014:	f01a 0f01 	tst.w	sl, #1
  404018:	d001      	beq.n	40401e <_dtoa_r+0xb66>
  40401a:	e5bd      	b.n	403b98 <_dtoa_r+0x6e0>
  40401c:	4615      	mov	r5, r2
  40401e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404022:	2b30      	cmp	r3, #48	; 0x30
  404024:	f105 32ff 	add.w	r2, r5, #4294967295
  404028:	d0f8      	beq.n	40401c <_dtoa_r+0xb64>
  40402a:	e5c5      	b.n	403bb8 <_dtoa_r+0x700>
  40402c:	9904      	ldr	r1, [sp, #16]
  40402e:	2230      	movs	r2, #48	; 0x30
  404030:	700a      	strb	r2, [r1, #0]
  404032:	9a02      	ldr	r2, [sp, #8]
  404034:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404038:	3201      	adds	r2, #1
  40403a:	9202      	str	r2, [sp, #8]
  40403c:	f7ff bbfc 	b.w	403838 <_dtoa_r+0x380>
  404040:	f000 80bb 	beq.w	4041ba <_dtoa_r+0xd02>
  404044:	9b02      	ldr	r3, [sp, #8]
  404046:	425d      	negs	r5, r3
  404048:	4b84      	ldr	r3, [pc, #528]	; (40425c <_dtoa_r+0xda4>)
  40404a:	f005 020f 	and.w	r2, r5, #15
  40404e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404052:	e9d3 2300 	ldrd	r2, r3, [r3]
  404056:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40405a:	f001 feeb 	bl	405e34 <__aeabi_dmul>
  40405e:	112d      	asrs	r5, r5, #4
  404060:	4607      	mov	r7, r0
  404062:	4688      	mov	r8, r1
  404064:	f000 812c 	beq.w	4042c0 <_dtoa_r+0xe08>
  404068:	4e7d      	ldr	r6, [pc, #500]	; (404260 <_dtoa_r+0xda8>)
  40406a:	f04f 0a02 	mov.w	sl, #2
  40406e:	07eb      	lsls	r3, r5, #31
  404070:	d509      	bpl.n	404086 <_dtoa_r+0xbce>
  404072:	4638      	mov	r0, r7
  404074:	4641      	mov	r1, r8
  404076:	e9d6 2300 	ldrd	r2, r3, [r6]
  40407a:	f001 fedb 	bl	405e34 <__aeabi_dmul>
  40407e:	f10a 0a01 	add.w	sl, sl, #1
  404082:	4607      	mov	r7, r0
  404084:	4688      	mov	r8, r1
  404086:	106d      	asrs	r5, r5, #1
  404088:	f106 0608 	add.w	r6, r6, #8
  40408c:	d1ef      	bne.n	40406e <_dtoa_r+0xbb6>
  40408e:	e608      	b.n	403ca2 <_dtoa_r+0x7ea>
  404090:	6871      	ldr	r1, [r6, #4]
  404092:	4620      	mov	r0, r4
  404094:	f000 fd12 	bl	404abc <_Balloc>
  404098:	6933      	ldr	r3, [r6, #16]
  40409a:	3302      	adds	r3, #2
  40409c:	009a      	lsls	r2, r3, #2
  40409e:	4605      	mov	r5, r0
  4040a0:	f106 010c 	add.w	r1, r6, #12
  4040a4:	300c      	adds	r0, #12
  4040a6:	f000 fc63 	bl	404970 <memcpy>
  4040aa:	4629      	mov	r1, r5
  4040ac:	2201      	movs	r2, #1
  4040ae:	4620      	mov	r0, r4
  4040b0:	f000 feb0 	bl	404e14 <__lshift>
  4040b4:	9006      	str	r0, [sp, #24]
  4040b6:	e4b5      	b.n	403a24 <_dtoa_r+0x56c>
  4040b8:	2b39      	cmp	r3, #57	; 0x39
  4040ba:	f8cd b018 	str.w	fp, [sp, #24]
  4040be:	46d0      	mov	r8, sl
  4040c0:	f000 80a5 	beq.w	40420e <_dtoa_r+0xd56>
  4040c4:	f103 0a01 	add.w	sl, r3, #1
  4040c8:	46b3      	mov	fp, r6
  4040ca:	f887 a000 	strb.w	sl, [r7]
  4040ce:	1c7d      	adds	r5, r7, #1
  4040d0:	9e06      	ldr	r6, [sp, #24]
  4040d2:	e571      	b.n	403bb8 <_dtoa_r+0x700>
  4040d4:	465a      	mov	r2, fp
  4040d6:	46d0      	mov	r8, sl
  4040d8:	46b3      	mov	fp, r6
  4040da:	469a      	mov	sl, r3
  4040dc:	4616      	mov	r6, r2
  4040de:	e54f      	b.n	403b80 <_dtoa_r+0x6c8>
  4040e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4040e2:	495e      	ldr	r1, [pc, #376]	; (40425c <_dtoa_r+0xda4>)
  4040e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4040e8:	462a      	mov	r2, r5
  4040ea:	4633      	mov	r3, r6
  4040ec:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4040f0:	f001 fea0 	bl	405e34 <__aeabi_dmul>
  4040f4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4040f8:	4638      	mov	r0, r7
  4040fa:	4641      	mov	r1, r8
  4040fc:	f002 f94a 	bl	406394 <__aeabi_d2iz>
  404100:	4605      	mov	r5, r0
  404102:	f001 fe31 	bl	405d68 <__aeabi_i2d>
  404106:	460b      	mov	r3, r1
  404108:	4602      	mov	r2, r0
  40410a:	4641      	mov	r1, r8
  40410c:	4638      	mov	r0, r7
  40410e:	f001 fcdd 	bl	405acc <__aeabi_dsub>
  404112:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404114:	460f      	mov	r7, r1
  404116:	9904      	ldr	r1, [sp, #16]
  404118:	3530      	adds	r5, #48	; 0x30
  40411a:	2b01      	cmp	r3, #1
  40411c:	700d      	strb	r5, [r1, #0]
  40411e:	4606      	mov	r6, r0
  404120:	f101 0501 	add.w	r5, r1, #1
  404124:	d026      	beq.n	404174 <_dtoa_r+0xcbc>
  404126:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404128:	9a04      	ldr	r2, [sp, #16]
  40412a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 404268 <_dtoa_r+0xdb0>
  40412e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  404132:	4413      	add	r3, r2
  404134:	f04f 0a00 	mov.w	sl, #0
  404138:	4699      	mov	r9, r3
  40413a:	4652      	mov	r2, sl
  40413c:	465b      	mov	r3, fp
  40413e:	4630      	mov	r0, r6
  404140:	4639      	mov	r1, r7
  404142:	f001 fe77 	bl	405e34 <__aeabi_dmul>
  404146:	460f      	mov	r7, r1
  404148:	4606      	mov	r6, r0
  40414a:	f002 f923 	bl	406394 <__aeabi_d2iz>
  40414e:	4680      	mov	r8, r0
  404150:	f001 fe0a 	bl	405d68 <__aeabi_i2d>
  404154:	f108 0830 	add.w	r8, r8, #48	; 0x30
  404158:	4602      	mov	r2, r0
  40415a:	460b      	mov	r3, r1
  40415c:	4630      	mov	r0, r6
  40415e:	4639      	mov	r1, r7
  404160:	f001 fcb4 	bl	405acc <__aeabi_dsub>
  404164:	f805 8b01 	strb.w	r8, [r5], #1
  404168:	454d      	cmp	r5, r9
  40416a:	4606      	mov	r6, r0
  40416c:	460f      	mov	r7, r1
  40416e:	d1e4      	bne.n	40413a <_dtoa_r+0xc82>
  404170:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404174:	4b3b      	ldr	r3, [pc, #236]	; (404264 <_dtoa_r+0xdac>)
  404176:	2200      	movs	r2, #0
  404178:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40417c:	f001 fca8 	bl	405ad0 <__adddf3>
  404180:	4632      	mov	r2, r6
  404182:	463b      	mov	r3, r7
  404184:	f002 f8c8 	bl	406318 <__aeabi_dcmplt>
  404188:	2800      	cmp	r0, #0
  40418a:	d046      	beq.n	40421a <_dtoa_r+0xd62>
  40418c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40418e:	9302      	str	r3, [sp, #8]
  404190:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404194:	f7ff bb43 	b.w	40381e <_dtoa_r+0x366>
  404198:	f04f 0800 	mov.w	r8, #0
  40419c:	4646      	mov	r6, r8
  40419e:	e6a9      	b.n	403ef4 <_dtoa_r+0xa3c>
  4041a0:	9b08      	ldr	r3, [sp, #32]
  4041a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4041a4:	1a9d      	subs	r5, r3, r2
  4041a6:	2300      	movs	r3, #0
  4041a8:	f7ff bb71 	b.w	40388e <_dtoa_r+0x3d6>
  4041ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4041ae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4041b0:	9d08      	ldr	r5, [sp, #32]
  4041b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4041b6:	f7ff bb6a 	b.w	40388e <_dtoa_r+0x3d6>
  4041ba:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4041be:	f04f 0a02 	mov.w	sl, #2
  4041c2:	e56e      	b.n	403ca2 <_dtoa_r+0x7ea>
  4041c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4041c6:	2b00      	cmp	r3, #0
  4041c8:	f43f aeb8 	beq.w	403f3c <_dtoa_r+0xa84>
  4041cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4041ce:	2b00      	cmp	r3, #0
  4041d0:	f77f aede 	ble.w	403f90 <_dtoa_r+0xad8>
  4041d4:	2200      	movs	r2, #0
  4041d6:	4b24      	ldr	r3, [pc, #144]	; (404268 <_dtoa_r+0xdb0>)
  4041d8:	4638      	mov	r0, r7
  4041da:	4641      	mov	r1, r8
  4041dc:	f001 fe2a 	bl	405e34 <__aeabi_dmul>
  4041e0:	4607      	mov	r7, r0
  4041e2:	4688      	mov	r8, r1
  4041e4:	f10a 0001 	add.w	r0, sl, #1
  4041e8:	f001 fdbe 	bl	405d68 <__aeabi_i2d>
  4041ec:	463a      	mov	r2, r7
  4041ee:	4643      	mov	r3, r8
  4041f0:	f001 fe20 	bl	405e34 <__aeabi_dmul>
  4041f4:	2200      	movs	r2, #0
  4041f6:	4b17      	ldr	r3, [pc, #92]	; (404254 <_dtoa_r+0xd9c>)
  4041f8:	f001 fc6a 	bl	405ad0 <__adddf3>
  4041fc:	9a02      	ldr	r2, [sp, #8]
  4041fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404200:	9312      	str	r3, [sp, #72]	; 0x48
  404202:	3a01      	subs	r2, #1
  404204:	4605      	mov	r5, r0
  404206:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40420a:	9215      	str	r2, [sp, #84]	; 0x54
  40420c:	e56a      	b.n	403ce4 <_dtoa_r+0x82c>
  40420e:	2239      	movs	r2, #57	; 0x39
  404210:	46b3      	mov	fp, r6
  404212:	703a      	strb	r2, [r7, #0]
  404214:	9e06      	ldr	r6, [sp, #24]
  404216:	1c7d      	adds	r5, r7, #1
  404218:	e4c0      	b.n	403b9c <_dtoa_r+0x6e4>
  40421a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40421e:	2000      	movs	r0, #0
  404220:	4910      	ldr	r1, [pc, #64]	; (404264 <_dtoa_r+0xdac>)
  404222:	f001 fc53 	bl	405acc <__aeabi_dsub>
  404226:	4632      	mov	r2, r6
  404228:	463b      	mov	r3, r7
  40422a:	f002 f893 	bl	406354 <__aeabi_dcmpgt>
  40422e:	b908      	cbnz	r0, 404234 <_dtoa_r+0xd7c>
  404230:	e6ae      	b.n	403f90 <_dtoa_r+0xad8>
  404232:	4615      	mov	r5, r2
  404234:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404238:	2b30      	cmp	r3, #48	; 0x30
  40423a:	f105 32ff 	add.w	r2, r5, #4294967295
  40423e:	d0f8      	beq.n	404232 <_dtoa_r+0xd7a>
  404240:	e5d7      	b.n	403df2 <_dtoa_r+0x93a>
  404242:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404246:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404248:	9302      	str	r3, [sp, #8]
  40424a:	f7ff bae8 	b.w	40381e <_dtoa_r+0x366>
  40424e:	970c      	str	r7, [sp, #48]	; 0x30
  404250:	f7ff bba5 	b.w	40399e <_dtoa_r+0x4e6>
  404254:	401c0000 	.word	0x401c0000
  404258:	40140000 	.word	0x40140000
  40425c:	00407230 	.word	0x00407230
  404260:	00407208 	.word	0x00407208
  404264:	3fe00000 	.word	0x3fe00000
  404268:	40240000 	.word	0x40240000
  40426c:	2b39      	cmp	r3, #57	; 0x39
  40426e:	f8cd b018 	str.w	fp, [sp, #24]
  404272:	46d0      	mov	r8, sl
  404274:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404278:	469a      	mov	sl, r3
  40427a:	d0c8      	beq.n	40420e <_dtoa_r+0xd56>
  40427c:	f1bb 0f00 	cmp.w	fp, #0
  404280:	f73f aebf 	bgt.w	404002 <_dtoa_r+0xb4a>
  404284:	e6bf      	b.n	404006 <_dtoa_r+0xb4e>
  404286:	f47f aebe 	bne.w	404006 <_dtoa_r+0xb4e>
  40428a:	f01a 0f01 	tst.w	sl, #1
  40428e:	f43f aeba 	beq.w	404006 <_dtoa_r+0xb4e>
  404292:	e6b2      	b.n	403ffa <_dtoa_r+0xb42>
  404294:	f04f 0800 	mov.w	r8, #0
  404298:	4646      	mov	r6, r8
  40429a:	e5e9      	b.n	403e70 <_dtoa_r+0x9b8>
  40429c:	4631      	mov	r1, r6
  40429e:	2300      	movs	r3, #0
  4042a0:	220a      	movs	r2, #10
  4042a2:	4620      	mov	r0, r4
  4042a4:	f000 fc3a 	bl	404b1c <__multadd>
  4042a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4042aa:	2b00      	cmp	r3, #0
  4042ac:	4606      	mov	r6, r0
  4042ae:	dd0a      	ble.n	4042c6 <_dtoa_r+0xe0e>
  4042b0:	930a      	str	r3, [sp, #40]	; 0x28
  4042b2:	f7ff bbaa 	b.w	403a0a <_dtoa_r+0x552>
  4042b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4042b8:	2b02      	cmp	r3, #2
  4042ba:	dc23      	bgt.n	404304 <_dtoa_r+0xe4c>
  4042bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4042be:	e43b      	b.n	403b38 <_dtoa_r+0x680>
  4042c0:	f04f 0a02 	mov.w	sl, #2
  4042c4:	e4ed      	b.n	403ca2 <_dtoa_r+0x7ea>
  4042c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4042c8:	2b02      	cmp	r3, #2
  4042ca:	dc1b      	bgt.n	404304 <_dtoa_r+0xe4c>
  4042cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4042ce:	e7ef      	b.n	4042b0 <_dtoa_r+0xdf8>
  4042d0:	2500      	movs	r5, #0
  4042d2:	6465      	str	r5, [r4, #68]	; 0x44
  4042d4:	4629      	mov	r1, r5
  4042d6:	4620      	mov	r0, r4
  4042d8:	f000 fbf0 	bl	404abc <_Balloc>
  4042dc:	f04f 33ff 	mov.w	r3, #4294967295
  4042e0:	930a      	str	r3, [sp, #40]	; 0x28
  4042e2:	930f      	str	r3, [sp, #60]	; 0x3c
  4042e4:	2301      	movs	r3, #1
  4042e6:	9004      	str	r0, [sp, #16]
  4042e8:	9525      	str	r5, [sp, #148]	; 0x94
  4042ea:	6420      	str	r0, [r4, #64]	; 0x40
  4042ec:	930b      	str	r3, [sp, #44]	; 0x2c
  4042ee:	f7ff b9dd 	b.w	4036ac <_dtoa_r+0x1f4>
  4042f2:	2501      	movs	r5, #1
  4042f4:	f7ff b9a5 	b.w	403642 <_dtoa_r+0x18a>
  4042f8:	f43f ab69 	beq.w	4039ce <_dtoa_r+0x516>
  4042fc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  404300:	f7ff bbf9 	b.w	403af6 <_dtoa_r+0x63e>
  404304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404306:	930a      	str	r3, [sp, #40]	; 0x28
  404308:	e5e5      	b.n	403ed6 <_dtoa_r+0xa1e>
  40430a:	bf00      	nop

0040430c <__libc_fini_array>:
  40430c:	b538      	push	{r3, r4, r5, lr}
  40430e:	4c0a      	ldr	r4, [pc, #40]	; (404338 <__libc_fini_array+0x2c>)
  404310:	4d0a      	ldr	r5, [pc, #40]	; (40433c <__libc_fini_array+0x30>)
  404312:	1b64      	subs	r4, r4, r5
  404314:	10a4      	asrs	r4, r4, #2
  404316:	d00a      	beq.n	40432e <__libc_fini_array+0x22>
  404318:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40431c:	3b01      	subs	r3, #1
  40431e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404322:	3c01      	subs	r4, #1
  404324:	f855 3904 	ldr.w	r3, [r5], #-4
  404328:	4798      	blx	r3
  40432a:	2c00      	cmp	r4, #0
  40432c:	d1f9      	bne.n	404322 <__libc_fini_array+0x16>
  40432e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404332:	f003 b87b 	b.w	40742c <_fini>
  404336:	bf00      	nop
  404338:	0040743c 	.word	0x0040743c
  40433c:	00407438 	.word	0x00407438

00404340 <_localeconv_r>:
  404340:	4a04      	ldr	r2, [pc, #16]	; (404354 <_localeconv_r+0x14>)
  404342:	4b05      	ldr	r3, [pc, #20]	; (404358 <_localeconv_r+0x18>)
  404344:	6812      	ldr	r2, [r2, #0]
  404346:	6b50      	ldr	r0, [r2, #52]	; 0x34
  404348:	2800      	cmp	r0, #0
  40434a:	bf08      	it	eq
  40434c:	4618      	moveq	r0, r3
  40434e:	30f0      	adds	r0, #240	; 0xf0
  404350:	4770      	bx	lr
  404352:	bf00      	nop
  404354:	20400024 	.word	0x20400024
  404358:	20400864 	.word	0x20400864

0040435c <__retarget_lock_acquire_recursive>:
  40435c:	4770      	bx	lr
  40435e:	bf00      	nop

00404360 <__retarget_lock_release_recursive>:
  404360:	4770      	bx	lr
  404362:	bf00      	nop

00404364 <_malloc_r>:
  404364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404368:	f101 060b 	add.w	r6, r1, #11
  40436c:	2e16      	cmp	r6, #22
  40436e:	b083      	sub	sp, #12
  404370:	4605      	mov	r5, r0
  404372:	f240 809e 	bls.w	4044b2 <_malloc_r+0x14e>
  404376:	f036 0607 	bics.w	r6, r6, #7
  40437a:	f100 80bd 	bmi.w	4044f8 <_malloc_r+0x194>
  40437e:	42b1      	cmp	r1, r6
  404380:	f200 80ba 	bhi.w	4044f8 <_malloc_r+0x194>
  404384:	f000 fb8e 	bl	404aa4 <__malloc_lock>
  404388:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40438c:	f0c0 8293 	bcc.w	4048b6 <_malloc_r+0x552>
  404390:	0a73      	lsrs	r3, r6, #9
  404392:	f000 80b8 	beq.w	404506 <_malloc_r+0x1a2>
  404396:	2b04      	cmp	r3, #4
  404398:	f200 8179 	bhi.w	40468e <_malloc_r+0x32a>
  40439c:	09b3      	lsrs	r3, r6, #6
  40439e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4043a2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4043a6:	00c3      	lsls	r3, r0, #3
  4043a8:	4fbf      	ldr	r7, [pc, #764]	; (4046a8 <_malloc_r+0x344>)
  4043aa:	443b      	add	r3, r7
  4043ac:	f1a3 0108 	sub.w	r1, r3, #8
  4043b0:	685c      	ldr	r4, [r3, #4]
  4043b2:	42a1      	cmp	r1, r4
  4043b4:	d106      	bne.n	4043c4 <_malloc_r+0x60>
  4043b6:	e00c      	b.n	4043d2 <_malloc_r+0x6e>
  4043b8:	2a00      	cmp	r2, #0
  4043ba:	f280 80aa 	bge.w	404512 <_malloc_r+0x1ae>
  4043be:	68e4      	ldr	r4, [r4, #12]
  4043c0:	42a1      	cmp	r1, r4
  4043c2:	d006      	beq.n	4043d2 <_malloc_r+0x6e>
  4043c4:	6863      	ldr	r3, [r4, #4]
  4043c6:	f023 0303 	bic.w	r3, r3, #3
  4043ca:	1b9a      	subs	r2, r3, r6
  4043cc:	2a0f      	cmp	r2, #15
  4043ce:	ddf3      	ble.n	4043b8 <_malloc_r+0x54>
  4043d0:	4670      	mov	r0, lr
  4043d2:	693c      	ldr	r4, [r7, #16]
  4043d4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4046bc <_malloc_r+0x358>
  4043d8:	4574      	cmp	r4, lr
  4043da:	f000 81ab 	beq.w	404734 <_malloc_r+0x3d0>
  4043de:	6863      	ldr	r3, [r4, #4]
  4043e0:	f023 0303 	bic.w	r3, r3, #3
  4043e4:	1b9a      	subs	r2, r3, r6
  4043e6:	2a0f      	cmp	r2, #15
  4043e8:	f300 8190 	bgt.w	40470c <_malloc_r+0x3a8>
  4043ec:	2a00      	cmp	r2, #0
  4043ee:	f8c7 e014 	str.w	lr, [r7, #20]
  4043f2:	f8c7 e010 	str.w	lr, [r7, #16]
  4043f6:	f280 809d 	bge.w	404534 <_malloc_r+0x1d0>
  4043fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4043fe:	f080 8161 	bcs.w	4046c4 <_malloc_r+0x360>
  404402:	08db      	lsrs	r3, r3, #3
  404404:	f103 0c01 	add.w	ip, r3, #1
  404408:	1099      	asrs	r1, r3, #2
  40440a:	687a      	ldr	r2, [r7, #4]
  40440c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404410:	f8c4 8008 	str.w	r8, [r4, #8]
  404414:	2301      	movs	r3, #1
  404416:	408b      	lsls	r3, r1
  404418:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40441c:	4313      	orrs	r3, r2
  40441e:	3908      	subs	r1, #8
  404420:	60e1      	str	r1, [r4, #12]
  404422:	607b      	str	r3, [r7, #4]
  404424:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404428:	f8c8 400c 	str.w	r4, [r8, #12]
  40442c:	1082      	asrs	r2, r0, #2
  40442e:	2401      	movs	r4, #1
  404430:	4094      	lsls	r4, r2
  404432:	429c      	cmp	r4, r3
  404434:	f200 808b 	bhi.w	40454e <_malloc_r+0x1ea>
  404438:	421c      	tst	r4, r3
  40443a:	d106      	bne.n	40444a <_malloc_r+0xe6>
  40443c:	f020 0003 	bic.w	r0, r0, #3
  404440:	0064      	lsls	r4, r4, #1
  404442:	421c      	tst	r4, r3
  404444:	f100 0004 	add.w	r0, r0, #4
  404448:	d0fa      	beq.n	404440 <_malloc_r+0xdc>
  40444a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40444e:	46cc      	mov	ip, r9
  404450:	4680      	mov	r8, r0
  404452:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404456:	459c      	cmp	ip, r3
  404458:	d107      	bne.n	40446a <_malloc_r+0x106>
  40445a:	e16d      	b.n	404738 <_malloc_r+0x3d4>
  40445c:	2a00      	cmp	r2, #0
  40445e:	f280 817b 	bge.w	404758 <_malloc_r+0x3f4>
  404462:	68db      	ldr	r3, [r3, #12]
  404464:	459c      	cmp	ip, r3
  404466:	f000 8167 	beq.w	404738 <_malloc_r+0x3d4>
  40446a:	6859      	ldr	r1, [r3, #4]
  40446c:	f021 0103 	bic.w	r1, r1, #3
  404470:	1b8a      	subs	r2, r1, r6
  404472:	2a0f      	cmp	r2, #15
  404474:	ddf2      	ble.n	40445c <_malloc_r+0xf8>
  404476:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40447a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40447e:	9300      	str	r3, [sp, #0]
  404480:	199c      	adds	r4, r3, r6
  404482:	4628      	mov	r0, r5
  404484:	f046 0601 	orr.w	r6, r6, #1
  404488:	f042 0501 	orr.w	r5, r2, #1
  40448c:	605e      	str	r6, [r3, #4]
  40448e:	f8c8 c00c 	str.w	ip, [r8, #12]
  404492:	f8cc 8008 	str.w	r8, [ip, #8]
  404496:	617c      	str	r4, [r7, #20]
  404498:	613c      	str	r4, [r7, #16]
  40449a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40449e:	f8c4 e008 	str.w	lr, [r4, #8]
  4044a2:	6065      	str	r5, [r4, #4]
  4044a4:	505a      	str	r2, [r3, r1]
  4044a6:	f000 fb03 	bl	404ab0 <__malloc_unlock>
  4044aa:	9b00      	ldr	r3, [sp, #0]
  4044ac:	f103 0408 	add.w	r4, r3, #8
  4044b0:	e01e      	b.n	4044f0 <_malloc_r+0x18c>
  4044b2:	2910      	cmp	r1, #16
  4044b4:	d820      	bhi.n	4044f8 <_malloc_r+0x194>
  4044b6:	f000 faf5 	bl	404aa4 <__malloc_lock>
  4044ba:	2610      	movs	r6, #16
  4044bc:	2318      	movs	r3, #24
  4044be:	2002      	movs	r0, #2
  4044c0:	4f79      	ldr	r7, [pc, #484]	; (4046a8 <_malloc_r+0x344>)
  4044c2:	443b      	add	r3, r7
  4044c4:	f1a3 0208 	sub.w	r2, r3, #8
  4044c8:	685c      	ldr	r4, [r3, #4]
  4044ca:	4294      	cmp	r4, r2
  4044cc:	f000 813d 	beq.w	40474a <_malloc_r+0x3e6>
  4044d0:	6863      	ldr	r3, [r4, #4]
  4044d2:	68e1      	ldr	r1, [r4, #12]
  4044d4:	68a6      	ldr	r6, [r4, #8]
  4044d6:	f023 0303 	bic.w	r3, r3, #3
  4044da:	4423      	add	r3, r4
  4044dc:	4628      	mov	r0, r5
  4044de:	685a      	ldr	r2, [r3, #4]
  4044e0:	60f1      	str	r1, [r6, #12]
  4044e2:	f042 0201 	orr.w	r2, r2, #1
  4044e6:	608e      	str	r6, [r1, #8]
  4044e8:	605a      	str	r2, [r3, #4]
  4044ea:	f000 fae1 	bl	404ab0 <__malloc_unlock>
  4044ee:	3408      	adds	r4, #8
  4044f0:	4620      	mov	r0, r4
  4044f2:	b003      	add	sp, #12
  4044f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044f8:	2400      	movs	r4, #0
  4044fa:	230c      	movs	r3, #12
  4044fc:	4620      	mov	r0, r4
  4044fe:	602b      	str	r3, [r5, #0]
  404500:	b003      	add	sp, #12
  404502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404506:	2040      	movs	r0, #64	; 0x40
  404508:	f44f 7300 	mov.w	r3, #512	; 0x200
  40450c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404510:	e74a      	b.n	4043a8 <_malloc_r+0x44>
  404512:	4423      	add	r3, r4
  404514:	68e1      	ldr	r1, [r4, #12]
  404516:	685a      	ldr	r2, [r3, #4]
  404518:	68a6      	ldr	r6, [r4, #8]
  40451a:	f042 0201 	orr.w	r2, r2, #1
  40451e:	60f1      	str	r1, [r6, #12]
  404520:	4628      	mov	r0, r5
  404522:	608e      	str	r6, [r1, #8]
  404524:	605a      	str	r2, [r3, #4]
  404526:	f000 fac3 	bl	404ab0 <__malloc_unlock>
  40452a:	3408      	adds	r4, #8
  40452c:	4620      	mov	r0, r4
  40452e:	b003      	add	sp, #12
  404530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404534:	4423      	add	r3, r4
  404536:	4628      	mov	r0, r5
  404538:	685a      	ldr	r2, [r3, #4]
  40453a:	f042 0201 	orr.w	r2, r2, #1
  40453e:	605a      	str	r2, [r3, #4]
  404540:	f000 fab6 	bl	404ab0 <__malloc_unlock>
  404544:	3408      	adds	r4, #8
  404546:	4620      	mov	r0, r4
  404548:	b003      	add	sp, #12
  40454a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40454e:	68bc      	ldr	r4, [r7, #8]
  404550:	6863      	ldr	r3, [r4, #4]
  404552:	f023 0803 	bic.w	r8, r3, #3
  404556:	45b0      	cmp	r8, r6
  404558:	d304      	bcc.n	404564 <_malloc_r+0x200>
  40455a:	eba8 0306 	sub.w	r3, r8, r6
  40455e:	2b0f      	cmp	r3, #15
  404560:	f300 8085 	bgt.w	40466e <_malloc_r+0x30a>
  404564:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4046c0 <_malloc_r+0x35c>
  404568:	4b50      	ldr	r3, [pc, #320]	; (4046ac <_malloc_r+0x348>)
  40456a:	f8d9 2000 	ldr.w	r2, [r9]
  40456e:	681b      	ldr	r3, [r3, #0]
  404570:	3201      	adds	r2, #1
  404572:	4433      	add	r3, r6
  404574:	eb04 0a08 	add.w	sl, r4, r8
  404578:	f000 8155 	beq.w	404826 <_malloc_r+0x4c2>
  40457c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404580:	330f      	adds	r3, #15
  404582:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404586:	f02b 0b0f 	bic.w	fp, fp, #15
  40458a:	4659      	mov	r1, fp
  40458c:	4628      	mov	r0, r5
  40458e:	f000 fd8f 	bl	4050b0 <_sbrk_r>
  404592:	1c41      	adds	r1, r0, #1
  404594:	4602      	mov	r2, r0
  404596:	f000 80fc 	beq.w	404792 <_malloc_r+0x42e>
  40459a:	4582      	cmp	sl, r0
  40459c:	f200 80f7 	bhi.w	40478e <_malloc_r+0x42a>
  4045a0:	4b43      	ldr	r3, [pc, #268]	; (4046b0 <_malloc_r+0x34c>)
  4045a2:	6819      	ldr	r1, [r3, #0]
  4045a4:	4459      	add	r1, fp
  4045a6:	6019      	str	r1, [r3, #0]
  4045a8:	f000 814d 	beq.w	404846 <_malloc_r+0x4e2>
  4045ac:	f8d9 0000 	ldr.w	r0, [r9]
  4045b0:	3001      	adds	r0, #1
  4045b2:	bf1b      	ittet	ne
  4045b4:	eba2 0a0a 	subne.w	sl, r2, sl
  4045b8:	4451      	addne	r1, sl
  4045ba:	f8c9 2000 	streq.w	r2, [r9]
  4045be:	6019      	strne	r1, [r3, #0]
  4045c0:	f012 0107 	ands.w	r1, r2, #7
  4045c4:	f000 8115 	beq.w	4047f2 <_malloc_r+0x48e>
  4045c8:	f1c1 0008 	rsb	r0, r1, #8
  4045cc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4045d0:	4402      	add	r2, r0
  4045d2:	3108      	adds	r1, #8
  4045d4:	eb02 090b 	add.w	r9, r2, fp
  4045d8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4045dc:	eba1 0909 	sub.w	r9, r1, r9
  4045e0:	4649      	mov	r1, r9
  4045e2:	4628      	mov	r0, r5
  4045e4:	9301      	str	r3, [sp, #4]
  4045e6:	9200      	str	r2, [sp, #0]
  4045e8:	f000 fd62 	bl	4050b0 <_sbrk_r>
  4045ec:	1c43      	adds	r3, r0, #1
  4045ee:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4045f2:	f000 8143 	beq.w	40487c <_malloc_r+0x518>
  4045f6:	1a80      	subs	r0, r0, r2
  4045f8:	4448      	add	r0, r9
  4045fa:	f040 0001 	orr.w	r0, r0, #1
  4045fe:	6819      	ldr	r1, [r3, #0]
  404600:	60ba      	str	r2, [r7, #8]
  404602:	4449      	add	r1, r9
  404604:	42bc      	cmp	r4, r7
  404606:	6050      	str	r0, [r2, #4]
  404608:	6019      	str	r1, [r3, #0]
  40460a:	d017      	beq.n	40463c <_malloc_r+0x2d8>
  40460c:	f1b8 0f0f 	cmp.w	r8, #15
  404610:	f240 80fb 	bls.w	40480a <_malloc_r+0x4a6>
  404614:	6860      	ldr	r0, [r4, #4]
  404616:	f1a8 020c 	sub.w	r2, r8, #12
  40461a:	f022 0207 	bic.w	r2, r2, #7
  40461e:	eb04 0e02 	add.w	lr, r4, r2
  404622:	f000 0001 	and.w	r0, r0, #1
  404626:	f04f 0c05 	mov.w	ip, #5
  40462a:	4310      	orrs	r0, r2
  40462c:	2a0f      	cmp	r2, #15
  40462e:	6060      	str	r0, [r4, #4]
  404630:	f8ce c004 	str.w	ip, [lr, #4]
  404634:	f8ce c008 	str.w	ip, [lr, #8]
  404638:	f200 8117 	bhi.w	40486a <_malloc_r+0x506>
  40463c:	4b1d      	ldr	r3, [pc, #116]	; (4046b4 <_malloc_r+0x350>)
  40463e:	68bc      	ldr	r4, [r7, #8]
  404640:	681a      	ldr	r2, [r3, #0]
  404642:	4291      	cmp	r1, r2
  404644:	bf88      	it	hi
  404646:	6019      	strhi	r1, [r3, #0]
  404648:	4b1b      	ldr	r3, [pc, #108]	; (4046b8 <_malloc_r+0x354>)
  40464a:	681a      	ldr	r2, [r3, #0]
  40464c:	4291      	cmp	r1, r2
  40464e:	6862      	ldr	r2, [r4, #4]
  404650:	bf88      	it	hi
  404652:	6019      	strhi	r1, [r3, #0]
  404654:	f022 0203 	bic.w	r2, r2, #3
  404658:	4296      	cmp	r6, r2
  40465a:	eba2 0306 	sub.w	r3, r2, r6
  40465e:	d801      	bhi.n	404664 <_malloc_r+0x300>
  404660:	2b0f      	cmp	r3, #15
  404662:	dc04      	bgt.n	40466e <_malloc_r+0x30a>
  404664:	4628      	mov	r0, r5
  404666:	f000 fa23 	bl	404ab0 <__malloc_unlock>
  40466a:	2400      	movs	r4, #0
  40466c:	e740      	b.n	4044f0 <_malloc_r+0x18c>
  40466e:	19a2      	adds	r2, r4, r6
  404670:	f043 0301 	orr.w	r3, r3, #1
  404674:	f046 0601 	orr.w	r6, r6, #1
  404678:	6066      	str	r6, [r4, #4]
  40467a:	4628      	mov	r0, r5
  40467c:	60ba      	str	r2, [r7, #8]
  40467e:	6053      	str	r3, [r2, #4]
  404680:	f000 fa16 	bl	404ab0 <__malloc_unlock>
  404684:	3408      	adds	r4, #8
  404686:	4620      	mov	r0, r4
  404688:	b003      	add	sp, #12
  40468a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40468e:	2b14      	cmp	r3, #20
  404690:	d971      	bls.n	404776 <_malloc_r+0x412>
  404692:	2b54      	cmp	r3, #84	; 0x54
  404694:	f200 80a3 	bhi.w	4047de <_malloc_r+0x47a>
  404698:	0b33      	lsrs	r3, r6, #12
  40469a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40469e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4046a2:	00c3      	lsls	r3, r0, #3
  4046a4:	e680      	b.n	4043a8 <_malloc_r+0x44>
  4046a6:	bf00      	nop
  4046a8:	20400454 	.word	0x20400454
  4046ac:	20400cb8 	.word	0x20400cb8
  4046b0:	20400c88 	.word	0x20400c88
  4046b4:	20400cb0 	.word	0x20400cb0
  4046b8:	20400cb4 	.word	0x20400cb4
  4046bc:	2040045c 	.word	0x2040045c
  4046c0:	2040085c 	.word	0x2040085c
  4046c4:	0a5a      	lsrs	r2, r3, #9
  4046c6:	2a04      	cmp	r2, #4
  4046c8:	d95b      	bls.n	404782 <_malloc_r+0x41e>
  4046ca:	2a14      	cmp	r2, #20
  4046cc:	f200 80ae 	bhi.w	40482c <_malloc_r+0x4c8>
  4046d0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4046d4:	00c9      	lsls	r1, r1, #3
  4046d6:	325b      	adds	r2, #91	; 0x5b
  4046d8:	eb07 0c01 	add.w	ip, r7, r1
  4046dc:	5879      	ldr	r1, [r7, r1]
  4046de:	f1ac 0c08 	sub.w	ip, ip, #8
  4046e2:	458c      	cmp	ip, r1
  4046e4:	f000 8088 	beq.w	4047f8 <_malloc_r+0x494>
  4046e8:	684a      	ldr	r2, [r1, #4]
  4046ea:	f022 0203 	bic.w	r2, r2, #3
  4046ee:	4293      	cmp	r3, r2
  4046f0:	d273      	bcs.n	4047da <_malloc_r+0x476>
  4046f2:	6889      	ldr	r1, [r1, #8]
  4046f4:	458c      	cmp	ip, r1
  4046f6:	d1f7      	bne.n	4046e8 <_malloc_r+0x384>
  4046f8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4046fc:	687b      	ldr	r3, [r7, #4]
  4046fe:	60e2      	str	r2, [r4, #12]
  404700:	f8c4 c008 	str.w	ip, [r4, #8]
  404704:	6094      	str	r4, [r2, #8]
  404706:	f8cc 400c 	str.w	r4, [ip, #12]
  40470a:	e68f      	b.n	40442c <_malloc_r+0xc8>
  40470c:	19a1      	adds	r1, r4, r6
  40470e:	f046 0c01 	orr.w	ip, r6, #1
  404712:	f042 0601 	orr.w	r6, r2, #1
  404716:	f8c4 c004 	str.w	ip, [r4, #4]
  40471a:	4628      	mov	r0, r5
  40471c:	6179      	str	r1, [r7, #20]
  40471e:	6139      	str	r1, [r7, #16]
  404720:	f8c1 e00c 	str.w	lr, [r1, #12]
  404724:	f8c1 e008 	str.w	lr, [r1, #8]
  404728:	604e      	str	r6, [r1, #4]
  40472a:	50e2      	str	r2, [r4, r3]
  40472c:	f000 f9c0 	bl	404ab0 <__malloc_unlock>
  404730:	3408      	adds	r4, #8
  404732:	e6dd      	b.n	4044f0 <_malloc_r+0x18c>
  404734:	687b      	ldr	r3, [r7, #4]
  404736:	e679      	b.n	40442c <_malloc_r+0xc8>
  404738:	f108 0801 	add.w	r8, r8, #1
  40473c:	f018 0f03 	tst.w	r8, #3
  404740:	f10c 0c08 	add.w	ip, ip, #8
  404744:	f47f ae85 	bne.w	404452 <_malloc_r+0xee>
  404748:	e02d      	b.n	4047a6 <_malloc_r+0x442>
  40474a:	68dc      	ldr	r4, [r3, #12]
  40474c:	42a3      	cmp	r3, r4
  40474e:	bf08      	it	eq
  404750:	3002      	addeq	r0, #2
  404752:	f43f ae3e 	beq.w	4043d2 <_malloc_r+0x6e>
  404756:	e6bb      	b.n	4044d0 <_malloc_r+0x16c>
  404758:	4419      	add	r1, r3
  40475a:	461c      	mov	r4, r3
  40475c:	684a      	ldr	r2, [r1, #4]
  40475e:	68db      	ldr	r3, [r3, #12]
  404760:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404764:	f042 0201 	orr.w	r2, r2, #1
  404768:	604a      	str	r2, [r1, #4]
  40476a:	4628      	mov	r0, r5
  40476c:	60f3      	str	r3, [r6, #12]
  40476e:	609e      	str	r6, [r3, #8]
  404770:	f000 f99e 	bl	404ab0 <__malloc_unlock>
  404774:	e6bc      	b.n	4044f0 <_malloc_r+0x18c>
  404776:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40477a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40477e:	00c3      	lsls	r3, r0, #3
  404780:	e612      	b.n	4043a8 <_malloc_r+0x44>
  404782:	099a      	lsrs	r2, r3, #6
  404784:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404788:	00c9      	lsls	r1, r1, #3
  40478a:	3238      	adds	r2, #56	; 0x38
  40478c:	e7a4      	b.n	4046d8 <_malloc_r+0x374>
  40478e:	42bc      	cmp	r4, r7
  404790:	d054      	beq.n	40483c <_malloc_r+0x4d8>
  404792:	68bc      	ldr	r4, [r7, #8]
  404794:	6862      	ldr	r2, [r4, #4]
  404796:	f022 0203 	bic.w	r2, r2, #3
  40479a:	e75d      	b.n	404658 <_malloc_r+0x2f4>
  40479c:	f859 3908 	ldr.w	r3, [r9], #-8
  4047a0:	4599      	cmp	r9, r3
  4047a2:	f040 8086 	bne.w	4048b2 <_malloc_r+0x54e>
  4047a6:	f010 0f03 	tst.w	r0, #3
  4047aa:	f100 30ff 	add.w	r0, r0, #4294967295
  4047ae:	d1f5      	bne.n	40479c <_malloc_r+0x438>
  4047b0:	687b      	ldr	r3, [r7, #4]
  4047b2:	ea23 0304 	bic.w	r3, r3, r4
  4047b6:	607b      	str	r3, [r7, #4]
  4047b8:	0064      	lsls	r4, r4, #1
  4047ba:	429c      	cmp	r4, r3
  4047bc:	f63f aec7 	bhi.w	40454e <_malloc_r+0x1ea>
  4047c0:	2c00      	cmp	r4, #0
  4047c2:	f43f aec4 	beq.w	40454e <_malloc_r+0x1ea>
  4047c6:	421c      	tst	r4, r3
  4047c8:	4640      	mov	r0, r8
  4047ca:	f47f ae3e 	bne.w	40444a <_malloc_r+0xe6>
  4047ce:	0064      	lsls	r4, r4, #1
  4047d0:	421c      	tst	r4, r3
  4047d2:	f100 0004 	add.w	r0, r0, #4
  4047d6:	d0fa      	beq.n	4047ce <_malloc_r+0x46a>
  4047d8:	e637      	b.n	40444a <_malloc_r+0xe6>
  4047da:	468c      	mov	ip, r1
  4047dc:	e78c      	b.n	4046f8 <_malloc_r+0x394>
  4047de:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4047e2:	d815      	bhi.n	404810 <_malloc_r+0x4ac>
  4047e4:	0bf3      	lsrs	r3, r6, #15
  4047e6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4047ea:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4047ee:	00c3      	lsls	r3, r0, #3
  4047f0:	e5da      	b.n	4043a8 <_malloc_r+0x44>
  4047f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4047f6:	e6ed      	b.n	4045d4 <_malloc_r+0x270>
  4047f8:	687b      	ldr	r3, [r7, #4]
  4047fa:	1092      	asrs	r2, r2, #2
  4047fc:	2101      	movs	r1, #1
  4047fe:	fa01 f202 	lsl.w	r2, r1, r2
  404802:	4313      	orrs	r3, r2
  404804:	607b      	str	r3, [r7, #4]
  404806:	4662      	mov	r2, ip
  404808:	e779      	b.n	4046fe <_malloc_r+0x39a>
  40480a:	2301      	movs	r3, #1
  40480c:	6053      	str	r3, [r2, #4]
  40480e:	e729      	b.n	404664 <_malloc_r+0x300>
  404810:	f240 5254 	movw	r2, #1364	; 0x554
  404814:	4293      	cmp	r3, r2
  404816:	d822      	bhi.n	40485e <_malloc_r+0x4fa>
  404818:	0cb3      	lsrs	r3, r6, #18
  40481a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40481e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404822:	00c3      	lsls	r3, r0, #3
  404824:	e5c0      	b.n	4043a8 <_malloc_r+0x44>
  404826:	f103 0b10 	add.w	fp, r3, #16
  40482a:	e6ae      	b.n	40458a <_malloc_r+0x226>
  40482c:	2a54      	cmp	r2, #84	; 0x54
  40482e:	d829      	bhi.n	404884 <_malloc_r+0x520>
  404830:	0b1a      	lsrs	r2, r3, #12
  404832:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404836:	00c9      	lsls	r1, r1, #3
  404838:	326e      	adds	r2, #110	; 0x6e
  40483a:	e74d      	b.n	4046d8 <_malloc_r+0x374>
  40483c:	4b20      	ldr	r3, [pc, #128]	; (4048c0 <_malloc_r+0x55c>)
  40483e:	6819      	ldr	r1, [r3, #0]
  404840:	4459      	add	r1, fp
  404842:	6019      	str	r1, [r3, #0]
  404844:	e6b2      	b.n	4045ac <_malloc_r+0x248>
  404846:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40484a:	2800      	cmp	r0, #0
  40484c:	f47f aeae 	bne.w	4045ac <_malloc_r+0x248>
  404850:	eb08 030b 	add.w	r3, r8, fp
  404854:	68ba      	ldr	r2, [r7, #8]
  404856:	f043 0301 	orr.w	r3, r3, #1
  40485a:	6053      	str	r3, [r2, #4]
  40485c:	e6ee      	b.n	40463c <_malloc_r+0x2d8>
  40485e:	207f      	movs	r0, #127	; 0x7f
  404860:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404864:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404868:	e59e      	b.n	4043a8 <_malloc_r+0x44>
  40486a:	f104 0108 	add.w	r1, r4, #8
  40486e:	4628      	mov	r0, r5
  404870:	9300      	str	r3, [sp, #0]
  404872:	f000 fe13 	bl	40549c <_free_r>
  404876:	9b00      	ldr	r3, [sp, #0]
  404878:	6819      	ldr	r1, [r3, #0]
  40487a:	e6df      	b.n	40463c <_malloc_r+0x2d8>
  40487c:	2001      	movs	r0, #1
  40487e:	f04f 0900 	mov.w	r9, #0
  404882:	e6bc      	b.n	4045fe <_malloc_r+0x29a>
  404884:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404888:	d805      	bhi.n	404896 <_malloc_r+0x532>
  40488a:	0bda      	lsrs	r2, r3, #15
  40488c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404890:	00c9      	lsls	r1, r1, #3
  404892:	3277      	adds	r2, #119	; 0x77
  404894:	e720      	b.n	4046d8 <_malloc_r+0x374>
  404896:	f240 5154 	movw	r1, #1364	; 0x554
  40489a:	428a      	cmp	r2, r1
  40489c:	d805      	bhi.n	4048aa <_malloc_r+0x546>
  40489e:	0c9a      	lsrs	r2, r3, #18
  4048a0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4048a4:	00c9      	lsls	r1, r1, #3
  4048a6:	327c      	adds	r2, #124	; 0x7c
  4048a8:	e716      	b.n	4046d8 <_malloc_r+0x374>
  4048aa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4048ae:	227e      	movs	r2, #126	; 0x7e
  4048b0:	e712      	b.n	4046d8 <_malloc_r+0x374>
  4048b2:	687b      	ldr	r3, [r7, #4]
  4048b4:	e780      	b.n	4047b8 <_malloc_r+0x454>
  4048b6:	08f0      	lsrs	r0, r6, #3
  4048b8:	f106 0308 	add.w	r3, r6, #8
  4048bc:	e600      	b.n	4044c0 <_malloc_r+0x15c>
  4048be:	bf00      	nop
  4048c0:	20400c88 	.word	0x20400c88
	...

004048d0 <memchr>:
  4048d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4048d4:	2a10      	cmp	r2, #16
  4048d6:	db2b      	blt.n	404930 <memchr+0x60>
  4048d8:	f010 0f07 	tst.w	r0, #7
  4048dc:	d008      	beq.n	4048f0 <memchr+0x20>
  4048de:	f810 3b01 	ldrb.w	r3, [r0], #1
  4048e2:	3a01      	subs	r2, #1
  4048e4:	428b      	cmp	r3, r1
  4048e6:	d02d      	beq.n	404944 <memchr+0x74>
  4048e8:	f010 0f07 	tst.w	r0, #7
  4048ec:	b342      	cbz	r2, 404940 <memchr+0x70>
  4048ee:	d1f6      	bne.n	4048de <memchr+0xe>
  4048f0:	b4f0      	push	{r4, r5, r6, r7}
  4048f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4048f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4048fa:	f022 0407 	bic.w	r4, r2, #7
  4048fe:	f07f 0700 	mvns.w	r7, #0
  404902:	2300      	movs	r3, #0
  404904:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404908:	3c08      	subs	r4, #8
  40490a:	ea85 0501 	eor.w	r5, r5, r1
  40490e:	ea86 0601 	eor.w	r6, r6, r1
  404912:	fa85 f547 	uadd8	r5, r5, r7
  404916:	faa3 f587 	sel	r5, r3, r7
  40491a:	fa86 f647 	uadd8	r6, r6, r7
  40491e:	faa5 f687 	sel	r6, r5, r7
  404922:	b98e      	cbnz	r6, 404948 <memchr+0x78>
  404924:	d1ee      	bne.n	404904 <memchr+0x34>
  404926:	bcf0      	pop	{r4, r5, r6, r7}
  404928:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40492c:	f002 0207 	and.w	r2, r2, #7
  404930:	b132      	cbz	r2, 404940 <memchr+0x70>
  404932:	f810 3b01 	ldrb.w	r3, [r0], #1
  404936:	3a01      	subs	r2, #1
  404938:	ea83 0301 	eor.w	r3, r3, r1
  40493c:	b113      	cbz	r3, 404944 <memchr+0x74>
  40493e:	d1f8      	bne.n	404932 <memchr+0x62>
  404940:	2000      	movs	r0, #0
  404942:	4770      	bx	lr
  404944:	3801      	subs	r0, #1
  404946:	4770      	bx	lr
  404948:	2d00      	cmp	r5, #0
  40494a:	bf06      	itte	eq
  40494c:	4635      	moveq	r5, r6
  40494e:	3803      	subeq	r0, #3
  404950:	3807      	subne	r0, #7
  404952:	f015 0f01 	tst.w	r5, #1
  404956:	d107      	bne.n	404968 <memchr+0x98>
  404958:	3001      	adds	r0, #1
  40495a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40495e:	bf02      	ittt	eq
  404960:	3001      	addeq	r0, #1
  404962:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404966:	3001      	addeq	r0, #1
  404968:	bcf0      	pop	{r4, r5, r6, r7}
  40496a:	3801      	subs	r0, #1
  40496c:	4770      	bx	lr
  40496e:	bf00      	nop

00404970 <memcpy>:
  404970:	4684      	mov	ip, r0
  404972:	ea41 0300 	orr.w	r3, r1, r0
  404976:	f013 0303 	ands.w	r3, r3, #3
  40497a:	d16d      	bne.n	404a58 <memcpy+0xe8>
  40497c:	3a40      	subs	r2, #64	; 0x40
  40497e:	d341      	bcc.n	404a04 <memcpy+0x94>
  404980:	f851 3b04 	ldr.w	r3, [r1], #4
  404984:	f840 3b04 	str.w	r3, [r0], #4
  404988:	f851 3b04 	ldr.w	r3, [r1], #4
  40498c:	f840 3b04 	str.w	r3, [r0], #4
  404990:	f851 3b04 	ldr.w	r3, [r1], #4
  404994:	f840 3b04 	str.w	r3, [r0], #4
  404998:	f851 3b04 	ldr.w	r3, [r1], #4
  40499c:	f840 3b04 	str.w	r3, [r0], #4
  4049a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4049a4:	f840 3b04 	str.w	r3, [r0], #4
  4049a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4049ac:	f840 3b04 	str.w	r3, [r0], #4
  4049b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4049b4:	f840 3b04 	str.w	r3, [r0], #4
  4049b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4049bc:	f840 3b04 	str.w	r3, [r0], #4
  4049c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4049c4:	f840 3b04 	str.w	r3, [r0], #4
  4049c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4049cc:	f840 3b04 	str.w	r3, [r0], #4
  4049d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4049d4:	f840 3b04 	str.w	r3, [r0], #4
  4049d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4049dc:	f840 3b04 	str.w	r3, [r0], #4
  4049e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4049e4:	f840 3b04 	str.w	r3, [r0], #4
  4049e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4049ec:	f840 3b04 	str.w	r3, [r0], #4
  4049f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4049f4:	f840 3b04 	str.w	r3, [r0], #4
  4049f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4049fc:	f840 3b04 	str.w	r3, [r0], #4
  404a00:	3a40      	subs	r2, #64	; 0x40
  404a02:	d2bd      	bcs.n	404980 <memcpy+0x10>
  404a04:	3230      	adds	r2, #48	; 0x30
  404a06:	d311      	bcc.n	404a2c <memcpy+0xbc>
  404a08:	f851 3b04 	ldr.w	r3, [r1], #4
  404a0c:	f840 3b04 	str.w	r3, [r0], #4
  404a10:	f851 3b04 	ldr.w	r3, [r1], #4
  404a14:	f840 3b04 	str.w	r3, [r0], #4
  404a18:	f851 3b04 	ldr.w	r3, [r1], #4
  404a1c:	f840 3b04 	str.w	r3, [r0], #4
  404a20:	f851 3b04 	ldr.w	r3, [r1], #4
  404a24:	f840 3b04 	str.w	r3, [r0], #4
  404a28:	3a10      	subs	r2, #16
  404a2a:	d2ed      	bcs.n	404a08 <memcpy+0x98>
  404a2c:	320c      	adds	r2, #12
  404a2e:	d305      	bcc.n	404a3c <memcpy+0xcc>
  404a30:	f851 3b04 	ldr.w	r3, [r1], #4
  404a34:	f840 3b04 	str.w	r3, [r0], #4
  404a38:	3a04      	subs	r2, #4
  404a3a:	d2f9      	bcs.n	404a30 <memcpy+0xc0>
  404a3c:	3204      	adds	r2, #4
  404a3e:	d008      	beq.n	404a52 <memcpy+0xe2>
  404a40:	07d2      	lsls	r2, r2, #31
  404a42:	bf1c      	itt	ne
  404a44:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404a48:	f800 3b01 	strbne.w	r3, [r0], #1
  404a4c:	d301      	bcc.n	404a52 <memcpy+0xe2>
  404a4e:	880b      	ldrh	r3, [r1, #0]
  404a50:	8003      	strh	r3, [r0, #0]
  404a52:	4660      	mov	r0, ip
  404a54:	4770      	bx	lr
  404a56:	bf00      	nop
  404a58:	2a08      	cmp	r2, #8
  404a5a:	d313      	bcc.n	404a84 <memcpy+0x114>
  404a5c:	078b      	lsls	r3, r1, #30
  404a5e:	d08d      	beq.n	40497c <memcpy+0xc>
  404a60:	f010 0303 	ands.w	r3, r0, #3
  404a64:	d08a      	beq.n	40497c <memcpy+0xc>
  404a66:	f1c3 0304 	rsb	r3, r3, #4
  404a6a:	1ad2      	subs	r2, r2, r3
  404a6c:	07db      	lsls	r3, r3, #31
  404a6e:	bf1c      	itt	ne
  404a70:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404a74:	f800 3b01 	strbne.w	r3, [r0], #1
  404a78:	d380      	bcc.n	40497c <memcpy+0xc>
  404a7a:	f831 3b02 	ldrh.w	r3, [r1], #2
  404a7e:	f820 3b02 	strh.w	r3, [r0], #2
  404a82:	e77b      	b.n	40497c <memcpy+0xc>
  404a84:	3a04      	subs	r2, #4
  404a86:	d3d9      	bcc.n	404a3c <memcpy+0xcc>
  404a88:	3a01      	subs	r2, #1
  404a8a:	f811 3b01 	ldrb.w	r3, [r1], #1
  404a8e:	f800 3b01 	strb.w	r3, [r0], #1
  404a92:	d2f9      	bcs.n	404a88 <memcpy+0x118>
  404a94:	780b      	ldrb	r3, [r1, #0]
  404a96:	7003      	strb	r3, [r0, #0]
  404a98:	784b      	ldrb	r3, [r1, #1]
  404a9a:	7043      	strb	r3, [r0, #1]
  404a9c:	788b      	ldrb	r3, [r1, #2]
  404a9e:	7083      	strb	r3, [r0, #2]
  404aa0:	4660      	mov	r0, ip
  404aa2:	4770      	bx	lr

00404aa4 <__malloc_lock>:
  404aa4:	4801      	ldr	r0, [pc, #4]	; (404aac <__malloc_lock+0x8>)
  404aa6:	f7ff bc59 	b.w	40435c <__retarget_lock_acquire_recursive>
  404aaa:	bf00      	nop
  404aac:	20400ccc 	.word	0x20400ccc

00404ab0 <__malloc_unlock>:
  404ab0:	4801      	ldr	r0, [pc, #4]	; (404ab8 <__malloc_unlock+0x8>)
  404ab2:	f7ff bc55 	b.w	404360 <__retarget_lock_release_recursive>
  404ab6:	bf00      	nop
  404ab8:	20400ccc 	.word	0x20400ccc

00404abc <_Balloc>:
  404abc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  404abe:	b570      	push	{r4, r5, r6, lr}
  404ac0:	4605      	mov	r5, r0
  404ac2:	460c      	mov	r4, r1
  404ac4:	b14b      	cbz	r3, 404ada <_Balloc+0x1e>
  404ac6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  404aca:	b180      	cbz	r0, 404aee <_Balloc+0x32>
  404acc:	6802      	ldr	r2, [r0, #0]
  404ace:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  404ad2:	2300      	movs	r3, #0
  404ad4:	6103      	str	r3, [r0, #16]
  404ad6:	60c3      	str	r3, [r0, #12]
  404ad8:	bd70      	pop	{r4, r5, r6, pc}
  404ada:	2221      	movs	r2, #33	; 0x21
  404adc:	2104      	movs	r1, #4
  404ade:	f000 fc5d 	bl	40539c <_calloc_r>
  404ae2:	64e8      	str	r0, [r5, #76]	; 0x4c
  404ae4:	4603      	mov	r3, r0
  404ae6:	2800      	cmp	r0, #0
  404ae8:	d1ed      	bne.n	404ac6 <_Balloc+0xa>
  404aea:	2000      	movs	r0, #0
  404aec:	bd70      	pop	{r4, r5, r6, pc}
  404aee:	2101      	movs	r1, #1
  404af0:	fa01 f604 	lsl.w	r6, r1, r4
  404af4:	1d72      	adds	r2, r6, #5
  404af6:	4628      	mov	r0, r5
  404af8:	0092      	lsls	r2, r2, #2
  404afa:	f000 fc4f 	bl	40539c <_calloc_r>
  404afe:	2800      	cmp	r0, #0
  404b00:	d0f3      	beq.n	404aea <_Balloc+0x2e>
  404b02:	6044      	str	r4, [r0, #4]
  404b04:	6086      	str	r6, [r0, #8]
  404b06:	e7e4      	b.n	404ad2 <_Balloc+0x16>

00404b08 <_Bfree>:
  404b08:	b131      	cbz	r1, 404b18 <_Bfree+0x10>
  404b0a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  404b0c:	684a      	ldr	r2, [r1, #4]
  404b0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  404b12:	6008      	str	r0, [r1, #0]
  404b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  404b18:	4770      	bx	lr
  404b1a:	bf00      	nop

00404b1c <__multadd>:
  404b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  404b1e:	690c      	ldr	r4, [r1, #16]
  404b20:	b083      	sub	sp, #12
  404b22:	460d      	mov	r5, r1
  404b24:	4606      	mov	r6, r0
  404b26:	f101 0e14 	add.w	lr, r1, #20
  404b2a:	2700      	movs	r7, #0
  404b2c:	f8de 0000 	ldr.w	r0, [lr]
  404b30:	b281      	uxth	r1, r0
  404b32:	fb02 3301 	mla	r3, r2, r1, r3
  404b36:	0c01      	lsrs	r1, r0, #16
  404b38:	0c18      	lsrs	r0, r3, #16
  404b3a:	fb02 0101 	mla	r1, r2, r1, r0
  404b3e:	b29b      	uxth	r3, r3
  404b40:	3701      	adds	r7, #1
  404b42:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  404b46:	42bc      	cmp	r4, r7
  404b48:	f84e 3b04 	str.w	r3, [lr], #4
  404b4c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  404b50:	dcec      	bgt.n	404b2c <__multadd+0x10>
  404b52:	b13b      	cbz	r3, 404b64 <__multadd+0x48>
  404b54:	68aa      	ldr	r2, [r5, #8]
  404b56:	4294      	cmp	r4, r2
  404b58:	da07      	bge.n	404b6a <__multadd+0x4e>
  404b5a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  404b5e:	3401      	adds	r4, #1
  404b60:	6153      	str	r3, [r2, #20]
  404b62:	612c      	str	r4, [r5, #16]
  404b64:	4628      	mov	r0, r5
  404b66:	b003      	add	sp, #12
  404b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404b6a:	6869      	ldr	r1, [r5, #4]
  404b6c:	9301      	str	r3, [sp, #4]
  404b6e:	3101      	adds	r1, #1
  404b70:	4630      	mov	r0, r6
  404b72:	f7ff ffa3 	bl	404abc <_Balloc>
  404b76:	692a      	ldr	r2, [r5, #16]
  404b78:	3202      	adds	r2, #2
  404b7a:	f105 010c 	add.w	r1, r5, #12
  404b7e:	4607      	mov	r7, r0
  404b80:	0092      	lsls	r2, r2, #2
  404b82:	300c      	adds	r0, #12
  404b84:	f7ff fef4 	bl	404970 <memcpy>
  404b88:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  404b8a:	6869      	ldr	r1, [r5, #4]
  404b8c:	9b01      	ldr	r3, [sp, #4]
  404b8e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  404b92:	6028      	str	r0, [r5, #0]
  404b94:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  404b98:	463d      	mov	r5, r7
  404b9a:	e7de      	b.n	404b5a <__multadd+0x3e>

00404b9c <__hi0bits>:
  404b9c:	0c02      	lsrs	r2, r0, #16
  404b9e:	0412      	lsls	r2, r2, #16
  404ba0:	4603      	mov	r3, r0
  404ba2:	b9b2      	cbnz	r2, 404bd2 <__hi0bits+0x36>
  404ba4:	0403      	lsls	r3, r0, #16
  404ba6:	2010      	movs	r0, #16
  404ba8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  404bac:	bf04      	itt	eq
  404bae:	021b      	lsleq	r3, r3, #8
  404bb0:	3008      	addeq	r0, #8
  404bb2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  404bb6:	bf04      	itt	eq
  404bb8:	011b      	lsleq	r3, r3, #4
  404bba:	3004      	addeq	r0, #4
  404bbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  404bc0:	bf04      	itt	eq
  404bc2:	009b      	lsleq	r3, r3, #2
  404bc4:	3002      	addeq	r0, #2
  404bc6:	2b00      	cmp	r3, #0
  404bc8:	db02      	blt.n	404bd0 <__hi0bits+0x34>
  404bca:	005b      	lsls	r3, r3, #1
  404bcc:	d403      	bmi.n	404bd6 <__hi0bits+0x3a>
  404bce:	2020      	movs	r0, #32
  404bd0:	4770      	bx	lr
  404bd2:	2000      	movs	r0, #0
  404bd4:	e7e8      	b.n	404ba8 <__hi0bits+0xc>
  404bd6:	3001      	adds	r0, #1
  404bd8:	4770      	bx	lr
  404bda:	bf00      	nop

00404bdc <__lo0bits>:
  404bdc:	6803      	ldr	r3, [r0, #0]
  404bde:	f013 0207 	ands.w	r2, r3, #7
  404be2:	4601      	mov	r1, r0
  404be4:	d007      	beq.n	404bf6 <__lo0bits+0x1a>
  404be6:	07da      	lsls	r2, r3, #31
  404be8:	d421      	bmi.n	404c2e <__lo0bits+0x52>
  404bea:	0798      	lsls	r0, r3, #30
  404bec:	d421      	bmi.n	404c32 <__lo0bits+0x56>
  404bee:	089b      	lsrs	r3, r3, #2
  404bf0:	600b      	str	r3, [r1, #0]
  404bf2:	2002      	movs	r0, #2
  404bf4:	4770      	bx	lr
  404bf6:	b298      	uxth	r0, r3
  404bf8:	b198      	cbz	r0, 404c22 <__lo0bits+0x46>
  404bfa:	4610      	mov	r0, r2
  404bfc:	f013 0fff 	tst.w	r3, #255	; 0xff
  404c00:	bf04      	itt	eq
  404c02:	0a1b      	lsreq	r3, r3, #8
  404c04:	3008      	addeq	r0, #8
  404c06:	071a      	lsls	r2, r3, #28
  404c08:	bf04      	itt	eq
  404c0a:	091b      	lsreq	r3, r3, #4
  404c0c:	3004      	addeq	r0, #4
  404c0e:	079a      	lsls	r2, r3, #30
  404c10:	bf04      	itt	eq
  404c12:	089b      	lsreq	r3, r3, #2
  404c14:	3002      	addeq	r0, #2
  404c16:	07da      	lsls	r2, r3, #31
  404c18:	d407      	bmi.n	404c2a <__lo0bits+0x4e>
  404c1a:	085b      	lsrs	r3, r3, #1
  404c1c:	d104      	bne.n	404c28 <__lo0bits+0x4c>
  404c1e:	2020      	movs	r0, #32
  404c20:	4770      	bx	lr
  404c22:	0c1b      	lsrs	r3, r3, #16
  404c24:	2010      	movs	r0, #16
  404c26:	e7e9      	b.n	404bfc <__lo0bits+0x20>
  404c28:	3001      	adds	r0, #1
  404c2a:	600b      	str	r3, [r1, #0]
  404c2c:	4770      	bx	lr
  404c2e:	2000      	movs	r0, #0
  404c30:	4770      	bx	lr
  404c32:	085b      	lsrs	r3, r3, #1
  404c34:	600b      	str	r3, [r1, #0]
  404c36:	2001      	movs	r0, #1
  404c38:	4770      	bx	lr
  404c3a:	bf00      	nop

00404c3c <__i2b>:
  404c3c:	b510      	push	{r4, lr}
  404c3e:	460c      	mov	r4, r1
  404c40:	2101      	movs	r1, #1
  404c42:	f7ff ff3b 	bl	404abc <_Balloc>
  404c46:	2201      	movs	r2, #1
  404c48:	6144      	str	r4, [r0, #20]
  404c4a:	6102      	str	r2, [r0, #16]
  404c4c:	bd10      	pop	{r4, pc}
  404c4e:	bf00      	nop

00404c50 <__multiply>:
  404c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c54:	690c      	ldr	r4, [r1, #16]
  404c56:	6915      	ldr	r5, [r2, #16]
  404c58:	42ac      	cmp	r4, r5
  404c5a:	b083      	sub	sp, #12
  404c5c:	468b      	mov	fp, r1
  404c5e:	4616      	mov	r6, r2
  404c60:	da04      	bge.n	404c6c <__multiply+0x1c>
  404c62:	4622      	mov	r2, r4
  404c64:	46b3      	mov	fp, r6
  404c66:	462c      	mov	r4, r5
  404c68:	460e      	mov	r6, r1
  404c6a:	4615      	mov	r5, r2
  404c6c:	f8db 3008 	ldr.w	r3, [fp, #8]
  404c70:	f8db 1004 	ldr.w	r1, [fp, #4]
  404c74:	eb04 0805 	add.w	r8, r4, r5
  404c78:	4598      	cmp	r8, r3
  404c7a:	bfc8      	it	gt
  404c7c:	3101      	addgt	r1, #1
  404c7e:	f7ff ff1d 	bl	404abc <_Balloc>
  404c82:	f100 0914 	add.w	r9, r0, #20
  404c86:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  404c8a:	45d1      	cmp	r9, sl
  404c8c:	9000      	str	r0, [sp, #0]
  404c8e:	d205      	bcs.n	404c9c <__multiply+0x4c>
  404c90:	464b      	mov	r3, r9
  404c92:	2100      	movs	r1, #0
  404c94:	f843 1b04 	str.w	r1, [r3], #4
  404c98:	459a      	cmp	sl, r3
  404c9a:	d8fb      	bhi.n	404c94 <__multiply+0x44>
  404c9c:	f106 0c14 	add.w	ip, r6, #20
  404ca0:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  404ca4:	f10b 0b14 	add.w	fp, fp, #20
  404ca8:	459c      	cmp	ip, r3
  404caa:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  404cae:	d24c      	bcs.n	404d4a <__multiply+0xfa>
  404cb0:	f8cd a004 	str.w	sl, [sp, #4]
  404cb4:	469a      	mov	sl, r3
  404cb6:	f8dc 5000 	ldr.w	r5, [ip]
  404cba:	b2af      	uxth	r7, r5
  404cbc:	b1ef      	cbz	r7, 404cfa <__multiply+0xaa>
  404cbe:	2100      	movs	r1, #0
  404cc0:	464d      	mov	r5, r9
  404cc2:	465e      	mov	r6, fp
  404cc4:	460c      	mov	r4, r1
  404cc6:	f856 2b04 	ldr.w	r2, [r6], #4
  404cca:	6828      	ldr	r0, [r5, #0]
  404ccc:	b293      	uxth	r3, r2
  404cce:	b281      	uxth	r1, r0
  404cd0:	fb07 1303 	mla	r3, r7, r3, r1
  404cd4:	0c12      	lsrs	r2, r2, #16
  404cd6:	0c01      	lsrs	r1, r0, #16
  404cd8:	4423      	add	r3, r4
  404cda:	fb07 1102 	mla	r1, r7, r2, r1
  404cde:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  404ce2:	b29b      	uxth	r3, r3
  404ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  404ce8:	45b6      	cmp	lr, r6
  404cea:	f845 3b04 	str.w	r3, [r5], #4
  404cee:	ea4f 4411 	mov.w	r4, r1, lsr #16
  404cf2:	d8e8      	bhi.n	404cc6 <__multiply+0x76>
  404cf4:	602c      	str	r4, [r5, #0]
  404cf6:	f8dc 5000 	ldr.w	r5, [ip]
  404cfa:	0c2d      	lsrs	r5, r5, #16
  404cfc:	d01d      	beq.n	404d3a <__multiply+0xea>
  404cfe:	f8d9 3000 	ldr.w	r3, [r9]
  404d02:	4648      	mov	r0, r9
  404d04:	461c      	mov	r4, r3
  404d06:	4659      	mov	r1, fp
  404d08:	2200      	movs	r2, #0
  404d0a:	880e      	ldrh	r6, [r1, #0]
  404d0c:	0c24      	lsrs	r4, r4, #16
  404d0e:	fb05 4406 	mla	r4, r5, r6, r4
  404d12:	4422      	add	r2, r4
  404d14:	b29b      	uxth	r3, r3
  404d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404d1a:	f840 3b04 	str.w	r3, [r0], #4
  404d1e:	f851 3b04 	ldr.w	r3, [r1], #4
  404d22:	6804      	ldr	r4, [r0, #0]
  404d24:	0c1b      	lsrs	r3, r3, #16
  404d26:	b2a6      	uxth	r6, r4
  404d28:	fb05 6303 	mla	r3, r5, r3, r6
  404d2c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  404d30:	458e      	cmp	lr, r1
  404d32:	ea4f 4213 	mov.w	r2, r3, lsr #16
  404d36:	d8e8      	bhi.n	404d0a <__multiply+0xba>
  404d38:	6003      	str	r3, [r0, #0]
  404d3a:	f10c 0c04 	add.w	ip, ip, #4
  404d3e:	45e2      	cmp	sl, ip
  404d40:	f109 0904 	add.w	r9, r9, #4
  404d44:	d8b7      	bhi.n	404cb6 <__multiply+0x66>
  404d46:	f8dd a004 	ldr.w	sl, [sp, #4]
  404d4a:	f1b8 0f00 	cmp.w	r8, #0
  404d4e:	dd0b      	ble.n	404d68 <__multiply+0x118>
  404d50:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  404d54:	f1aa 0a04 	sub.w	sl, sl, #4
  404d58:	b11b      	cbz	r3, 404d62 <__multiply+0x112>
  404d5a:	e005      	b.n	404d68 <__multiply+0x118>
  404d5c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  404d60:	b913      	cbnz	r3, 404d68 <__multiply+0x118>
  404d62:	f1b8 0801 	subs.w	r8, r8, #1
  404d66:	d1f9      	bne.n	404d5c <__multiply+0x10c>
  404d68:	9800      	ldr	r0, [sp, #0]
  404d6a:	f8c0 8010 	str.w	r8, [r0, #16]
  404d6e:	b003      	add	sp, #12
  404d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00404d74 <__pow5mult>:
  404d74:	f012 0303 	ands.w	r3, r2, #3
  404d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404d7c:	4614      	mov	r4, r2
  404d7e:	4607      	mov	r7, r0
  404d80:	d12e      	bne.n	404de0 <__pow5mult+0x6c>
  404d82:	460d      	mov	r5, r1
  404d84:	10a4      	asrs	r4, r4, #2
  404d86:	d01c      	beq.n	404dc2 <__pow5mult+0x4e>
  404d88:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  404d8a:	b396      	cbz	r6, 404df2 <__pow5mult+0x7e>
  404d8c:	07e3      	lsls	r3, r4, #31
  404d8e:	f04f 0800 	mov.w	r8, #0
  404d92:	d406      	bmi.n	404da2 <__pow5mult+0x2e>
  404d94:	1064      	asrs	r4, r4, #1
  404d96:	d014      	beq.n	404dc2 <__pow5mult+0x4e>
  404d98:	6830      	ldr	r0, [r6, #0]
  404d9a:	b1a8      	cbz	r0, 404dc8 <__pow5mult+0x54>
  404d9c:	4606      	mov	r6, r0
  404d9e:	07e3      	lsls	r3, r4, #31
  404da0:	d5f8      	bpl.n	404d94 <__pow5mult+0x20>
  404da2:	4632      	mov	r2, r6
  404da4:	4629      	mov	r1, r5
  404da6:	4638      	mov	r0, r7
  404da8:	f7ff ff52 	bl	404c50 <__multiply>
  404dac:	b1b5      	cbz	r5, 404ddc <__pow5mult+0x68>
  404dae:	686a      	ldr	r2, [r5, #4]
  404db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  404db2:	1064      	asrs	r4, r4, #1
  404db4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  404db8:	6029      	str	r1, [r5, #0]
  404dba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  404dbe:	4605      	mov	r5, r0
  404dc0:	d1ea      	bne.n	404d98 <__pow5mult+0x24>
  404dc2:	4628      	mov	r0, r5
  404dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404dc8:	4632      	mov	r2, r6
  404dca:	4631      	mov	r1, r6
  404dcc:	4638      	mov	r0, r7
  404dce:	f7ff ff3f 	bl	404c50 <__multiply>
  404dd2:	6030      	str	r0, [r6, #0]
  404dd4:	f8c0 8000 	str.w	r8, [r0]
  404dd8:	4606      	mov	r6, r0
  404dda:	e7e0      	b.n	404d9e <__pow5mult+0x2a>
  404ddc:	4605      	mov	r5, r0
  404dde:	e7d9      	b.n	404d94 <__pow5mult+0x20>
  404de0:	1e5a      	subs	r2, r3, #1
  404de2:	4d0b      	ldr	r5, [pc, #44]	; (404e10 <__pow5mult+0x9c>)
  404de4:	2300      	movs	r3, #0
  404de6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  404dea:	f7ff fe97 	bl	404b1c <__multadd>
  404dee:	4605      	mov	r5, r0
  404df0:	e7c8      	b.n	404d84 <__pow5mult+0x10>
  404df2:	2101      	movs	r1, #1
  404df4:	4638      	mov	r0, r7
  404df6:	f7ff fe61 	bl	404abc <_Balloc>
  404dfa:	f240 2171 	movw	r1, #625	; 0x271
  404dfe:	2201      	movs	r2, #1
  404e00:	2300      	movs	r3, #0
  404e02:	6141      	str	r1, [r0, #20]
  404e04:	6102      	str	r2, [r0, #16]
  404e06:	4606      	mov	r6, r0
  404e08:	64b8      	str	r0, [r7, #72]	; 0x48
  404e0a:	6003      	str	r3, [r0, #0]
  404e0c:	e7be      	b.n	404d8c <__pow5mult+0x18>
  404e0e:	bf00      	nop
  404e10:	004072f8 	.word	0x004072f8

00404e14 <__lshift>:
  404e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404e18:	4691      	mov	r9, r2
  404e1a:	690a      	ldr	r2, [r1, #16]
  404e1c:	688b      	ldr	r3, [r1, #8]
  404e1e:	ea4f 1469 	mov.w	r4, r9, asr #5
  404e22:	eb04 0802 	add.w	r8, r4, r2
  404e26:	f108 0501 	add.w	r5, r8, #1
  404e2a:	429d      	cmp	r5, r3
  404e2c:	460e      	mov	r6, r1
  404e2e:	4607      	mov	r7, r0
  404e30:	6849      	ldr	r1, [r1, #4]
  404e32:	dd04      	ble.n	404e3e <__lshift+0x2a>
  404e34:	005b      	lsls	r3, r3, #1
  404e36:	429d      	cmp	r5, r3
  404e38:	f101 0101 	add.w	r1, r1, #1
  404e3c:	dcfa      	bgt.n	404e34 <__lshift+0x20>
  404e3e:	4638      	mov	r0, r7
  404e40:	f7ff fe3c 	bl	404abc <_Balloc>
  404e44:	2c00      	cmp	r4, #0
  404e46:	f100 0314 	add.w	r3, r0, #20
  404e4a:	dd06      	ble.n	404e5a <__lshift+0x46>
  404e4c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  404e50:	2100      	movs	r1, #0
  404e52:	f843 1b04 	str.w	r1, [r3], #4
  404e56:	429a      	cmp	r2, r3
  404e58:	d1fb      	bne.n	404e52 <__lshift+0x3e>
  404e5a:	6934      	ldr	r4, [r6, #16]
  404e5c:	f106 0114 	add.w	r1, r6, #20
  404e60:	f019 091f 	ands.w	r9, r9, #31
  404e64:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  404e68:	d01d      	beq.n	404ea6 <__lshift+0x92>
  404e6a:	f1c9 0c20 	rsb	ip, r9, #32
  404e6e:	2200      	movs	r2, #0
  404e70:	680c      	ldr	r4, [r1, #0]
  404e72:	fa04 f409 	lsl.w	r4, r4, r9
  404e76:	4314      	orrs	r4, r2
  404e78:	f843 4b04 	str.w	r4, [r3], #4
  404e7c:	f851 2b04 	ldr.w	r2, [r1], #4
  404e80:	458e      	cmp	lr, r1
  404e82:	fa22 f20c 	lsr.w	r2, r2, ip
  404e86:	d8f3      	bhi.n	404e70 <__lshift+0x5c>
  404e88:	601a      	str	r2, [r3, #0]
  404e8a:	b10a      	cbz	r2, 404e90 <__lshift+0x7c>
  404e8c:	f108 0502 	add.w	r5, r8, #2
  404e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  404e92:	6872      	ldr	r2, [r6, #4]
  404e94:	3d01      	subs	r5, #1
  404e96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  404e9a:	6105      	str	r5, [r0, #16]
  404e9c:	6031      	str	r1, [r6, #0]
  404e9e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  404ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404ea6:	3b04      	subs	r3, #4
  404ea8:	f851 2b04 	ldr.w	r2, [r1], #4
  404eac:	f843 2f04 	str.w	r2, [r3, #4]!
  404eb0:	458e      	cmp	lr, r1
  404eb2:	d8f9      	bhi.n	404ea8 <__lshift+0x94>
  404eb4:	e7ec      	b.n	404e90 <__lshift+0x7c>
  404eb6:	bf00      	nop

00404eb8 <__mcmp>:
  404eb8:	b430      	push	{r4, r5}
  404eba:	690b      	ldr	r3, [r1, #16]
  404ebc:	4605      	mov	r5, r0
  404ebe:	6900      	ldr	r0, [r0, #16]
  404ec0:	1ac0      	subs	r0, r0, r3
  404ec2:	d10f      	bne.n	404ee4 <__mcmp+0x2c>
  404ec4:	009b      	lsls	r3, r3, #2
  404ec6:	3514      	adds	r5, #20
  404ec8:	3114      	adds	r1, #20
  404eca:	4419      	add	r1, r3
  404ecc:	442b      	add	r3, r5
  404ece:	e001      	b.n	404ed4 <__mcmp+0x1c>
  404ed0:	429d      	cmp	r5, r3
  404ed2:	d207      	bcs.n	404ee4 <__mcmp+0x2c>
  404ed4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  404ed8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  404edc:	4294      	cmp	r4, r2
  404ede:	d0f7      	beq.n	404ed0 <__mcmp+0x18>
  404ee0:	d302      	bcc.n	404ee8 <__mcmp+0x30>
  404ee2:	2001      	movs	r0, #1
  404ee4:	bc30      	pop	{r4, r5}
  404ee6:	4770      	bx	lr
  404ee8:	f04f 30ff 	mov.w	r0, #4294967295
  404eec:	e7fa      	b.n	404ee4 <__mcmp+0x2c>
  404eee:	bf00      	nop

00404ef0 <__mdiff>:
  404ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404ef4:	690f      	ldr	r7, [r1, #16]
  404ef6:	460e      	mov	r6, r1
  404ef8:	6911      	ldr	r1, [r2, #16]
  404efa:	1a7f      	subs	r7, r7, r1
  404efc:	2f00      	cmp	r7, #0
  404efe:	4690      	mov	r8, r2
  404f00:	d117      	bne.n	404f32 <__mdiff+0x42>
  404f02:	0089      	lsls	r1, r1, #2
  404f04:	f106 0514 	add.w	r5, r6, #20
  404f08:	f102 0e14 	add.w	lr, r2, #20
  404f0c:	186b      	adds	r3, r5, r1
  404f0e:	4471      	add	r1, lr
  404f10:	e001      	b.n	404f16 <__mdiff+0x26>
  404f12:	429d      	cmp	r5, r3
  404f14:	d25c      	bcs.n	404fd0 <__mdiff+0xe0>
  404f16:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  404f1a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  404f1e:	42a2      	cmp	r2, r4
  404f20:	d0f7      	beq.n	404f12 <__mdiff+0x22>
  404f22:	d25e      	bcs.n	404fe2 <__mdiff+0xf2>
  404f24:	4633      	mov	r3, r6
  404f26:	462c      	mov	r4, r5
  404f28:	4646      	mov	r6, r8
  404f2a:	4675      	mov	r5, lr
  404f2c:	4698      	mov	r8, r3
  404f2e:	2701      	movs	r7, #1
  404f30:	e005      	b.n	404f3e <__mdiff+0x4e>
  404f32:	db58      	blt.n	404fe6 <__mdiff+0xf6>
  404f34:	f106 0514 	add.w	r5, r6, #20
  404f38:	f108 0414 	add.w	r4, r8, #20
  404f3c:	2700      	movs	r7, #0
  404f3e:	6871      	ldr	r1, [r6, #4]
  404f40:	f7ff fdbc 	bl	404abc <_Balloc>
  404f44:	f8d8 3010 	ldr.w	r3, [r8, #16]
  404f48:	6936      	ldr	r6, [r6, #16]
  404f4a:	60c7      	str	r7, [r0, #12]
  404f4c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  404f50:	46a6      	mov	lr, r4
  404f52:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  404f56:	f100 0414 	add.w	r4, r0, #20
  404f5a:	2300      	movs	r3, #0
  404f5c:	f85e 1b04 	ldr.w	r1, [lr], #4
  404f60:	f855 8b04 	ldr.w	r8, [r5], #4
  404f64:	b28a      	uxth	r2, r1
  404f66:	fa13 f388 	uxtah	r3, r3, r8
  404f6a:	0c09      	lsrs	r1, r1, #16
  404f6c:	1a9a      	subs	r2, r3, r2
  404f6e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  404f72:	eb03 4322 	add.w	r3, r3, r2, asr #16
  404f76:	b292      	uxth	r2, r2
  404f78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  404f7c:	45f4      	cmp	ip, lr
  404f7e:	f844 2b04 	str.w	r2, [r4], #4
  404f82:	ea4f 4323 	mov.w	r3, r3, asr #16
  404f86:	d8e9      	bhi.n	404f5c <__mdiff+0x6c>
  404f88:	42af      	cmp	r7, r5
  404f8a:	d917      	bls.n	404fbc <__mdiff+0xcc>
  404f8c:	46a4      	mov	ip, r4
  404f8e:	46ae      	mov	lr, r5
  404f90:	f85e 2b04 	ldr.w	r2, [lr], #4
  404f94:	fa13 f382 	uxtah	r3, r3, r2
  404f98:	1419      	asrs	r1, r3, #16
  404f9a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  404f9e:	b29b      	uxth	r3, r3
  404fa0:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  404fa4:	4577      	cmp	r7, lr
  404fa6:	f84c 2b04 	str.w	r2, [ip], #4
  404faa:	ea4f 4321 	mov.w	r3, r1, asr #16
  404fae:	d8ef      	bhi.n	404f90 <__mdiff+0xa0>
  404fb0:	43ed      	mvns	r5, r5
  404fb2:	442f      	add	r7, r5
  404fb4:	f027 0703 	bic.w	r7, r7, #3
  404fb8:	3704      	adds	r7, #4
  404fba:	443c      	add	r4, r7
  404fbc:	3c04      	subs	r4, #4
  404fbe:	b922      	cbnz	r2, 404fca <__mdiff+0xda>
  404fc0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  404fc4:	3e01      	subs	r6, #1
  404fc6:	2b00      	cmp	r3, #0
  404fc8:	d0fa      	beq.n	404fc0 <__mdiff+0xd0>
  404fca:	6106      	str	r6, [r0, #16]
  404fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404fd0:	2100      	movs	r1, #0
  404fd2:	f7ff fd73 	bl	404abc <_Balloc>
  404fd6:	2201      	movs	r2, #1
  404fd8:	2300      	movs	r3, #0
  404fda:	6102      	str	r2, [r0, #16]
  404fdc:	6143      	str	r3, [r0, #20]
  404fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404fe2:	4674      	mov	r4, lr
  404fe4:	e7ab      	b.n	404f3e <__mdiff+0x4e>
  404fe6:	4633      	mov	r3, r6
  404fe8:	f106 0414 	add.w	r4, r6, #20
  404fec:	f102 0514 	add.w	r5, r2, #20
  404ff0:	4616      	mov	r6, r2
  404ff2:	2701      	movs	r7, #1
  404ff4:	4698      	mov	r8, r3
  404ff6:	e7a2      	b.n	404f3e <__mdiff+0x4e>

00404ff8 <__d2b>:
  404ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404ffc:	b082      	sub	sp, #8
  404ffe:	2101      	movs	r1, #1
  405000:	461c      	mov	r4, r3
  405002:	f3c3 570a 	ubfx	r7, r3, #20, #11
  405006:	4615      	mov	r5, r2
  405008:	9e08      	ldr	r6, [sp, #32]
  40500a:	f7ff fd57 	bl	404abc <_Balloc>
  40500e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  405012:	4680      	mov	r8, r0
  405014:	b10f      	cbz	r7, 40501a <__d2b+0x22>
  405016:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40501a:	9401      	str	r4, [sp, #4]
  40501c:	b31d      	cbz	r5, 405066 <__d2b+0x6e>
  40501e:	a802      	add	r0, sp, #8
  405020:	f840 5d08 	str.w	r5, [r0, #-8]!
  405024:	f7ff fdda 	bl	404bdc <__lo0bits>
  405028:	2800      	cmp	r0, #0
  40502a:	d134      	bne.n	405096 <__d2b+0x9e>
  40502c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405030:	f8c8 2014 	str.w	r2, [r8, #20]
  405034:	2b00      	cmp	r3, #0
  405036:	bf0c      	ite	eq
  405038:	2101      	moveq	r1, #1
  40503a:	2102      	movne	r1, #2
  40503c:	f8c8 3018 	str.w	r3, [r8, #24]
  405040:	f8c8 1010 	str.w	r1, [r8, #16]
  405044:	b9df      	cbnz	r7, 40507e <__d2b+0x86>
  405046:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40504a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40504e:	6030      	str	r0, [r6, #0]
  405050:	6918      	ldr	r0, [r3, #16]
  405052:	f7ff fda3 	bl	404b9c <__hi0bits>
  405056:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405058:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40505c:	6018      	str	r0, [r3, #0]
  40505e:	4640      	mov	r0, r8
  405060:	b002      	add	sp, #8
  405062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405066:	a801      	add	r0, sp, #4
  405068:	f7ff fdb8 	bl	404bdc <__lo0bits>
  40506c:	9b01      	ldr	r3, [sp, #4]
  40506e:	f8c8 3014 	str.w	r3, [r8, #20]
  405072:	2101      	movs	r1, #1
  405074:	3020      	adds	r0, #32
  405076:	f8c8 1010 	str.w	r1, [r8, #16]
  40507a:	2f00      	cmp	r7, #0
  40507c:	d0e3      	beq.n	405046 <__d2b+0x4e>
  40507e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405080:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  405084:	4407      	add	r7, r0
  405086:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40508a:	6037      	str	r7, [r6, #0]
  40508c:	6018      	str	r0, [r3, #0]
  40508e:	4640      	mov	r0, r8
  405090:	b002      	add	sp, #8
  405092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405096:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40509a:	f1c0 0220 	rsb	r2, r0, #32
  40509e:	fa03 f202 	lsl.w	r2, r3, r2
  4050a2:	430a      	orrs	r2, r1
  4050a4:	40c3      	lsrs	r3, r0
  4050a6:	9301      	str	r3, [sp, #4]
  4050a8:	f8c8 2014 	str.w	r2, [r8, #20]
  4050ac:	e7c2      	b.n	405034 <__d2b+0x3c>
  4050ae:	bf00      	nop

004050b0 <_sbrk_r>:
  4050b0:	b538      	push	{r3, r4, r5, lr}
  4050b2:	4c07      	ldr	r4, [pc, #28]	; (4050d0 <_sbrk_r+0x20>)
  4050b4:	2300      	movs	r3, #0
  4050b6:	4605      	mov	r5, r0
  4050b8:	4608      	mov	r0, r1
  4050ba:	6023      	str	r3, [r4, #0]
  4050bc:	f7fc fb22 	bl	401704 <_sbrk>
  4050c0:	1c43      	adds	r3, r0, #1
  4050c2:	d000      	beq.n	4050c6 <_sbrk_r+0x16>
  4050c4:	bd38      	pop	{r3, r4, r5, pc}
  4050c6:	6823      	ldr	r3, [r4, #0]
  4050c8:	2b00      	cmp	r3, #0
  4050ca:	d0fb      	beq.n	4050c4 <_sbrk_r+0x14>
  4050cc:	602b      	str	r3, [r5, #0]
  4050ce:	bd38      	pop	{r3, r4, r5, pc}
  4050d0:	20400ce0 	.word	0x20400ce0
	...

00405100 <strlen>:
  405100:	f890 f000 	pld	[r0]
  405104:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405108:	f020 0107 	bic.w	r1, r0, #7
  40510c:	f06f 0c00 	mvn.w	ip, #0
  405110:	f010 0407 	ands.w	r4, r0, #7
  405114:	f891 f020 	pld	[r1, #32]
  405118:	f040 8049 	bne.w	4051ae <strlen+0xae>
  40511c:	f04f 0400 	mov.w	r4, #0
  405120:	f06f 0007 	mvn.w	r0, #7
  405124:	e9d1 2300 	ldrd	r2, r3, [r1]
  405128:	f891 f040 	pld	[r1, #64]	; 0x40
  40512c:	f100 0008 	add.w	r0, r0, #8
  405130:	fa82 f24c 	uadd8	r2, r2, ip
  405134:	faa4 f28c 	sel	r2, r4, ip
  405138:	fa83 f34c 	uadd8	r3, r3, ip
  40513c:	faa2 f38c 	sel	r3, r2, ip
  405140:	bb4b      	cbnz	r3, 405196 <strlen+0x96>
  405142:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405146:	fa82 f24c 	uadd8	r2, r2, ip
  40514a:	f100 0008 	add.w	r0, r0, #8
  40514e:	faa4 f28c 	sel	r2, r4, ip
  405152:	fa83 f34c 	uadd8	r3, r3, ip
  405156:	faa2 f38c 	sel	r3, r2, ip
  40515a:	b9e3      	cbnz	r3, 405196 <strlen+0x96>
  40515c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405160:	fa82 f24c 	uadd8	r2, r2, ip
  405164:	f100 0008 	add.w	r0, r0, #8
  405168:	faa4 f28c 	sel	r2, r4, ip
  40516c:	fa83 f34c 	uadd8	r3, r3, ip
  405170:	faa2 f38c 	sel	r3, r2, ip
  405174:	b97b      	cbnz	r3, 405196 <strlen+0x96>
  405176:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40517a:	f101 0120 	add.w	r1, r1, #32
  40517e:	fa82 f24c 	uadd8	r2, r2, ip
  405182:	f100 0008 	add.w	r0, r0, #8
  405186:	faa4 f28c 	sel	r2, r4, ip
  40518a:	fa83 f34c 	uadd8	r3, r3, ip
  40518e:	faa2 f38c 	sel	r3, r2, ip
  405192:	2b00      	cmp	r3, #0
  405194:	d0c6      	beq.n	405124 <strlen+0x24>
  405196:	2a00      	cmp	r2, #0
  405198:	bf04      	itt	eq
  40519a:	3004      	addeq	r0, #4
  40519c:	461a      	moveq	r2, r3
  40519e:	ba12      	rev	r2, r2
  4051a0:	fab2 f282 	clz	r2, r2
  4051a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4051a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4051ac:	4770      	bx	lr
  4051ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4051b2:	f004 0503 	and.w	r5, r4, #3
  4051b6:	f1c4 0000 	rsb	r0, r4, #0
  4051ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4051be:	f014 0f04 	tst.w	r4, #4
  4051c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4051c6:	fa0c f505 	lsl.w	r5, ip, r5
  4051ca:	ea62 0205 	orn	r2, r2, r5
  4051ce:	bf1c      	itt	ne
  4051d0:	ea63 0305 	ornne	r3, r3, r5
  4051d4:	4662      	movne	r2, ip
  4051d6:	f04f 0400 	mov.w	r4, #0
  4051da:	e7a9      	b.n	405130 <strlen+0x30>

004051dc <__ssprint_r>:
  4051dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4051e0:	6893      	ldr	r3, [r2, #8]
  4051e2:	b083      	sub	sp, #12
  4051e4:	4690      	mov	r8, r2
  4051e6:	2b00      	cmp	r3, #0
  4051e8:	d070      	beq.n	4052cc <__ssprint_r+0xf0>
  4051ea:	4682      	mov	sl, r0
  4051ec:	460c      	mov	r4, r1
  4051ee:	6817      	ldr	r7, [r2, #0]
  4051f0:	688d      	ldr	r5, [r1, #8]
  4051f2:	6808      	ldr	r0, [r1, #0]
  4051f4:	e042      	b.n	40527c <__ssprint_r+0xa0>
  4051f6:	89a3      	ldrh	r3, [r4, #12]
  4051f8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4051fc:	d02e      	beq.n	40525c <__ssprint_r+0x80>
  4051fe:	6965      	ldr	r5, [r4, #20]
  405200:	6921      	ldr	r1, [r4, #16]
  405202:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  405206:	eba0 0b01 	sub.w	fp, r0, r1
  40520a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40520e:	f10b 0001 	add.w	r0, fp, #1
  405212:	106d      	asrs	r5, r5, #1
  405214:	4430      	add	r0, r6
  405216:	42a8      	cmp	r0, r5
  405218:	462a      	mov	r2, r5
  40521a:	bf84      	itt	hi
  40521c:	4605      	movhi	r5, r0
  40521e:	462a      	movhi	r2, r5
  405220:	055b      	lsls	r3, r3, #21
  405222:	d538      	bpl.n	405296 <__ssprint_r+0xba>
  405224:	4611      	mov	r1, r2
  405226:	4650      	mov	r0, sl
  405228:	f7ff f89c 	bl	404364 <_malloc_r>
  40522c:	2800      	cmp	r0, #0
  40522e:	d03c      	beq.n	4052aa <__ssprint_r+0xce>
  405230:	465a      	mov	r2, fp
  405232:	6921      	ldr	r1, [r4, #16]
  405234:	9001      	str	r0, [sp, #4]
  405236:	f7ff fb9b 	bl	404970 <memcpy>
  40523a:	89a2      	ldrh	r2, [r4, #12]
  40523c:	9b01      	ldr	r3, [sp, #4]
  40523e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  405242:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  405246:	81a2      	strh	r2, [r4, #12]
  405248:	eba5 020b 	sub.w	r2, r5, fp
  40524c:	eb03 000b 	add.w	r0, r3, fp
  405250:	6165      	str	r5, [r4, #20]
  405252:	6123      	str	r3, [r4, #16]
  405254:	6020      	str	r0, [r4, #0]
  405256:	60a2      	str	r2, [r4, #8]
  405258:	4635      	mov	r5, r6
  40525a:	46b3      	mov	fp, r6
  40525c:	465a      	mov	r2, fp
  40525e:	4649      	mov	r1, r9
  405260:	f000 fa18 	bl	405694 <memmove>
  405264:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405268:	68a2      	ldr	r2, [r4, #8]
  40526a:	6820      	ldr	r0, [r4, #0]
  40526c:	1b55      	subs	r5, r2, r5
  40526e:	4458      	add	r0, fp
  405270:	1b9e      	subs	r6, r3, r6
  405272:	60a5      	str	r5, [r4, #8]
  405274:	6020      	str	r0, [r4, #0]
  405276:	f8c8 6008 	str.w	r6, [r8, #8]
  40527a:	b33e      	cbz	r6, 4052cc <__ssprint_r+0xf0>
  40527c:	687e      	ldr	r6, [r7, #4]
  40527e:	463b      	mov	r3, r7
  405280:	3708      	adds	r7, #8
  405282:	2e00      	cmp	r6, #0
  405284:	d0fa      	beq.n	40527c <__ssprint_r+0xa0>
  405286:	42ae      	cmp	r6, r5
  405288:	f8d3 9000 	ldr.w	r9, [r3]
  40528c:	46ab      	mov	fp, r5
  40528e:	d2b2      	bcs.n	4051f6 <__ssprint_r+0x1a>
  405290:	4635      	mov	r5, r6
  405292:	46b3      	mov	fp, r6
  405294:	e7e2      	b.n	40525c <__ssprint_r+0x80>
  405296:	4650      	mov	r0, sl
  405298:	f000 fa60 	bl	40575c <_realloc_r>
  40529c:	4603      	mov	r3, r0
  40529e:	2800      	cmp	r0, #0
  4052a0:	d1d2      	bne.n	405248 <__ssprint_r+0x6c>
  4052a2:	6921      	ldr	r1, [r4, #16]
  4052a4:	4650      	mov	r0, sl
  4052a6:	f000 f8f9 	bl	40549c <_free_r>
  4052aa:	230c      	movs	r3, #12
  4052ac:	f8ca 3000 	str.w	r3, [sl]
  4052b0:	89a3      	ldrh	r3, [r4, #12]
  4052b2:	2200      	movs	r2, #0
  4052b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4052b8:	f04f 30ff 	mov.w	r0, #4294967295
  4052bc:	81a3      	strh	r3, [r4, #12]
  4052be:	f8c8 2008 	str.w	r2, [r8, #8]
  4052c2:	f8c8 2004 	str.w	r2, [r8, #4]
  4052c6:	b003      	add	sp, #12
  4052c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4052cc:	2000      	movs	r0, #0
  4052ce:	f8c8 0004 	str.w	r0, [r8, #4]
  4052d2:	b003      	add	sp, #12
  4052d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004052d8 <__register_exitproc>:
  4052d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4052dc:	4d2c      	ldr	r5, [pc, #176]	; (405390 <__register_exitproc+0xb8>)
  4052de:	4606      	mov	r6, r0
  4052e0:	6828      	ldr	r0, [r5, #0]
  4052e2:	4698      	mov	r8, r3
  4052e4:	460f      	mov	r7, r1
  4052e6:	4691      	mov	r9, r2
  4052e8:	f7ff f838 	bl	40435c <__retarget_lock_acquire_recursive>
  4052ec:	4b29      	ldr	r3, [pc, #164]	; (405394 <__register_exitproc+0xbc>)
  4052ee:	681c      	ldr	r4, [r3, #0]
  4052f0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4052f4:	2b00      	cmp	r3, #0
  4052f6:	d03e      	beq.n	405376 <__register_exitproc+0x9e>
  4052f8:	685a      	ldr	r2, [r3, #4]
  4052fa:	2a1f      	cmp	r2, #31
  4052fc:	dc1c      	bgt.n	405338 <__register_exitproc+0x60>
  4052fe:	f102 0e01 	add.w	lr, r2, #1
  405302:	b176      	cbz	r6, 405322 <__register_exitproc+0x4a>
  405304:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405308:	2401      	movs	r4, #1
  40530a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40530e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  405312:	4094      	lsls	r4, r2
  405314:	4320      	orrs	r0, r4
  405316:	2e02      	cmp	r6, #2
  405318:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40531c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405320:	d023      	beq.n	40536a <__register_exitproc+0x92>
  405322:	3202      	adds	r2, #2
  405324:	f8c3 e004 	str.w	lr, [r3, #4]
  405328:	6828      	ldr	r0, [r5, #0]
  40532a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40532e:	f7ff f817 	bl	404360 <__retarget_lock_release_recursive>
  405332:	2000      	movs	r0, #0
  405334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405338:	4b17      	ldr	r3, [pc, #92]	; (405398 <__register_exitproc+0xc0>)
  40533a:	b30b      	cbz	r3, 405380 <__register_exitproc+0xa8>
  40533c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405340:	f3af 8000 	nop.w
  405344:	4603      	mov	r3, r0
  405346:	b1d8      	cbz	r0, 405380 <__register_exitproc+0xa8>
  405348:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40534c:	6002      	str	r2, [r0, #0]
  40534e:	2100      	movs	r1, #0
  405350:	6041      	str	r1, [r0, #4]
  405352:	460a      	mov	r2, r1
  405354:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405358:	f04f 0e01 	mov.w	lr, #1
  40535c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405360:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405364:	2e00      	cmp	r6, #0
  405366:	d0dc      	beq.n	405322 <__register_exitproc+0x4a>
  405368:	e7cc      	b.n	405304 <__register_exitproc+0x2c>
  40536a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40536e:	430c      	orrs	r4, r1
  405370:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405374:	e7d5      	b.n	405322 <__register_exitproc+0x4a>
  405376:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40537a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40537e:	e7bb      	b.n	4052f8 <__register_exitproc+0x20>
  405380:	6828      	ldr	r0, [r5, #0]
  405382:	f7fe ffed 	bl	404360 <__retarget_lock_release_recursive>
  405386:	f04f 30ff 	mov.w	r0, #4294967295
  40538a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40538e:	bf00      	nop
  405390:	20400450 	.word	0x20400450
  405394:	00407190 	.word	0x00407190
  405398:	00000000 	.word	0x00000000

0040539c <_calloc_r>:
  40539c:	b510      	push	{r4, lr}
  40539e:	fb02 f101 	mul.w	r1, r2, r1
  4053a2:	f7fe ffdf 	bl	404364 <_malloc_r>
  4053a6:	4604      	mov	r4, r0
  4053a8:	b1d8      	cbz	r0, 4053e2 <_calloc_r+0x46>
  4053aa:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4053ae:	f022 0203 	bic.w	r2, r2, #3
  4053b2:	3a04      	subs	r2, #4
  4053b4:	2a24      	cmp	r2, #36	; 0x24
  4053b6:	d818      	bhi.n	4053ea <_calloc_r+0x4e>
  4053b8:	2a13      	cmp	r2, #19
  4053ba:	d914      	bls.n	4053e6 <_calloc_r+0x4a>
  4053bc:	2300      	movs	r3, #0
  4053be:	2a1b      	cmp	r2, #27
  4053c0:	6003      	str	r3, [r0, #0]
  4053c2:	6043      	str	r3, [r0, #4]
  4053c4:	d916      	bls.n	4053f4 <_calloc_r+0x58>
  4053c6:	2a24      	cmp	r2, #36	; 0x24
  4053c8:	6083      	str	r3, [r0, #8]
  4053ca:	60c3      	str	r3, [r0, #12]
  4053cc:	bf11      	iteee	ne
  4053ce:	f100 0210 	addne.w	r2, r0, #16
  4053d2:	6103      	streq	r3, [r0, #16]
  4053d4:	6143      	streq	r3, [r0, #20]
  4053d6:	f100 0218 	addeq.w	r2, r0, #24
  4053da:	2300      	movs	r3, #0
  4053dc:	6013      	str	r3, [r2, #0]
  4053de:	6053      	str	r3, [r2, #4]
  4053e0:	6093      	str	r3, [r2, #8]
  4053e2:	4620      	mov	r0, r4
  4053e4:	bd10      	pop	{r4, pc}
  4053e6:	4602      	mov	r2, r0
  4053e8:	e7f7      	b.n	4053da <_calloc_r+0x3e>
  4053ea:	2100      	movs	r1, #0
  4053ec:	f7fc fd1e 	bl	401e2c <memset>
  4053f0:	4620      	mov	r0, r4
  4053f2:	bd10      	pop	{r4, pc}
  4053f4:	f100 0208 	add.w	r2, r0, #8
  4053f8:	e7ef      	b.n	4053da <_calloc_r+0x3e>
  4053fa:	bf00      	nop

004053fc <_malloc_trim_r>:
  4053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4053fe:	4f24      	ldr	r7, [pc, #144]	; (405490 <_malloc_trim_r+0x94>)
  405400:	460c      	mov	r4, r1
  405402:	4606      	mov	r6, r0
  405404:	f7ff fb4e 	bl	404aa4 <__malloc_lock>
  405408:	68bb      	ldr	r3, [r7, #8]
  40540a:	685d      	ldr	r5, [r3, #4]
  40540c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405410:	310f      	adds	r1, #15
  405412:	f025 0503 	bic.w	r5, r5, #3
  405416:	4429      	add	r1, r5
  405418:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40541c:	f021 010f 	bic.w	r1, r1, #15
  405420:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405424:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405428:	db07      	blt.n	40543a <_malloc_trim_r+0x3e>
  40542a:	2100      	movs	r1, #0
  40542c:	4630      	mov	r0, r6
  40542e:	f7ff fe3f 	bl	4050b0 <_sbrk_r>
  405432:	68bb      	ldr	r3, [r7, #8]
  405434:	442b      	add	r3, r5
  405436:	4298      	cmp	r0, r3
  405438:	d004      	beq.n	405444 <_malloc_trim_r+0x48>
  40543a:	4630      	mov	r0, r6
  40543c:	f7ff fb38 	bl	404ab0 <__malloc_unlock>
  405440:	2000      	movs	r0, #0
  405442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405444:	4261      	negs	r1, r4
  405446:	4630      	mov	r0, r6
  405448:	f7ff fe32 	bl	4050b0 <_sbrk_r>
  40544c:	3001      	adds	r0, #1
  40544e:	d00d      	beq.n	40546c <_malloc_trim_r+0x70>
  405450:	4b10      	ldr	r3, [pc, #64]	; (405494 <_malloc_trim_r+0x98>)
  405452:	68ba      	ldr	r2, [r7, #8]
  405454:	6819      	ldr	r1, [r3, #0]
  405456:	1b2d      	subs	r5, r5, r4
  405458:	f045 0501 	orr.w	r5, r5, #1
  40545c:	4630      	mov	r0, r6
  40545e:	1b09      	subs	r1, r1, r4
  405460:	6055      	str	r5, [r2, #4]
  405462:	6019      	str	r1, [r3, #0]
  405464:	f7ff fb24 	bl	404ab0 <__malloc_unlock>
  405468:	2001      	movs	r0, #1
  40546a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40546c:	2100      	movs	r1, #0
  40546e:	4630      	mov	r0, r6
  405470:	f7ff fe1e 	bl	4050b0 <_sbrk_r>
  405474:	68ba      	ldr	r2, [r7, #8]
  405476:	1a83      	subs	r3, r0, r2
  405478:	2b0f      	cmp	r3, #15
  40547a:	ddde      	ble.n	40543a <_malloc_trim_r+0x3e>
  40547c:	4c06      	ldr	r4, [pc, #24]	; (405498 <_malloc_trim_r+0x9c>)
  40547e:	4905      	ldr	r1, [pc, #20]	; (405494 <_malloc_trim_r+0x98>)
  405480:	6824      	ldr	r4, [r4, #0]
  405482:	f043 0301 	orr.w	r3, r3, #1
  405486:	1b00      	subs	r0, r0, r4
  405488:	6053      	str	r3, [r2, #4]
  40548a:	6008      	str	r0, [r1, #0]
  40548c:	e7d5      	b.n	40543a <_malloc_trim_r+0x3e>
  40548e:	bf00      	nop
  405490:	20400454 	.word	0x20400454
  405494:	20400c88 	.word	0x20400c88
  405498:	2040085c 	.word	0x2040085c

0040549c <_free_r>:
  40549c:	2900      	cmp	r1, #0
  40549e:	d044      	beq.n	40552a <_free_r+0x8e>
  4054a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4054a4:	460d      	mov	r5, r1
  4054a6:	4680      	mov	r8, r0
  4054a8:	f7ff fafc 	bl	404aa4 <__malloc_lock>
  4054ac:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4054b0:	4969      	ldr	r1, [pc, #420]	; (405658 <_free_r+0x1bc>)
  4054b2:	f027 0301 	bic.w	r3, r7, #1
  4054b6:	f1a5 0408 	sub.w	r4, r5, #8
  4054ba:	18e2      	adds	r2, r4, r3
  4054bc:	688e      	ldr	r6, [r1, #8]
  4054be:	6850      	ldr	r0, [r2, #4]
  4054c0:	42b2      	cmp	r2, r6
  4054c2:	f020 0003 	bic.w	r0, r0, #3
  4054c6:	d05e      	beq.n	405586 <_free_r+0xea>
  4054c8:	07fe      	lsls	r6, r7, #31
  4054ca:	6050      	str	r0, [r2, #4]
  4054cc:	d40b      	bmi.n	4054e6 <_free_r+0x4a>
  4054ce:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4054d2:	1be4      	subs	r4, r4, r7
  4054d4:	f101 0e08 	add.w	lr, r1, #8
  4054d8:	68a5      	ldr	r5, [r4, #8]
  4054da:	4575      	cmp	r5, lr
  4054dc:	443b      	add	r3, r7
  4054de:	d06d      	beq.n	4055bc <_free_r+0x120>
  4054e0:	68e7      	ldr	r7, [r4, #12]
  4054e2:	60ef      	str	r7, [r5, #12]
  4054e4:	60bd      	str	r5, [r7, #8]
  4054e6:	1815      	adds	r5, r2, r0
  4054e8:	686d      	ldr	r5, [r5, #4]
  4054ea:	07ed      	lsls	r5, r5, #31
  4054ec:	d53e      	bpl.n	40556c <_free_r+0xd0>
  4054ee:	f043 0201 	orr.w	r2, r3, #1
  4054f2:	6062      	str	r2, [r4, #4]
  4054f4:	50e3      	str	r3, [r4, r3]
  4054f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4054fa:	d217      	bcs.n	40552c <_free_r+0x90>
  4054fc:	08db      	lsrs	r3, r3, #3
  4054fe:	1c58      	adds	r0, r3, #1
  405500:	109a      	asrs	r2, r3, #2
  405502:	684d      	ldr	r5, [r1, #4]
  405504:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405508:	60a7      	str	r7, [r4, #8]
  40550a:	2301      	movs	r3, #1
  40550c:	4093      	lsls	r3, r2
  40550e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405512:	432b      	orrs	r3, r5
  405514:	3a08      	subs	r2, #8
  405516:	60e2      	str	r2, [r4, #12]
  405518:	604b      	str	r3, [r1, #4]
  40551a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40551e:	60fc      	str	r4, [r7, #12]
  405520:	4640      	mov	r0, r8
  405522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405526:	f7ff bac3 	b.w	404ab0 <__malloc_unlock>
  40552a:	4770      	bx	lr
  40552c:	0a5a      	lsrs	r2, r3, #9
  40552e:	2a04      	cmp	r2, #4
  405530:	d852      	bhi.n	4055d8 <_free_r+0x13c>
  405532:	099a      	lsrs	r2, r3, #6
  405534:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405538:	00ff      	lsls	r7, r7, #3
  40553a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40553e:	19c8      	adds	r0, r1, r7
  405540:	59ca      	ldr	r2, [r1, r7]
  405542:	3808      	subs	r0, #8
  405544:	4290      	cmp	r0, r2
  405546:	d04f      	beq.n	4055e8 <_free_r+0x14c>
  405548:	6851      	ldr	r1, [r2, #4]
  40554a:	f021 0103 	bic.w	r1, r1, #3
  40554e:	428b      	cmp	r3, r1
  405550:	d232      	bcs.n	4055b8 <_free_r+0x11c>
  405552:	6892      	ldr	r2, [r2, #8]
  405554:	4290      	cmp	r0, r2
  405556:	d1f7      	bne.n	405548 <_free_r+0xac>
  405558:	68c3      	ldr	r3, [r0, #12]
  40555a:	60a0      	str	r0, [r4, #8]
  40555c:	60e3      	str	r3, [r4, #12]
  40555e:	609c      	str	r4, [r3, #8]
  405560:	60c4      	str	r4, [r0, #12]
  405562:	4640      	mov	r0, r8
  405564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405568:	f7ff baa2 	b.w	404ab0 <__malloc_unlock>
  40556c:	6895      	ldr	r5, [r2, #8]
  40556e:	4f3b      	ldr	r7, [pc, #236]	; (40565c <_free_r+0x1c0>)
  405570:	42bd      	cmp	r5, r7
  405572:	4403      	add	r3, r0
  405574:	d040      	beq.n	4055f8 <_free_r+0x15c>
  405576:	68d0      	ldr	r0, [r2, #12]
  405578:	60e8      	str	r0, [r5, #12]
  40557a:	f043 0201 	orr.w	r2, r3, #1
  40557e:	6085      	str	r5, [r0, #8]
  405580:	6062      	str	r2, [r4, #4]
  405582:	50e3      	str	r3, [r4, r3]
  405584:	e7b7      	b.n	4054f6 <_free_r+0x5a>
  405586:	07ff      	lsls	r7, r7, #31
  405588:	4403      	add	r3, r0
  40558a:	d407      	bmi.n	40559c <_free_r+0x100>
  40558c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405590:	1aa4      	subs	r4, r4, r2
  405592:	4413      	add	r3, r2
  405594:	68a0      	ldr	r0, [r4, #8]
  405596:	68e2      	ldr	r2, [r4, #12]
  405598:	60c2      	str	r2, [r0, #12]
  40559a:	6090      	str	r0, [r2, #8]
  40559c:	4a30      	ldr	r2, [pc, #192]	; (405660 <_free_r+0x1c4>)
  40559e:	6812      	ldr	r2, [r2, #0]
  4055a0:	f043 0001 	orr.w	r0, r3, #1
  4055a4:	4293      	cmp	r3, r2
  4055a6:	6060      	str	r0, [r4, #4]
  4055a8:	608c      	str	r4, [r1, #8]
  4055aa:	d3b9      	bcc.n	405520 <_free_r+0x84>
  4055ac:	4b2d      	ldr	r3, [pc, #180]	; (405664 <_free_r+0x1c8>)
  4055ae:	4640      	mov	r0, r8
  4055b0:	6819      	ldr	r1, [r3, #0]
  4055b2:	f7ff ff23 	bl	4053fc <_malloc_trim_r>
  4055b6:	e7b3      	b.n	405520 <_free_r+0x84>
  4055b8:	4610      	mov	r0, r2
  4055ba:	e7cd      	b.n	405558 <_free_r+0xbc>
  4055bc:	1811      	adds	r1, r2, r0
  4055be:	6849      	ldr	r1, [r1, #4]
  4055c0:	07c9      	lsls	r1, r1, #31
  4055c2:	d444      	bmi.n	40564e <_free_r+0x1b2>
  4055c4:	6891      	ldr	r1, [r2, #8]
  4055c6:	68d2      	ldr	r2, [r2, #12]
  4055c8:	60ca      	str	r2, [r1, #12]
  4055ca:	4403      	add	r3, r0
  4055cc:	f043 0001 	orr.w	r0, r3, #1
  4055d0:	6091      	str	r1, [r2, #8]
  4055d2:	6060      	str	r0, [r4, #4]
  4055d4:	50e3      	str	r3, [r4, r3]
  4055d6:	e7a3      	b.n	405520 <_free_r+0x84>
  4055d8:	2a14      	cmp	r2, #20
  4055da:	d816      	bhi.n	40560a <_free_r+0x16e>
  4055dc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4055e0:	00ff      	lsls	r7, r7, #3
  4055e2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4055e6:	e7aa      	b.n	40553e <_free_r+0xa2>
  4055e8:	10aa      	asrs	r2, r5, #2
  4055ea:	2301      	movs	r3, #1
  4055ec:	684d      	ldr	r5, [r1, #4]
  4055ee:	4093      	lsls	r3, r2
  4055f0:	432b      	orrs	r3, r5
  4055f2:	604b      	str	r3, [r1, #4]
  4055f4:	4603      	mov	r3, r0
  4055f6:	e7b0      	b.n	40555a <_free_r+0xbe>
  4055f8:	f043 0201 	orr.w	r2, r3, #1
  4055fc:	614c      	str	r4, [r1, #20]
  4055fe:	610c      	str	r4, [r1, #16]
  405600:	60e5      	str	r5, [r4, #12]
  405602:	60a5      	str	r5, [r4, #8]
  405604:	6062      	str	r2, [r4, #4]
  405606:	50e3      	str	r3, [r4, r3]
  405608:	e78a      	b.n	405520 <_free_r+0x84>
  40560a:	2a54      	cmp	r2, #84	; 0x54
  40560c:	d806      	bhi.n	40561c <_free_r+0x180>
  40560e:	0b1a      	lsrs	r2, r3, #12
  405610:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405614:	00ff      	lsls	r7, r7, #3
  405616:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40561a:	e790      	b.n	40553e <_free_r+0xa2>
  40561c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405620:	d806      	bhi.n	405630 <_free_r+0x194>
  405622:	0bda      	lsrs	r2, r3, #15
  405624:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405628:	00ff      	lsls	r7, r7, #3
  40562a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40562e:	e786      	b.n	40553e <_free_r+0xa2>
  405630:	f240 5054 	movw	r0, #1364	; 0x554
  405634:	4282      	cmp	r2, r0
  405636:	d806      	bhi.n	405646 <_free_r+0x1aa>
  405638:	0c9a      	lsrs	r2, r3, #18
  40563a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40563e:	00ff      	lsls	r7, r7, #3
  405640:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405644:	e77b      	b.n	40553e <_free_r+0xa2>
  405646:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40564a:	257e      	movs	r5, #126	; 0x7e
  40564c:	e777      	b.n	40553e <_free_r+0xa2>
  40564e:	f043 0101 	orr.w	r1, r3, #1
  405652:	6061      	str	r1, [r4, #4]
  405654:	6013      	str	r3, [r2, #0]
  405656:	e763      	b.n	405520 <_free_r+0x84>
  405658:	20400454 	.word	0x20400454
  40565c:	2040045c 	.word	0x2040045c
  405660:	20400860 	.word	0x20400860
  405664:	20400cb8 	.word	0x20400cb8

00405668 <__ascii_mbtowc>:
  405668:	b082      	sub	sp, #8
  40566a:	b149      	cbz	r1, 405680 <__ascii_mbtowc+0x18>
  40566c:	b15a      	cbz	r2, 405686 <__ascii_mbtowc+0x1e>
  40566e:	b16b      	cbz	r3, 40568c <__ascii_mbtowc+0x24>
  405670:	7813      	ldrb	r3, [r2, #0]
  405672:	600b      	str	r3, [r1, #0]
  405674:	7812      	ldrb	r2, [r2, #0]
  405676:	1c10      	adds	r0, r2, #0
  405678:	bf18      	it	ne
  40567a:	2001      	movne	r0, #1
  40567c:	b002      	add	sp, #8
  40567e:	4770      	bx	lr
  405680:	a901      	add	r1, sp, #4
  405682:	2a00      	cmp	r2, #0
  405684:	d1f3      	bne.n	40566e <__ascii_mbtowc+0x6>
  405686:	4610      	mov	r0, r2
  405688:	b002      	add	sp, #8
  40568a:	4770      	bx	lr
  40568c:	f06f 0001 	mvn.w	r0, #1
  405690:	e7f4      	b.n	40567c <__ascii_mbtowc+0x14>
  405692:	bf00      	nop

00405694 <memmove>:
  405694:	4288      	cmp	r0, r1
  405696:	b5f0      	push	{r4, r5, r6, r7, lr}
  405698:	d90d      	bls.n	4056b6 <memmove+0x22>
  40569a:	188b      	adds	r3, r1, r2
  40569c:	4298      	cmp	r0, r3
  40569e:	d20a      	bcs.n	4056b6 <memmove+0x22>
  4056a0:	1884      	adds	r4, r0, r2
  4056a2:	2a00      	cmp	r2, #0
  4056a4:	d051      	beq.n	40574a <memmove+0xb6>
  4056a6:	4622      	mov	r2, r4
  4056a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4056ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4056b0:	4299      	cmp	r1, r3
  4056b2:	d1f9      	bne.n	4056a8 <memmove+0x14>
  4056b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4056b6:	2a0f      	cmp	r2, #15
  4056b8:	d948      	bls.n	40574c <memmove+0xb8>
  4056ba:	ea41 0300 	orr.w	r3, r1, r0
  4056be:	079b      	lsls	r3, r3, #30
  4056c0:	d146      	bne.n	405750 <memmove+0xbc>
  4056c2:	f100 0410 	add.w	r4, r0, #16
  4056c6:	f101 0310 	add.w	r3, r1, #16
  4056ca:	4615      	mov	r5, r2
  4056cc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4056d0:	f844 6c10 	str.w	r6, [r4, #-16]
  4056d4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4056d8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4056dc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4056e0:	f844 6c08 	str.w	r6, [r4, #-8]
  4056e4:	3d10      	subs	r5, #16
  4056e6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4056ea:	f844 6c04 	str.w	r6, [r4, #-4]
  4056ee:	2d0f      	cmp	r5, #15
  4056f0:	f103 0310 	add.w	r3, r3, #16
  4056f4:	f104 0410 	add.w	r4, r4, #16
  4056f8:	d8e8      	bhi.n	4056cc <memmove+0x38>
  4056fa:	f1a2 0310 	sub.w	r3, r2, #16
  4056fe:	f023 030f 	bic.w	r3, r3, #15
  405702:	f002 0e0f 	and.w	lr, r2, #15
  405706:	3310      	adds	r3, #16
  405708:	f1be 0f03 	cmp.w	lr, #3
  40570c:	4419      	add	r1, r3
  40570e:	4403      	add	r3, r0
  405710:	d921      	bls.n	405756 <memmove+0xc2>
  405712:	1f1e      	subs	r6, r3, #4
  405714:	460d      	mov	r5, r1
  405716:	4674      	mov	r4, lr
  405718:	3c04      	subs	r4, #4
  40571a:	f855 7b04 	ldr.w	r7, [r5], #4
  40571e:	f846 7f04 	str.w	r7, [r6, #4]!
  405722:	2c03      	cmp	r4, #3
  405724:	d8f8      	bhi.n	405718 <memmove+0x84>
  405726:	f1ae 0404 	sub.w	r4, lr, #4
  40572a:	f024 0403 	bic.w	r4, r4, #3
  40572e:	3404      	adds	r4, #4
  405730:	4421      	add	r1, r4
  405732:	4423      	add	r3, r4
  405734:	f002 0203 	and.w	r2, r2, #3
  405738:	b162      	cbz	r2, 405754 <memmove+0xc0>
  40573a:	3b01      	subs	r3, #1
  40573c:	440a      	add	r2, r1
  40573e:	f811 4b01 	ldrb.w	r4, [r1], #1
  405742:	f803 4f01 	strb.w	r4, [r3, #1]!
  405746:	428a      	cmp	r2, r1
  405748:	d1f9      	bne.n	40573e <memmove+0xaa>
  40574a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40574c:	4603      	mov	r3, r0
  40574e:	e7f3      	b.n	405738 <memmove+0xa4>
  405750:	4603      	mov	r3, r0
  405752:	e7f2      	b.n	40573a <memmove+0xa6>
  405754:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405756:	4672      	mov	r2, lr
  405758:	e7ee      	b.n	405738 <memmove+0xa4>
  40575a:	bf00      	nop

0040575c <_realloc_r>:
  40575c:	2900      	cmp	r1, #0
  40575e:	f000 8095 	beq.w	40588c <_realloc_r+0x130>
  405762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405766:	460d      	mov	r5, r1
  405768:	4616      	mov	r6, r2
  40576a:	b083      	sub	sp, #12
  40576c:	4680      	mov	r8, r0
  40576e:	f106 070b 	add.w	r7, r6, #11
  405772:	f7ff f997 	bl	404aa4 <__malloc_lock>
  405776:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40577a:	2f16      	cmp	r7, #22
  40577c:	f02e 0403 	bic.w	r4, lr, #3
  405780:	f1a5 0908 	sub.w	r9, r5, #8
  405784:	d83c      	bhi.n	405800 <_realloc_r+0xa4>
  405786:	2210      	movs	r2, #16
  405788:	4617      	mov	r7, r2
  40578a:	42be      	cmp	r6, r7
  40578c:	d83d      	bhi.n	40580a <_realloc_r+0xae>
  40578e:	4294      	cmp	r4, r2
  405790:	da43      	bge.n	40581a <_realloc_r+0xbe>
  405792:	4bc4      	ldr	r3, [pc, #784]	; (405aa4 <_realloc_r+0x348>)
  405794:	6899      	ldr	r1, [r3, #8]
  405796:	eb09 0004 	add.w	r0, r9, r4
  40579a:	4288      	cmp	r0, r1
  40579c:	f000 80b4 	beq.w	405908 <_realloc_r+0x1ac>
  4057a0:	6843      	ldr	r3, [r0, #4]
  4057a2:	f023 0101 	bic.w	r1, r3, #1
  4057a6:	4401      	add	r1, r0
  4057a8:	6849      	ldr	r1, [r1, #4]
  4057aa:	07c9      	lsls	r1, r1, #31
  4057ac:	d54c      	bpl.n	405848 <_realloc_r+0xec>
  4057ae:	f01e 0f01 	tst.w	lr, #1
  4057b2:	f000 809b 	beq.w	4058ec <_realloc_r+0x190>
  4057b6:	4631      	mov	r1, r6
  4057b8:	4640      	mov	r0, r8
  4057ba:	f7fe fdd3 	bl	404364 <_malloc_r>
  4057be:	4606      	mov	r6, r0
  4057c0:	2800      	cmp	r0, #0
  4057c2:	d03a      	beq.n	40583a <_realloc_r+0xde>
  4057c4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4057c8:	f023 0301 	bic.w	r3, r3, #1
  4057cc:	444b      	add	r3, r9
  4057ce:	f1a0 0208 	sub.w	r2, r0, #8
  4057d2:	429a      	cmp	r2, r3
  4057d4:	f000 8121 	beq.w	405a1a <_realloc_r+0x2be>
  4057d8:	1f22      	subs	r2, r4, #4
  4057da:	2a24      	cmp	r2, #36	; 0x24
  4057dc:	f200 8107 	bhi.w	4059ee <_realloc_r+0x292>
  4057e0:	2a13      	cmp	r2, #19
  4057e2:	f200 80db 	bhi.w	40599c <_realloc_r+0x240>
  4057e6:	4603      	mov	r3, r0
  4057e8:	462a      	mov	r2, r5
  4057ea:	6811      	ldr	r1, [r2, #0]
  4057ec:	6019      	str	r1, [r3, #0]
  4057ee:	6851      	ldr	r1, [r2, #4]
  4057f0:	6059      	str	r1, [r3, #4]
  4057f2:	6892      	ldr	r2, [r2, #8]
  4057f4:	609a      	str	r2, [r3, #8]
  4057f6:	4629      	mov	r1, r5
  4057f8:	4640      	mov	r0, r8
  4057fa:	f7ff fe4f 	bl	40549c <_free_r>
  4057fe:	e01c      	b.n	40583a <_realloc_r+0xde>
  405800:	f027 0707 	bic.w	r7, r7, #7
  405804:	2f00      	cmp	r7, #0
  405806:	463a      	mov	r2, r7
  405808:	dabf      	bge.n	40578a <_realloc_r+0x2e>
  40580a:	2600      	movs	r6, #0
  40580c:	230c      	movs	r3, #12
  40580e:	4630      	mov	r0, r6
  405810:	f8c8 3000 	str.w	r3, [r8]
  405814:	b003      	add	sp, #12
  405816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40581a:	462e      	mov	r6, r5
  40581c:	1be3      	subs	r3, r4, r7
  40581e:	2b0f      	cmp	r3, #15
  405820:	d81e      	bhi.n	405860 <_realloc_r+0x104>
  405822:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405826:	f003 0301 	and.w	r3, r3, #1
  40582a:	4323      	orrs	r3, r4
  40582c:	444c      	add	r4, r9
  40582e:	f8c9 3004 	str.w	r3, [r9, #4]
  405832:	6863      	ldr	r3, [r4, #4]
  405834:	f043 0301 	orr.w	r3, r3, #1
  405838:	6063      	str	r3, [r4, #4]
  40583a:	4640      	mov	r0, r8
  40583c:	f7ff f938 	bl	404ab0 <__malloc_unlock>
  405840:	4630      	mov	r0, r6
  405842:	b003      	add	sp, #12
  405844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405848:	f023 0303 	bic.w	r3, r3, #3
  40584c:	18e1      	adds	r1, r4, r3
  40584e:	4291      	cmp	r1, r2
  405850:	db1f      	blt.n	405892 <_realloc_r+0x136>
  405852:	68c3      	ldr	r3, [r0, #12]
  405854:	6882      	ldr	r2, [r0, #8]
  405856:	462e      	mov	r6, r5
  405858:	60d3      	str	r3, [r2, #12]
  40585a:	460c      	mov	r4, r1
  40585c:	609a      	str	r2, [r3, #8]
  40585e:	e7dd      	b.n	40581c <_realloc_r+0xc0>
  405860:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405864:	eb09 0107 	add.w	r1, r9, r7
  405868:	f002 0201 	and.w	r2, r2, #1
  40586c:	444c      	add	r4, r9
  40586e:	f043 0301 	orr.w	r3, r3, #1
  405872:	4317      	orrs	r7, r2
  405874:	f8c9 7004 	str.w	r7, [r9, #4]
  405878:	604b      	str	r3, [r1, #4]
  40587a:	6863      	ldr	r3, [r4, #4]
  40587c:	f043 0301 	orr.w	r3, r3, #1
  405880:	3108      	adds	r1, #8
  405882:	6063      	str	r3, [r4, #4]
  405884:	4640      	mov	r0, r8
  405886:	f7ff fe09 	bl	40549c <_free_r>
  40588a:	e7d6      	b.n	40583a <_realloc_r+0xde>
  40588c:	4611      	mov	r1, r2
  40588e:	f7fe bd69 	b.w	404364 <_malloc_r>
  405892:	f01e 0f01 	tst.w	lr, #1
  405896:	d18e      	bne.n	4057b6 <_realloc_r+0x5a>
  405898:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40589c:	eba9 0a01 	sub.w	sl, r9, r1
  4058a0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4058a4:	f021 0103 	bic.w	r1, r1, #3
  4058a8:	440b      	add	r3, r1
  4058aa:	4423      	add	r3, r4
  4058ac:	4293      	cmp	r3, r2
  4058ae:	db25      	blt.n	4058fc <_realloc_r+0x1a0>
  4058b0:	68c2      	ldr	r2, [r0, #12]
  4058b2:	6881      	ldr	r1, [r0, #8]
  4058b4:	4656      	mov	r6, sl
  4058b6:	60ca      	str	r2, [r1, #12]
  4058b8:	6091      	str	r1, [r2, #8]
  4058ba:	f8da 100c 	ldr.w	r1, [sl, #12]
  4058be:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4058c2:	1f22      	subs	r2, r4, #4
  4058c4:	2a24      	cmp	r2, #36	; 0x24
  4058c6:	60c1      	str	r1, [r0, #12]
  4058c8:	6088      	str	r0, [r1, #8]
  4058ca:	f200 8094 	bhi.w	4059f6 <_realloc_r+0x29a>
  4058ce:	2a13      	cmp	r2, #19
  4058d0:	d96f      	bls.n	4059b2 <_realloc_r+0x256>
  4058d2:	6829      	ldr	r1, [r5, #0]
  4058d4:	f8ca 1008 	str.w	r1, [sl, #8]
  4058d8:	6869      	ldr	r1, [r5, #4]
  4058da:	f8ca 100c 	str.w	r1, [sl, #12]
  4058de:	2a1b      	cmp	r2, #27
  4058e0:	f200 80a2 	bhi.w	405a28 <_realloc_r+0x2cc>
  4058e4:	3508      	adds	r5, #8
  4058e6:	f10a 0210 	add.w	r2, sl, #16
  4058ea:	e063      	b.n	4059b4 <_realloc_r+0x258>
  4058ec:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4058f0:	eba9 0a03 	sub.w	sl, r9, r3
  4058f4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4058f8:	f021 0103 	bic.w	r1, r1, #3
  4058fc:	1863      	adds	r3, r4, r1
  4058fe:	4293      	cmp	r3, r2
  405900:	f6ff af59 	blt.w	4057b6 <_realloc_r+0x5a>
  405904:	4656      	mov	r6, sl
  405906:	e7d8      	b.n	4058ba <_realloc_r+0x15e>
  405908:	6841      	ldr	r1, [r0, #4]
  40590a:	f021 0b03 	bic.w	fp, r1, #3
  40590e:	44a3      	add	fp, r4
  405910:	f107 0010 	add.w	r0, r7, #16
  405914:	4583      	cmp	fp, r0
  405916:	da56      	bge.n	4059c6 <_realloc_r+0x26a>
  405918:	f01e 0f01 	tst.w	lr, #1
  40591c:	f47f af4b 	bne.w	4057b6 <_realloc_r+0x5a>
  405920:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405924:	eba9 0a01 	sub.w	sl, r9, r1
  405928:	f8da 1004 	ldr.w	r1, [sl, #4]
  40592c:	f021 0103 	bic.w	r1, r1, #3
  405930:	448b      	add	fp, r1
  405932:	4558      	cmp	r0, fp
  405934:	dce2      	bgt.n	4058fc <_realloc_r+0x1a0>
  405936:	4656      	mov	r6, sl
  405938:	f8da 100c 	ldr.w	r1, [sl, #12]
  40593c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405940:	1f22      	subs	r2, r4, #4
  405942:	2a24      	cmp	r2, #36	; 0x24
  405944:	60c1      	str	r1, [r0, #12]
  405946:	6088      	str	r0, [r1, #8]
  405948:	f200 808f 	bhi.w	405a6a <_realloc_r+0x30e>
  40594c:	2a13      	cmp	r2, #19
  40594e:	f240 808a 	bls.w	405a66 <_realloc_r+0x30a>
  405952:	6829      	ldr	r1, [r5, #0]
  405954:	f8ca 1008 	str.w	r1, [sl, #8]
  405958:	6869      	ldr	r1, [r5, #4]
  40595a:	f8ca 100c 	str.w	r1, [sl, #12]
  40595e:	2a1b      	cmp	r2, #27
  405960:	f200 808a 	bhi.w	405a78 <_realloc_r+0x31c>
  405964:	3508      	adds	r5, #8
  405966:	f10a 0210 	add.w	r2, sl, #16
  40596a:	6829      	ldr	r1, [r5, #0]
  40596c:	6011      	str	r1, [r2, #0]
  40596e:	6869      	ldr	r1, [r5, #4]
  405970:	6051      	str	r1, [r2, #4]
  405972:	68a9      	ldr	r1, [r5, #8]
  405974:	6091      	str	r1, [r2, #8]
  405976:	eb0a 0107 	add.w	r1, sl, r7
  40597a:	ebab 0207 	sub.w	r2, fp, r7
  40597e:	f042 0201 	orr.w	r2, r2, #1
  405982:	6099      	str	r1, [r3, #8]
  405984:	604a      	str	r2, [r1, #4]
  405986:	f8da 3004 	ldr.w	r3, [sl, #4]
  40598a:	f003 0301 	and.w	r3, r3, #1
  40598e:	431f      	orrs	r7, r3
  405990:	4640      	mov	r0, r8
  405992:	f8ca 7004 	str.w	r7, [sl, #4]
  405996:	f7ff f88b 	bl	404ab0 <__malloc_unlock>
  40599a:	e751      	b.n	405840 <_realloc_r+0xe4>
  40599c:	682b      	ldr	r3, [r5, #0]
  40599e:	6003      	str	r3, [r0, #0]
  4059a0:	686b      	ldr	r3, [r5, #4]
  4059a2:	6043      	str	r3, [r0, #4]
  4059a4:	2a1b      	cmp	r2, #27
  4059a6:	d82d      	bhi.n	405a04 <_realloc_r+0x2a8>
  4059a8:	f100 0308 	add.w	r3, r0, #8
  4059ac:	f105 0208 	add.w	r2, r5, #8
  4059b0:	e71b      	b.n	4057ea <_realloc_r+0x8e>
  4059b2:	4632      	mov	r2, r6
  4059b4:	6829      	ldr	r1, [r5, #0]
  4059b6:	6011      	str	r1, [r2, #0]
  4059b8:	6869      	ldr	r1, [r5, #4]
  4059ba:	6051      	str	r1, [r2, #4]
  4059bc:	68a9      	ldr	r1, [r5, #8]
  4059be:	6091      	str	r1, [r2, #8]
  4059c0:	461c      	mov	r4, r3
  4059c2:	46d1      	mov	r9, sl
  4059c4:	e72a      	b.n	40581c <_realloc_r+0xc0>
  4059c6:	eb09 0107 	add.w	r1, r9, r7
  4059ca:	ebab 0b07 	sub.w	fp, fp, r7
  4059ce:	f04b 0201 	orr.w	r2, fp, #1
  4059d2:	6099      	str	r1, [r3, #8]
  4059d4:	604a      	str	r2, [r1, #4]
  4059d6:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4059da:	f003 0301 	and.w	r3, r3, #1
  4059de:	431f      	orrs	r7, r3
  4059e0:	4640      	mov	r0, r8
  4059e2:	f845 7c04 	str.w	r7, [r5, #-4]
  4059e6:	f7ff f863 	bl	404ab0 <__malloc_unlock>
  4059ea:	462e      	mov	r6, r5
  4059ec:	e728      	b.n	405840 <_realloc_r+0xe4>
  4059ee:	4629      	mov	r1, r5
  4059f0:	f7ff fe50 	bl	405694 <memmove>
  4059f4:	e6ff      	b.n	4057f6 <_realloc_r+0x9a>
  4059f6:	4629      	mov	r1, r5
  4059f8:	4630      	mov	r0, r6
  4059fa:	461c      	mov	r4, r3
  4059fc:	46d1      	mov	r9, sl
  4059fe:	f7ff fe49 	bl	405694 <memmove>
  405a02:	e70b      	b.n	40581c <_realloc_r+0xc0>
  405a04:	68ab      	ldr	r3, [r5, #8]
  405a06:	6083      	str	r3, [r0, #8]
  405a08:	68eb      	ldr	r3, [r5, #12]
  405a0a:	60c3      	str	r3, [r0, #12]
  405a0c:	2a24      	cmp	r2, #36	; 0x24
  405a0e:	d017      	beq.n	405a40 <_realloc_r+0x2e4>
  405a10:	f100 0310 	add.w	r3, r0, #16
  405a14:	f105 0210 	add.w	r2, r5, #16
  405a18:	e6e7      	b.n	4057ea <_realloc_r+0x8e>
  405a1a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405a1e:	f023 0303 	bic.w	r3, r3, #3
  405a22:	441c      	add	r4, r3
  405a24:	462e      	mov	r6, r5
  405a26:	e6f9      	b.n	40581c <_realloc_r+0xc0>
  405a28:	68a9      	ldr	r1, [r5, #8]
  405a2a:	f8ca 1010 	str.w	r1, [sl, #16]
  405a2e:	68e9      	ldr	r1, [r5, #12]
  405a30:	f8ca 1014 	str.w	r1, [sl, #20]
  405a34:	2a24      	cmp	r2, #36	; 0x24
  405a36:	d00c      	beq.n	405a52 <_realloc_r+0x2f6>
  405a38:	3510      	adds	r5, #16
  405a3a:	f10a 0218 	add.w	r2, sl, #24
  405a3e:	e7b9      	b.n	4059b4 <_realloc_r+0x258>
  405a40:	692b      	ldr	r3, [r5, #16]
  405a42:	6103      	str	r3, [r0, #16]
  405a44:	696b      	ldr	r3, [r5, #20]
  405a46:	6143      	str	r3, [r0, #20]
  405a48:	f105 0218 	add.w	r2, r5, #24
  405a4c:	f100 0318 	add.w	r3, r0, #24
  405a50:	e6cb      	b.n	4057ea <_realloc_r+0x8e>
  405a52:	692a      	ldr	r2, [r5, #16]
  405a54:	f8ca 2018 	str.w	r2, [sl, #24]
  405a58:	696a      	ldr	r2, [r5, #20]
  405a5a:	f8ca 201c 	str.w	r2, [sl, #28]
  405a5e:	3518      	adds	r5, #24
  405a60:	f10a 0220 	add.w	r2, sl, #32
  405a64:	e7a6      	b.n	4059b4 <_realloc_r+0x258>
  405a66:	4632      	mov	r2, r6
  405a68:	e77f      	b.n	40596a <_realloc_r+0x20e>
  405a6a:	4629      	mov	r1, r5
  405a6c:	4630      	mov	r0, r6
  405a6e:	9301      	str	r3, [sp, #4]
  405a70:	f7ff fe10 	bl	405694 <memmove>
  405a74:	9b01      	ldr	r3, [sp, #4]
  405a76:	e77e      	b.n	405976 <_realloc_r+0x21a>
  405a78:	68a9      	ldr	r1, [r5, #8]
  405a7a:	f8ca 1010 	str.w	r1, [sl, #16]
  405a7e:	68e9      	ldr	r1, [r5, #12]
  405a80:	f8ca 1014 	str.w	r1, [sl, #20]
  405a84:	2a24      	cmp	r2, #36	; 0x24
  405a86:	d003      	beq.n	405a90 <_realloc_r+0x334>
  405a88:	3510      	adds	r5, #16
  405a8a:	f10a 0218 	add.w	r2, sl, #24
  405a8e:	e76c      	b.n	40596a <_realloc_r+0x20e>
  405a90:	692a      	ldr	r2, [r5, #16]
  405a92:	f8ca 2018 	str.w	r2, [sl, #24]
  405a96:	696a      	ldr	r2, [r5, #20]
  405a98:	f8ca 201c 	str.w	r2, [sl, #28]
  405a9c:	3518      	adds	r5, #24
  405a9e:	f10a 0220 	add.w	r2, sl, #32
  405aa2:	e762      	b.n	40596a <_realloc_r+0x20e>
  405aa4:	20400454 	.word	0x20400454

00405aa8 <__ascii_wctomb>:
  405aa8:	b121      	cbz	r1, 405ab4 <__ascii_wctomb+0xc>
  405aaa:	2aff      	cmp	r2, #255	; 0xff
  405aac:	d804      	bhi.n	405ab8 <__ascii_wctomb+0x10>
  405aae:	700a      	strb	r2, [r1, #0]
  405ab0:	2001      	movs	r0, #1
  405ab2:	4770      	bx	lr
  405ab4:	4608      	mov	r0, r1
  405ab6:	4770      	bx	lr
  405ab8:	238a      	movs	r3, #138	; 0x8a
  405aba:	6003      	str	r3, [r0, #0]
  405abc:	f04f 30ff 	mov.w	r0, #4294967295
  405ac0:	4770      	bx	lr
  405ac2:	bf00      	nop

00405ac4 <__aeabi_drsub>:
  405ac4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405ac8:	e002      	b.n	405ad0 <__adddf3>
  405aca:	bf00      	nop

00405acc <__aeabi_dsub>:
  405acc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405ad0 <__adddf3>:
  405ad0:	b530      	push	{r4, r5, lr}
  405ad2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405ad6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405ada:	ea94 0f05 	teq	r4, r5
  405ade:	bf08      	it	eq
  405ae0:	ea90 0f02 	teqeq	r0, r2
  405ae4:	bf1f      	itttt	ne
  405ae6:	ea54 0c00 	orrsne.w	ip, r4, r0
  405aea:	ea55 0c02 	orrsne.w	ip, r5, r2
  405aee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405af2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405af6:	f000 80e2 	beq.w	405cbe <__adddf3+0x1ee>
  405afa:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405afe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405b02:	bfb8      	it	lt
  405b04:	426d      	neglt	r5, r5
  405b06:	dd0c      	ble.n	405b22 <__adddf3+0x52>
  405b08:	442c      	add	r4, r5
  405b0a:	ea80 0202 	eor.w	r2, r0, r2
  405b0e:	ea81 0303 	eor.w	r3, r1, r3
  405b12:	ea82 0000 	eor.w	r0, r2, r0
  405b16:	ea83 0101 	eor.w	r1, r3, r1
  405b1a:	ea80 0202 	eor.w	r2, r0, r2
  405b1e:	ea81 0303 	eor.w	r3, r1, r3
  405b22:	2d36      	cmp	r5, #54	; 0x36
  405b24:	bf88      	it	hi
  405b26:	bd30      	pophi	{r4, r5, pc}
  405b28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405b2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405b30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405b34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405b38:	d002      	beq.n	405b40 <__adddf3+0x70>
  405b3a:	4240      	negs	r0, r0
  405b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405b40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405b44:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405b48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405b4c:	d002      	beq.n	405b54 <__adddf3+0x84>
  405b4e:	4252      	negs	r2, r2
  405b50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405b54:	ea94 0f05 	teq	r4, r5
  405b58:	f000 80a7 	beq.w	405caa <__adddf3+0x1da>
  405b5c:	f1a4 0401 	sub.w	r4, r4, #1
  405b60:	f1d5 0e20 	rsbs	lr, r5, #32
  405b64:	db0d      	blt.n	405b82 <__adddf3+0xb2>
  405b66:	fa02 fc0e 	lsl.w	ip, r2, lr
  405b6a:	fa22 f205 	lsr.w	r2, r2, r5
  405b6e:	1880      	adds	r0, r0, r2
  405b70:	f141 0100 	adc.w	r1, r1, #0
  405b74:	fa03 f20e 	lsl.w	r2, r3, lr
  405b78:	1880      	adds	r0, r0, r2
  405b7a:	fa43 f305 	asr.w	r3, r3, r5
  405b7e:	4159      	adcs	r1, r3
  405b80:	e00e      	b.n	405ba0 <__adddf3+0xd0>
  405b82:	f1a5 0520 	sub.w	r5, r5, #32
  405b86:	f10e 0e20 	add.w	lr, lr, #32
  405b8a:	2a01      	cmp	r2, #1
  405b8c:	fa03 fc0e 	lsl.w	ip, r3, lr
  405b90:	bf28      	it	cs
  405b92:	f04c 0c02 	orrcs.w	ip, ip, #2
  405b96:	fa43 f305 	asr.w	r3, r3, r5
  405b9a:	18c0      	adds	r0, r0, r3
  405b9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405ba0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405ba4:	d507      	bpl.n	405bb6 <__adddf3+0xe6>
  405ba6:	f04f 0e00 	mov.w	lr, #0
  405baa:	f1dc 0c00 	rsbs	ip, ip, #0
  405bae:	eb7e 0000 	sbcs.w	r0, lr, r0
  405bb2:	eb6e 0101 	sbc.w	r1, lr, r1
  405bb6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405bba:	d31b      	bcc.n	405bf4 <__adddf3+0x124>
  405bbc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405bc0:	d30c      	bcc.n	405bdc <__adddf3+0x10c>
  405bc2:	0849      	lsrs	r1, r1, #1
  405bc4:	ea5f 0030 	movs.w	r0, r0, rrx
  405bc8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405bcc:	f104 0401 	add.w	r4, r4, #1
  405bd0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405bd4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405bd8:	f080 809a 	bcs.w	405d10 <__adddf3+0x240>
  405bdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405be0:	bf08      	it	eq
  405be2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405be6:	f150 0000 	adcs.w	r0, r0, #0
  405bea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405bee:	ea41 0105 	orr.w	r1, r1, r5
  405bf2:	bd30      	pop	{r4, r5, pc}
  405bf4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405bf8:	4140      	adcs	r0, r0
  405bfa:	eb41 0101 	adc.w	r1, r1, r1
  405bfe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405c02:	f1a4 0401 	sub.w	r4, r4, #1
  405c06:	d1e9      	bne.n	405bdc <__adddf3+0x10c>
  405c08:	f091 0f00 	teq	r1, #0
  405c0c:	bf04      	itt	eq
  405c0e:	4601      	moveq	r1, r0
  405c10:	2000      	moveq	r0, #0
  405c12:	fab1 f381 	clz	r3, r1
  405c16:	bf08      	it	eq
  405c18:	3320      	addeq	r3, #32
  405c1a:	f1a3 030b 	sub.w	r3, r3, #11
  405c1e:	f1b3 0220 	subs.w	r2, r3, #32
  405c22:	da0c      	bge.n	405c3e <__adddf3+0x16e>
  405c24:	320c      	adds	r2, #12
  405c26:	dd08      	ble.n	405c3a <__adddf3+0x16a>
  405c28:	f102 0c14 	add.w	ip, r2, #20
  405c2c:	f1c2 020c 	rsb	r2, r2, #12
  405c30:	fa01 f00c 	lsl.w	r0, r1, ip
  405c34:	fa21 f102 	lsr.w	r1, r1, r2
  405c38:	e00c      	b.n	405c54 <__adddf3+0x184>
  405c3a:	f102 0214 	add.w	r2, r2, #20
  405c3e:	bfd8      	it	le
  405c40:	f1c2 0c20 	rsble	ip, r2, #32
  405c44:	fa01 f102 	lsl.w	r1, r1, r2
  405c48:	fa20 fc0c 	lsr.w	ip, r0, ip
  405c4c:	bfdc      	itt	le
  405c4e:	ea41 010c 	orrle.w	r1, r1, ip
  405c52:	4090      	lslle	r0, r2
  405c54:	1ae4      	subs	r4, r4, r3
  405c56:	bfa2      	ittt	ge
  405c58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405c5c:	4329      	orrge	r1, r5
  405c5e:	bd30      	popge	{r4, r5, pc}
  405c60:	ea6f 0404 	mvn.w	r4, r4
  405c64:	3c1f      	subs	r4, #31
  405c66:	da1c      	bge.n	405ca2 <__adddf3+0x1d2>
  405c68:	340c      	adds	r4, #12
  405c6a:	dc0e      	bgt.n	405c8a <__adddf3+0x1ba>
  405c6c:	f104 0414 	add.w	r4, r4, #20
  405c70:	f1c4 0220 	rsb	r2, r4, #32
  405c74:	fa20 f004 	lsr.w	r0, r0, r4
  405c78:	fa01 f302 	lsl.w	r3, r1, r2
  405c7c:	ea40 0003 	orr.w	r0, r0, r3
  405c80:	fa21 f304 	lsr.w	r3, r1, r4
  405c84:	ea45 0103 	orr.w	r1, r5, r3
  405c88:	bd30      	pop	{r4, r5, pc}
  405c8a:	f1c4 040c 	rsb	r4, r4, #12
  405c8e:	f1c4 0220 	rsb	r2, r4, #32
  405c92:	fa20 f002 	lsr.w	r0, r0, r2
  405c96:	fa01 f304 	lsl.w	r3, r1, r4
  405c9a:	ea40 0003 	orr.w	r0, r0, r3
  405c9e:	4629      	mov	r1, r5
  405ca0:	bd30      	pop	{r4, r5, pc}
  405ca2:	fa21 f004 	lsr.w	r0, r1, r4
  405ca6:	4629      	mov	r1, r5
  405ca8:	bd30      	pop	{r4, r5, pc}
  405caa:	f094 0f00 	teq	r4, #0
  405cae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405cb2:	bf06      	itte	eq
  405cb4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405cb8:	3401      	addeq	r4, #1
  405cba:	3d01      	subne	r5, #1
  405cbc:	e74e      	b.n	405b5c <__adddf3+0x8c>
  405cbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405cc2:	bf18      	it	ne
  405cc4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405cc8:	d029      	beq.n	405d1e <__adddf3+0x24e>
  405cca:	ea94 0f05 	teq	r4, r5
  405cce:	bf08      	it	eq
  405cd0:	ea90 0f02 	teqeq	r0, r2
  405cd4:	d005      	beq.n	405ce2 <__adddf3+0x212>
  405cd6:	ea54 0c00 	orrs.w	ip, r4, r0
  405cda:	bf04      	itt	eq
  405cdc:	4619      	moveq	r1, r3
  405cde:	4610      	moveq	r0, r2
  405ce0:	bd30      	pop	{r4, r5, pc}
  405ce2:	ea91 0f03 	teq	r1, r3
  405ce6:	bf1e      	ittt	ne
  405ce8:	2100      	movne	r1, #0
  405cea:	2000      	movne	r0, #0
  405cec:	bd30      	popne	{r4, r5, pc}
  405cee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405cf2:	d105      	bne.n	405d00 <__adddf3+0x230>
  405cf4:	0040      	lsls	r0, r0, #1
  405cf6:	4149      	adcs	r1, r1
  405cf8:	bf28      	it	cs
  405cfa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405cfe:	bd30      	pop	{r4, r5, pc}
  405d00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405d04:	bf3c      	itt	cc
  405d06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405d0a:	bd30      	popcc	{r4, r5, pc}
  405d0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405d10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405d14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405d18:	f04f 0000 	mov.w	r0, #0
  405d1c:	bd30      	pop	{r4, r5, pc}
  405d1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405d22:	bf1a      	itte	ne
  405d24:	4619      	movne	r1, r3
  405d26:	4610      	movne	r0, r2
  405d28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405d2c:	bf1c      	itt	ne
  405d2e:	460b      	movne	r3, r1
  405d30:	4602      	movne	r2, r0
  405d32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405d36:	bf06      	itte	eq
  405d38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405d3c:	ea91 0f03 	teqeq	r1, r3
  405d40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405d44:	bd30      	pop	{r4, r5, pc}
  405d46:	bf00      	nop

00405d48 <__aeabi_ui2d>:
  405d48:	f090 0f00 	teq	r0, #0
  405d4c:	bf04      	itt	eq
  405d4e:	2100      	moveq	r1, #0
  405d50:	4770      	bxeq	lr
  405d52:	b530      	push	{r4, r5, lr}
  405d54:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405d58:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405d5c:	f04f 0500 	mov.w	r5, #0
  405d60:	f04f 0100 	mov.w	r1, #0
  405d64:	e750      	b.n	405c08 <__adddf3+0x138>
  405d66:	bf00      	nop

00405d68 <__aeabi_i2d>:
  405d68:	f090 0f00 	teq	r0, #0
  405d6c:	bf04      	itt	eq
  405d6e:	2100      	moveq	r1, #0
  405d70:	4770      	bxeq	lr
  405d72:	b530      	push	{r4, r5, lr}
  405d74:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405d78:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405d7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405d80:	bf48      	it	mi
  405d82:	4240      	negmi	r0, r0
  405d84:	f04f 0100 	mov.w	r1, #0
  405d88:	e73e      	b.n	405c08 <__adddf3+0x138>
  405d8a:	bf00      	nop

00405d8c <__aeabi_f2d>:
  405d8c:	0042      	lsls	r2, r0, #1
  405d8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405d92:	ea4f 0131 	mov.w	r1, r1, rrx
  405d96:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405d9a:	bf1f      	itttt	ne
  405d9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405da0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405da4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405da8:	4770      	bxne	lr
  405daa:	f092 0f00 	teq	r2, #0
  405dae:	bf14      	ite	ne
  405db0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405db4:	4770      	bxeq	lr
  405db6:	b530      	push	{r4, r5, lr}
  405db8:	f44f 7460 	mov.w	r4, #896	; 0x380
  405dbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405dc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405dc4:	e720      	b.n	405c08 <__adddf3+0x138>
  405dc6:	bf00      	nop

00405dc8 <__aeabi_ul2d>:
  405dc8:	ea50 0201 	orrs.w	r2, r0, r1
  405dcc:	bf08      	it	eq
  405dce:	4770      	bxeq	lr
  405dd0:	b530      	push	{r4, r5, lr}
  405dd2:	f04f 0500 	mov.w	r5, #0
  405dd6:	e00a      	b.n	405dee <__aeabi_l2d+0x16>

00405dd8 <__aeabi_l2d>:
  405dd8:	ea50 0201 	orrs.w	r2, r0, r1
  405ddc:	bf08      	it	eq
  405dde:	4770      	bxeq	lr
  405de0:	b530      	push	{r4, r5, lr}
  405de2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  405de6:	d502      	bpl.n	405dee <__aeabi_l2d+0x16>
  405de8:	4240      	negs	r0, r0
  405dea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405dee:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405df2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405df6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405dfa:	f43f aedc 	beq.w	405bb6 <__adddf3+0xe6>
  405dfe:	f04f 0203 	mov.w	r2, #3
  405e02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405e06:	bf18      	it	ne
  405e08:	3203      	addne	r2, #3
  405e0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405e0e:	bf18      	it	ne
  405e10:	3203      	addne	r2, #3
  405e12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  405e16:	f1c2 0320 	rsb	r3, r2, #32
  405e1a:	fa00 fc03 	lsl.w	ip, r0, r3
  405e1e:	fa20 f002 	lsr.w	r0, r0, r2
  405e22:	fa01 fe03 	lsl.w	lr, r1, r3
  405e26:	ea40 000e 	orr.w	r0, r0, lr
  405e2a:	fa21 f102 	lsr.w	r1, r1, r2
  405e2e:	4414      	add	r4, r2
  405e30:	e6c1      	b.n	405bb6 <__adddf3+0xe6>
  405e32:	bf00      	nop

00405e34 <__aeabi_dmul>:
  405e34:	b570      	push	{r4, r5, r6, lr}
  405e36:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405e3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405e3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405e42:	bf1d      	ittte	ne
  405e44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405e48:	ea94 0f0c 	teqne	r4, ip
  405e4c:	ea95 0f0c 	teqne	r5, ip
  405e50:	f000 f8de 	bleq	406010 <__aeabi_dmul+0x1dc>
  405e54:	442c      	add	r4, r5
  405e56:	ea81 0603 	eor.w	r6, r1, r3
  405e5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  405e5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  405e62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405e66:	bf18      	it	ne
  405e68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405e6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405e70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405e74:	d038      	beq.n	405ee8 <__aeabi_dmul+0xb4>
  405e76:	fba0 ce02 	umull	ip, lr, r0, r2
  405e7a:	f04f 0500 	mov.w	r5, #0
  405e7e:	fbe1 e502 	umlal	lr, r5, r1, r2
  405e82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405e86:	fbe0 e503 	umlal	lr, r5, r0, r3
  405e8a:	f04f 0600 	mov.w	r6, #0
  405e8e:	fbe1 5603 	umlal	r5, r6, r1, r3
  405e92:	f09c 0f00 	teq	ip, #0
  405e96:	bf18      	it	ne
  405e98:	f04e 0e01 	orrne.w	lr, lr, #1
  405e9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405ea0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405ea4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405ea8:	d204      	bcs.n	405eb4 <__aeabi_dmul+0x80>
  405eaa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  405eae:	416d      	adcs	r5, r5
  405eb0:	eb46 0606 	adc.w	r6, r6, r6
  405eb4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405eb8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405ebc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405ec0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405ec4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405ec8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405ecc:	bf88      	it	hi
  405ece:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405ed2:	d81e      	bhi.n	405f12 <__aeabi_dmul+0xde>
  405ed4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405ed8:	bf08      	it	eq
  405eda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405ede:	f150 0000 	adcs.w	r0, r0, #0
  405ee2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405ee6:	bd70      	pop	{r4, r5, r6, pc}
  405ee8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405eec:	ea46 0101 	orr.w	r1, r6, r1
  405ef0:	ea40 0002 	orr.w	r0, r0, r2
  405ef4:	ea81 0103 	eor.w	r1, r1, r3
  405ef8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405efc:	bfc2      	ittt	gt
  405efe:	ebd4 050c 	rsbsgt	r5, r4, ip
  405f02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405f06:	bd70      	popgt	{r4, r5, r6, pc}
  405f08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405f0c:	f04f 0e00 	mov.w	lr, #0
  405f10:	3c01      	subs	r4, #1
  405f12:	f300 80ab 	bgt.w	40606c <__aeabi_dmul+0x238>
  405f16:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405f1a:	bfde      	ittt	le
  405f1c:	2000      	movle	r0, #0
  405f1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405f22:	bd70      	pople	{r4, r5, r6, pc}
  405f24:	f1c4 0400 	rsb	r4, r4, #0
  405f28:	3c20      	subs	r4, #32
  405f2a:	da35      	bge.n	405f98 <__aeabi_dmul+0x164>
  405f2c:	340c      	adds	r4, #12
  405f2e:	dc1b      	bgt.n	405f68 <__aeabi_dmul+0x134>
  405f30:	f104 0414 	add.w	r4, r4, #20
  405f34:	f1c4 0520 	rsb	r5, r4, #32
  405f38:	fa00 f305 	lsl.w	r3, r0, r5
  405f3c:	fa20 f004 	lsr.w	r0, r0, r4
  405f40:	fa01 f205 	lsl.w	r2, r1, r5
  405f44:	ea40 0002 	orr.w	r0, r0, r2
  405f48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405f4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405f50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405f54:	fa21 f604 	lsr.w	r6, r1, r4
  405f58:	eb42 0106 	adc.w	r1, r2, r6
  405f5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405f60:	bf08      	it	eq
  405f62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405f66:	bd70      	pop	{r4, r5, r6, pc}
  405f68:	f1c4 040c 	rsb	r4, r4, #12
  405f6c:	f1c4 0520 	rsb	r5, r4, #32
  405f70:	fa00 f304 	lsl.w	r3, r0, r4
  405f74:	fa20 f005 	lsr.w	r0, r0, r5
  405f78:	fa01 f204 	lsl.w	r2, r1, r4
  405f7c:	ea40 0002 	orr.w	r0, r0, r2
  405f80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405f84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405f88:	f141 0100 	adc.w	r1, r1, #0
  405f8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405f90:	bf08      	it	eq
  405f92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405f96:	bd70      	pop	{r4, r5, r6, pc}
  405f98:	f1c4 0520 	rsb	r5, r4, #32
  405f9c:	fa00 f205 	lsl.w	r2, r0, r5
  405fa0:	ea4e 0e02 	orr.w	lr, lr, r2
  405fa4:	fa20 f304 	lsr.w	r3, r0, r4
  405fa8:	fa01 f205 	lsl.w	r2, r1, r5
  405fac:	ea43 0302 	orr.w	r3, r3, r2
  405fb0:	fa21 f004 	lsr.w	r0, r1, r4
  405fb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405fb8:	fa21 f204 	lsr.w	r2, r1, r4
  405fbc:	ea20 0002 	bic.w	r0, r0, r2
  405fc0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405fc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405fc8:	bf08      	it	eq
  405fca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405fce:	bd70      	pop	{r4, r5, r6, pc}
  405fd0:	f094 0f00 	teq	r4, #0
  405fd4:	d10f      	bne.n	405ff6 <__aeabi_dmul+0x1c2>
  405fd6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405fda:	0040      	lsls	r0, r0, #1
  405fdc:	eb41 0101 	adc.w	r1, r1, r1
  405fe0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405fe4:	bf08      	it	eq
  405fe6:	3c01      	subeq	r4, #1
  405fe8:	d0f7      	beq.n	405fda <__aeabi_dmul+0x1a6>
  405fea:	ea41 0106 	orr.w	r1, r1, r6
  405fee:	f095 0f00 	teq	r5, #0
  405ff2:	bf18      	it	ne
  405ff4:	4770      	bxne	lr
  405ff6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405ffa:	0052      	lsls	r2, r2, #1
  405ffc:	eb43 0303 	adc.w	r3, r3, r3
  406000:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  406004:	bf08      	it	eq
  406006:	3d01      	subeq	r5, #1
  406008:	d0f7      	beq.n	405ffa <__aeabi_dmul+0x1c6>
  40600a:	ea43 0306 	orr.w	r3, r3, r6
  40600e:	4770      	bx	lr
  406010:	ea94 0f0c 	teq	r4, ip
  406014:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406018:	bf18      	it	ne
  40601a:	ea95 0f0c 	teqne	r5, ip
  40601e:	d00c      	beq.n	40603a <__aeabi_dmul+0x206>
  406020:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406024:	bf18      	it	ne
  406026:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40602a:	d1d1      	bne.n	405fd0 <__aeabi_dmul+0x19c>
  40602c:	ea81 0103 	eor.w	r1, r1, r3
  406030:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406034:	f04f 0000 	mov.w	r0, #0
  406038:	bd70      	pop	{r4, r5, r6, pc}
  40603a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40603e:	bf06      	itte	eq
  406040:	4610      	moveq	r0, r2
  406042:	4619      	moveq	r1, r3
  406044:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406048:	d019      	beq.n	40607e <__aeabi_dmul+0x24a>
  40604a:	ea94 0f0c 	teq	r4, ip
  40604e:	d102      	bne.n	406056 <__aeabi_dmul+0x222>
  406050:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  406054:	d113      	bne.n	40607e <__aeabi_dmul+0x24a>
  406056:	ea95 0f0c 	teq	r5, ip
  40605a:	d105      	bne.n	406068 <__aeabi_dmul+0x234>
  40605c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  406060:	bf1c      	itt	ne
  406062:	4610      	movne	r0, r2
  406064:	4619      	movne	r1, r3
  406066:	d10a      	bne.n	40607e <__aeabi_dmul+0x24a>
  406068:	ea81 0103 	eor.w	r1, r1, r3
  40606c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406070:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406074:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406078:	f04f 0000 	mov.w	r0, #0
  40607c:	bd70      	pop	{r4, r5, r6, pc}
  40607e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406082:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  406086:	bd70      	pop	{r4, r5, r6, pc}

00406088 <__aeabi_ddiv>:
  406088:	b570      	push	{r4, r5, r6, lr}
  40608a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40608e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406092:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406096:	bf1d      	ittte	ne
  406098:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40609c:	ea94 0f0c 	teqne	r4, ip
  4060a0:	ea95 0f0c 	teqne	r5, ip
  4060a4:	f000 f8a7 	bleq	4061f6 <__aeabi_ddiv+0x16e>
  4060a8:	eba4 0405 	sub.w	r4, r4, r5
  4060ac:	ea81 0e03 	eor.w	lr, r1, r3
  4060b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4060b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4060b8:	f000 8088 	beq.w	4061cc <__aeabi_ddiv+0x144>
  4060bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4060c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4060c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4060c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4060cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4060d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4060d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4060d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4060dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4060e0:	429d      	cmp	r5, r3
  4060e2:	bf08      	it	eq
  4060e4:	4296      	cmpeq	r6, r2
  4060e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4060ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4060ee:	d202      	bcs.n	4060f6 <__aeabi_ddiv+0x6e>
  4060f0:	085b      	lsrs	r3, r3, #1
  4060f2:	ea4f 0232 	mov.w	r2, r2, rrx
  4060f6:	1ab6      	subs	r6, r6, r2
  4060f8:	eb65 0503 	sbc.w	r5, r5, r3
  4060fc:	085b      	lsrs	r3, r3, #1
  4060fe:	ea4f 0232 	mov.w	r2, r2, rrx
  406102:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  406106:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40610a:	ebb6 0e02 	subs.w	lr, r6, r2
  40610e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406112:	bf22      	ittt	cs
  406114:	1ab6      	subcs	r6, r6, r2
  406116:	4675      	movcs	r5, lr
  406118:	ea40 000c 	orrcs.w	r0, r0, ip
  40611c:	085b      	lsrs	r3, r3, #1
  40611e:	ea4f 0232 	mov.w	r2, r2, rrx
  406122:	ebb6 0e02 	subs.w	lr, r6, r2
  406126:	eb75 0e03 	sbcs.w	lr, r5, r3
  40612a:	bf22      	ittt	cs
  40612c:	1ab6      	subcs	r6, r6, r2
  40612e:	4675      	movcs	r5, lr
  406130:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  406134:	085b      	lsrs	r3, r3, #1
  406136:	ea4f 0232 	mov.w	r2, r2, rrx
  40613a:	ebb6 0e02 	subs.w	lr, r6, r2
  40613e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406142:	bf22      	ittt	cs
  406144:	1ab6      	subcs	r6, r6, r2
  406146:	4675      	movcs	r5, lr
  406148:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40614c:	085b      	lsrs	r3, r3, #1
  40614e:	ea4f 0232 	mov.w	r2, r2, rrx
  406152:	ebb6 0e02 	subs.w	lr, r6, r2
  406156:	eb75 0e03 	sbcs.w	lr, r5, r3
  40615a:	bf22      	ittt	cs
  40615c:	1ab6      	subcs	r6, r6, r2
  40615e:	4675      	movcs	r5, lr
  406160:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406164:	ea55 0e06 	orrs.w	lr, r5, r6
  406168:	d018      	beq.n	40619c <__aeabi_ddiv+0x114>
  40616a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40616e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  406172:	ea4f 1606 	mov.w	r6, r6, lsl #4
  406176:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40617a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40617e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  406182:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  406186:	d1c0      	bne.n	40610a <__aeabi_ddiv+0x82>
  406188:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40618c:	d10b      	bne.n	4061a6 <__aeabi_ddiv+0x11e>
  40618e:	ea41 0100 	orr.w	r1, r1, r0
  406192:	f04f 0000 	mov.w	r0, #0
  406196:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40619a:	e7b6      	b.n	40610a <__aeabi_ddiv+0x82>
  40619c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4061a0:	bf04      	itt	eq
  4061a2:	4301      	orreq	r1, r0
  4061a4:	2000      	moveq	r0, #0
  4061a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4061aa:	bf88      	it	hi
  4061ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4061b0:	f63f aeaf 	bhi.w	405f12 <__aeabi_dmul+0xde>
  4061b4:	ebb5 0c03 	subs.w	ip, r5, r3
  4061b8:	bf04      	itt	eq
  4061ba:	ebb6 0c02 	subseq.w	ip, r6, r2
  4061be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4061c2:	f150 0000 	adcs.w	r0, r0, #0
  4061c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4061ca:	bd70      	pop	{r4, r5, r6, pc}
  4061cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4061d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4061d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4061d8:	bfc2      	ittt	gt
  4061da:	ebd4 050c 	rsbsgt	r5, r4, ip
  4061de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4061e2:	bd70      	popgt	{r4, r5, r6, pc}
  4061e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4061e8:	f04f 0e00 	mov.w	lr, #0
  4061ec:	3c01      	subs	r4, #1
  4061ee:	e690      	b.n	405f12 <__aeabi_dmul+0xde>
  4061f0:	ea45 0e06 	orr.w	lr, r5, r6
  4061f4:	e68d      	b.n	405f12 <__aeabi_dmul+0xde>
  4061f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4061fa:	ea94 0f0c 	teq	r4, ip
  4061fe:	bf08      	it	eq
  406200:	ea95 0f0c 	teqeq	r5, ip
  406204:	f43f af3b 	beq.w	40607e <__aeabi_dmul+0x24a>
  406208:	ea94 0f0c 	teq	r4, ip
  40620c:	d10a      	bne.n	406224 <__aeabi_ddiv+0x19c>
  40620e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406212:	f47f af34 	bne.w	40607e <__aeabi_dmul+0x24a>
  406216:	ea95 0f0c 	teq	r5, ip
  40621a:	f47f af25 	bne.w	406068 <__aeabi_dmul+0x234>
  40621e:	4610      	mov	r0, r2
  406220:	4619      	mov	r1, r3
  406222:	e72c      	b.n	40607e <__aeabi_dmul+0x24a>
  406224:	ea95 0f0c 	teq	r5, ip
  406228:	d106      	bne.n	406238 <__aeabi_ddiv+0x1b0>
  40622a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40622e:	f43f aefd 	beq.w	40602c <__aeabi_dmul+0x1f8>
  406232:	4610      	mov	r0, r2
  406234:	4619      	mov	r1, r3
  406236:	e722      	b.n	40607e <__aeabi_dmul+0x24a>
  406238:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40623c:	bf18      	it	ne
  40623e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406242:	f47f aec5 	bne.w	405fd0 <__aeabi_dmul+0x19c>
  406246:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40624a:	f47f af0d 	bne.w	406068 <__aeabi_dmul+0x234>
  40624e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  406252:	f47f aeeb 	bne.w	40602c <__aeabi_dmul+0x1f8>
  406256:	e712      	b.n	40607e <__aeabi_dmul+0x24a>

00406258 <__gedf2>:
  406258:	f04f 3cff 	mov.w	ip, #4294967295
  40625c:	e006      	b.n	40626c <__cmpdf2+0x4>
  40625e:	bf00      	nop

00406260 <__ledf2>:
  406260:	f04f 0c01 	mov.w	ip, #1
  406264:	e002      	b.n	40626c <__cmpdf2+0x4>
  406266:	bf00      	nop

00406268 <__cmpdf2>:
  406268:	f04f 0c01 	mov.w	ip, #1
  40626c:	f84d cd04 	str.w	ip, [sp, #-4]!
  406270:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406274:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406278:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40627c:	bf18      	it	ne
  40627e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  406282:	d01b      	beq.n	4062bc <__cmpdf2+0x54>
  406284:	b001      	add	sp, #4
  406286:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40628a:	bf0c      	ite	eq
  40628c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406290:	ea91 0f03 	teqne	r1, r3
  406294:	bf02      	ittt	eq
  406296:	ea90 0f02 	teqeq	r0, r2
  40629a:	2000      	moveq	r0, #0
  40629c:	4770      	bxeq	lr
  40629e:	f110 0f00 	cmn.w	r0, #0
  4062a2:	ea91 0f03 	teq	r1, r3
  4062a6:	bf58      	it	pl
  4062a8:	4299      	cmppl	r1, r3
  4062aa:	bf08      	it	eq
  4062ac:	4290      	cmpeq	r0, r2
  4062ae:	bf2c      	ite	cs
  4062b0:	17d8      	asrcs	r0, r3, #31
  4062b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4062b6:	f040 0001 	orr.w	r0, r0, #1
  4062ba:	4770      	bx	lr
  4062bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4062c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4062c4:	d102      	bne.n	4062cc <__cmpdf2+0x64>
  4062c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4062ca:	d107      	bne.n	4062dc <__cmpdf2+0x74>
  4062cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4062d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4062d4:	d1d6      	bne.n	406284 <__cmpdf2+0x1c>
  4062d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4062da:	d0d3      	beq.n	406284 <__cmpdf2+0x1c>
  4062dc:	f85d 0b04 	ldr.w	r0, [sp], #4
  4062e0:	4770      	bx	lr
  4062e2:	bf00      	nop

004062e4 <__aeabi_cdrcmple>:
  4062e4:	4684      	mov	ip, r0
  4062e6:	4610      	mov	r0, r2
  4062e8:	4662      	mov	r2, ip
  4062ea:	468c      	mov	ip, r1
  4062ec:	4619      	mov	r1, r3
  4062ee:	4663      	mov	r3, ip
  4062f0:	e000      	b.n	4062f4 <__aeabi_cdcmpeq>
  4062f2:	bf00      	nop

004062f4 <__aeabi_cdcmpeq>:
  4062f4:	b501      	push	{r0, lr}
  4062f6:	f7ff ffb7 	bl	406268 <__cmpdf2>
  4062fa:	2800      	cmp	r0, #0
  4062fc:	bf48      	it	mi
  4062fe:	f110 0f00 	cmnmi.w	r0, #0
  406302:	bd01      	pop	{r0, pc}

00406304 <__aeabi_dcmpeq>:
  406304:	f84d ed08 	str.w	lr, [sp, #-8]!
  406308:	f7ff fff4 	bl	4062f4 <__aeabi_cdcmpeq>
  40630c:	bf0c      	ite	eq
  40630e:	2001      	moveq	r0, #1
  406310:	2000      	movne	r0, #0
  406312:	f85d fb08 	ldr.w	pc, [sp], #8
  406316:	bf00      	nop

00406318 <__aeabi_dcmplt>:
  406318:	f84d ed08 	str.w	lr, [sp, #-8]!
  40631c:	f7ff ffea 	bl	4062f4 <__aeabi_cdcmpeq>
  406320:	bf34      	ite	cc
  406322:	2001      	movcc	r0, #1
  406324:	2000      	movcs	r0, #0
  406326:	f85d fb08 	ldr.w	pc, [sp], #8
  40632a:	bf00      	nop

0040632c <__aeabi_dcmple>:
  40632c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406330:	f7ff ffe0 	bl	4062f4 <__aeabi_cdcmpeq>
  406334:	bf94      	ite	ls
  406336:	2001      	movls	r0, #1
  406338:	2000      	movhi	r0, #0
  40633a:	f85d fb08 	ldr.w	pc, [sp], #8
  40633e:	bf00      	nop

00406340 <__aeabi_dcmpge>:
  406340:	f84d ed08 	str.w	lr, [sp, #-8]!
  406344:	f7ff ffce 	bl	4062e4 <__aeabi_cdrcmple>
  406348:	bf94      	ite	ls
  40634a:	2001      	movls	r0, #1
  40634c:	2000      	movhi	r0, #0
  40634e:	f85d fb08 	ldr.w	pc, [sp], #8
  406352:	bf00      	nop

00406354 <__aeabi_dcmpgt>:
  406354:	f84d ed08 	str.w	lr, [sp, #-8]!
  406358:	f7ff ffc4 	bl	4062e4 <__aeabi_cdrcmple>
  40635c:	bf34      	ite	cc
  40635e:	2001      	movcc	r0, #1
  406360:	2000      	movcs	r0, #0
  406362:	f85d fb08 	ldr.w	pc, [sp], #8
  406366:	bf00      	nop

00406368 <__aeabi_dcmpun>:
  406368:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40636c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406370:	d102      	bne.n	406378 <__aeabi_dcmpun+0x10>
  406372:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406376:	d10a      	bne.n	40638e <__aeabi_dcmpun+0x26>
  406378:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40637c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406380:	d102      	bne.n	406388 <__aeabi_dcmpun+0x20>
  406382:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406386:	d102      	bne.n	40638e <__aeabi_dcmpun+0x26>
  406388:	f04f 0000 	mov.w	r0, #0
  40638c:	4770      	bx	lr
  40638e:	f04f 0001 	mov.w	r0, #1
  406392:	4770      	bx	lr

00406394 <__aeabi_d2iz>:
  406394:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406398:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40639c:	d215      	bcs.n	4063ca <__aeabi_d2iz+0x36>
  40639e:	d511      	bpl.n	4063c4 <__aeabi_d2iz+0x30>
  4063a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4063a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4063a8:	d912      	bls.n	4063d0 <__aeabi_d2iz+0x3c>
  4063aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4063ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4063b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4063b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4063ba:	fa23 f002 	lsr.w	r0, r3, r2
  4063be:	bf18      	it	ne
  4063c0:	4240      	negne	r0, r0
  4063c2:	4770      	bx	lr
  4063c4:	f04f 0000 	mov.w	r0, #0
  4063c8:	4770      	bx	lr
  4063ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4063ce:	d105      	bne.n	4063dc <__aeabi_d2iz+0x48>
  4063d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4063d4:	bf08      	it	eq
  4063d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4063da:	4770      	bx	lr
  4063dc:	f04f 0000 	mov.w	r0, #0
  4063e0:	4770      	bx	lr
  4063e2:	bf00      	nop

004063e4 <__aeabi_uldivmod>:
  4063e4:	b953      	cbnz	r3, 4063fc <__aeabi_uldivmod+0x18>
  4063e6:	b94a      	cbnz	r2, 4063fc <__aeabi_uldivmod+0x18>
  4063e8:	2900      	cmp	r1, #0
  4063ea:	bf08      	it	eq
  4063ec:	2800      	cmpeq	r0, #0
  4063ee:	bf1c      	itt	ne
  4063f0:	f04f 31ff 	movne.w	r1, #4294967295
  4063f4:	f04f 30ff 	movne.w	r0, #4294967295
  4063f8:	f000 b97a 	b.w	4066f0 <__aeabi_idiv0>
  4063fc:	f1ad 0c08 	sub.w	ip, sp, #8
  406400:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406404:	f000 f806 	bl	406414 <__udivmoddi4>
  406408:	f8dd e004 	ldr.w	lr, [sp, #4]
  40640c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406410:	b004      	add	sp, #16
  406412:	4770      	bx	lr

00406414 <__udivmoddi4>:
  406414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406418:	468c      	mov	ip, r1
  40641a:	460d      	mov	r5, r1
  40641c:	4604      	mov	r4, r0
  40641e:	9e08      	ldr	r6, [sp, #32]
  406420:	2b00      	cmp	r3, #0
  406422:	d151      	bne.n	4064c8 <__udivmoddi4+0xb4>
  406424:	428a      	cmp	r2, r1
  406426:	4617      	mov	r7, r2
  406428:	d96d      	bls.n	406506 <__udivmoddi4+0xf2>
  40642a:	fab2 fe82 	clz	lr, r2
  40642e:	f1be 0f00 	cmp.w	lr, #0
  406432:	d00b      	beq.n	40644c <__udivmoddi4+0x38>
  406434:	f1ce 0c20 	rsb	ip, lr, #32
  406438:	fa01 f50e 	lsl.w	r5, r1, lr
  40643c:	fa20 fc0c 	lsr.w	ip, r0, ip
  406440:	fa02 f70e 	lsl.w	r7, r2, lr
  406444:	ea4c 0c05 	orr.w	ip, ip, r5
  406448:	fa00 f40e 	lsl.w	r4, r0, lr
  40644c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406450:	0c25      	lsrs	r5, r4, #16
  406452:	fbbc f8fa 	udiv	r8, ip, sl
  406456:	fa1f f987 	uxth.w	r9, r7
  40645a:	fb0a cc18 	mls	ip, sl, r8, ip
  40645e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406462:	fb08 f309 	mul.w	r3, r8, r9
  406466:	42ab      	cmp	r3, r5
  406468:	d90a      	bls.n	406480 <__udivmoddi4+0x6c>
  40646a:	19ed      	adds	r5, r5, r7
  40646c:	f108 32ff 	add.w	r2, r8, #4294967295
  406470:	f080 8123 	bcs.w	4066ba <__udivmoddi4+0x2a6>
  406474:	42ab      	cmp	r3, r5
  406476:	f240 8120 	bls.w	4066ba <__udivmoddi4+0x2a6>
  40647a:	f1a8 0802 	sub.w	r8, r8, #2
  40647e:	443d      	add	r5, r7
  406480:	1aed      	subs	r5, r5, r3
  406482:	b2a4      	uxth	r4, r4
  406484:	fbb5 f0fa 	udiv	r0, r5, sl
  406488:	fb0a 5510 	mls	r5, sl, r0, r5
  40648c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  406490:	fb00 f909 	mul.w	r9, r0, r9
  406494:	45a1      	cmp	r9, r4
  406496:	d909      	bls.n	4064ac <__udivmoddi4+0x98>
  406498:	19e4      	adds	r4, r4, r7
  40649a:	f100 33ff 	add.w	r3, r0, #4294967295
  40649e:	f080 810a 	bcs.w	4066b6 <__udivmoddi4+0x2a2>
  4064a2:	45a1      	cmp	r9, r4
  4064a4:	f240 8107 	bls.w	4066b6 <__udivmoddi4+0x2a2>
  4064a8:	3802      	subs	r0, #2
  4064aa:	443c      	add	r4, r7
  4064ac:	eba4 0409 	sub.w	r4, r4, r9
  4064b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4064b4:	2100      	movs	r1, #0
  4064b6:	2e00      	cmp	r6, #0
  4064b8:	d061      	beq.n	40657e <__udivmoddi4+0x16a>
  4064ba:	fa24 f40e 	lsr.w	r4, r4, lr
  4064be:	2300      	movs	r3, #0
  4064c0:	6034      	str	r4, [r6, #0]
  4064c2:	6073      	str	r3, [r6, #4]
  4064c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4064c8:	428b      	cmp	r3, r1
  4064ca:	d907      	bls.n	4064dc <__udivmoddi4+0xc8>
  4064cc:	2e00      	cmp	r6, #0
  4064ce:	d054      	beq.n	40657a <__udivmoddi4+0x166>
  4064d0:	2100      	movs	r1, #0
  4064d2:	e886 0021 	stmia.w	r6, {r0, r5}
  4064d6:	4608      	mov	r0, r1
  4064d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4064dc:	fab3 f183 	clz	r1, r3
  4064e0:	2900      	cmp	r1, #0
  4064e2:	f040 808e 	bne.w	406602 <__udivmoddi4+0x1ee>
  4064e6:	42ab      	cmp	r3, r5
  4064e8:	d302      	bcc.n	4064f0 <__udivmoddi4+0xdc>
  4064ea:	4282      	cmp	r2, r0
  4064ec:	f200 80fa 	bhi.w	4066e4 <__udivmoddi4+0x2d0>
  4064f0:	1a84      	subs	r4, r0, r2
  4064f2:	eb65 0503 	sbc.w	r5, r5, r3
  4064f6:	2001      	movs	r0, #1
  4064f8:	46ac      	mov	ip, r5
  4064fa:	2e00      	cmp	r6, #0
  4064fc:	d03f      	beq.n	40657e <__udivmoddi4+0x16a>
  4064fe:	e886 1010 	stmia.w	r6, {r4, ip}
  406502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406506:	b912      	cbnz	r2, 40650e <__udivmoddi4+0xfa>
  406508:	2701      	movs	r7, #1
  40650a:	fbb7 f7f2 	udiv	r7, r7, r2
  40650e:	fab7 fe87 	clz	lr, r7
  406512:	f1be 0f00 	cmp.w	lr, #0
  406516:	d134      	bne.n	406582 <__udivmoddi4+0x16e>
  406518:	1beb      	subs	r3, r5, r7
  40651a:	0c3a      	lsrs	r2, r7, #16
  40651c:	fa1f fc87 	uxth.w	ip, r7
  406520:	2101      	movs	r1, #1
  406522:	fbb3 f8f2 	udiv	r8, r3, r2
  406526:	0c25      	lsrs	r5, r4, #16
  406528:	fb02 3318 	mls	r3, r2, r8, r3
  40652c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406530:	fb0c f308 	mul.w	r3, ip, r8
  406534:	42ab      	cmp	r3, r5
  406536:	d907      	bls.n	406548 <__udivmoddi4+0x134>
  406538:	19ed      	adds	r5, r5, r7
  40653a:	f108 30ff 	add.w	r0, r8, #4294967295
  40653e:	d202      	bcs.n	406546 <__udivmoddi4+0x132>
  406540:	42ab      	cmp	r3, r5
  406542:	f200 80d1 	bhi.w	4066e8 <__udivmoddi4+0x2d4>
  406546:	4680      	mov	r8, r0
  406548:	1aed      	subs	r5, r5, r3
  40654a:	b2a3      	uxth	r3, r4
  40654c:	fbb5 f0f2 	udiv	r0, r5, r2
  406550:	fb02 5510 	mls	r5, r2, r0, r5
  406554:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406558:	fb0c fc00 	mul.w	ip, ip, r0
  40655c:	45a4      	cmp	ip, r4
  40655e:	d907      	bls.n	406570 <__udivmoddi4+0x15c>
  406560:	19e4      	adds	r4, r4, r7
  406562:	f100 33ff 	add.w	r3, r0, #4294967295
  406566:	d202      	bcs.n	40656e <__udivmoddi4+0x15a>
  406568:	45a4      	cmp	ip, r4
  40656a:	f200 80b8 	bhi.w	4066de <__udivmoddi4+0x2ca>
  40656e:	4618      	mov	r0, r3
  406570:	eba4 040c 	sub.w	r4, r4, ip
  406574:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406578:	e79d      	b.n	4064b6 <__udivmoddi4+0xa2>
  40657a:	4631      	mov	r1, r6
  40657c:	4630      	mov	r0, r6
  40657e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406582:	f1ce 0420 	rsb	r4, lr, #32
  406586:	fa05 f30e 	lsl.w	r3, r5, lr
  40658a:	fa07 f70e 	lsl.w	r7, r7, lr
  40658e:	fa20 f804 	lsr.w	r8, r0, r4
  406592:	0c3a      	lsrs	r2, r7, #16
  406594:	fa25 f404 	lsr.w	r4, r5, r4
  406598:	ea48 0803 	orr.w	r8, r8, r3
  40659c:	fbb4 f1f2 	udiv	r1, r4, r2
  4065a0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4065a4:	fb02 4411 	mls	r4, r2, r1, r4
  4065a8:	fa1f fc87 	uxth.w	ip, r7
  4065ac:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4065b0:	fb01 f30c 	mul.w	r3, r1, ip
  4065b4:	42ab      	cmp	r3, r5
  4065b6:	fa00 f40e 	lsl.w	r4, r0, lr
  4065ba:	d909      	bls.n	4065d0 <__udivmoddi4+0x1bc>
  4065bc:	19ed      	adds	r5, r5, r7
  4065be:	f101 30ff 	add.w	r0, r1, #4294967295
  4065c2:	f080 808a 	bcs.w	4066da <__udivmoddi4+0x2c6>
  4065c6:	42ab      	cmp	r3, r5
  4065c8:	f240 8087 	bls.w	4066da <__udivmoddi4+0x2c6>
  4065cc:	3902      	subs	r1, #2
  4065ce:	443d      	add	r5, r7
  4065d0:	1aeb      	subs	r3, r5, r3
  4065d2:	fa1f f588 	uxth.w	r5, r8
  4065d6:	fbb3 f0f2 	udiv	r0, r3, r2
  4065da:	fb02 3310 	mls	r3, r2, r0, r3
  4065de:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4065e2:	fb00 f30c 	mul.w	r3, r0, ip
  4065e6:	42ab      	cmp	r3, r5
  4065e8:	d907      	bls.n	4065fa <__udivmoddi4+0x1e6>
  4065ea:	19ed      	adds	r5, r5, r7
  4065ec:	f100 38ff 	add.w	r8, r0, #4294967295
  4065f0:	d26f      	bcs.n	4066d2 <__udivmoddi4+0x2be>
  4065f2:	42ab      	cmp	r3, r5
  4065f4:	d96d      	bls.n	4066d2 <__udivmoddi4+0x2be>
  4065f6:	3802      	subs	r0, #2
  4065f8:	443d      	add	r5, r7
  4065fa:	1aeb      	subs	r3, r5, r3
  4065fc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406600:	e78f      	b.n	406522 <__udivmoddi4+0x10e>
  406602:	f1c1 0720 	rsb	r7, r1, #32
  406606:	fa22 f807 	lsr.w	r8, r2, r7
  40660a:	408b      	lsls	r3, r1
  40660c:	fa05 f401 	lsl.w	r4, r5, r1
  406610:	ea48 0303 	orr.w	r3, r8, r3
  406614:	fa20 fe07 	lsr.w	lr, r0, r7
  406618:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40661c:	40fd      	lsrs	r5, r7
  40661e:	ea4e 0e04 	orr.w	lr, lr, r4
  406622:	fbb5 f9fc 	udiv	r9, r5, ip
  406626:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40662a:	fb0c 5519 	mls	r5, ip, r9, r5
  40662e:	fa1f f883 	uxth.w	r8, r3
  406632:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406636:	fb09 f408 	mul.w	r4, r9, r8
  40663a:	42ac      	cmp	r4, r5
  40663c:	fa02 f201 	lsl.w	r2, r2, r1
  406640:	fa00 fa01 	lsl.w	sl, r0, r1
  406644:	d908      	bls.n	406658 <__udivmoddi4+0x244>
  406646:	18ed      	adds	r5, r5, r3
  406648:	f109 30ff 	add.w	r0, r9, #4294967295
  40664c:	d243      	bcs.n	4066d6 <__udivmoddi4+0x2c2>
  40664e:	42ac      	cmp	r4, r5
  406650:	d941      	bls.n	4066d6 <__udivmoddi4+0x2c2>
  406652:	f1a9 0902 	sub.w	r9, r9, #2
  406656:	441d      	add	r5, r3
  406658:	1b2d      	subs	r5, r5, r4
  40665a:	fa1f fe8e 	uxth.w	lr, lr
  40665e:	fbb5 f0fc 	udiv	r0, r5, ip
  406662:	fb0c 5510 	mls	r5, ip, r0, r5
  406666:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40666a:	fb00 f808 	mul.w	r8, r0, r8
  40666e:	45a0      	cmp	r8, r4
  406670:	d907      	bls.n	406682 <__udivmoddi4+0x26e>
  406672:	18e4      	adds	r4, r4, r3
  406674:	f100 35ff 	add.w	r5, r0, #4294967295
  406678:	d229      	bcs.n	4066ce <__udivmoddi4+0x2ba>
  40667a:	45a0      	cmp	r8, r4
  40667c:	d927      	bls.n	4066ce <__udivmoddi4+0x2ba>
  40667e:	3802      	subs	r0, #2
  406680:	441c      	add	r4, r3
  406682:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406686:	eba4 0408 	sub.w	r4, r4, r8
  40668a:	fba0 8902 	umull	r8, r9, r0, r2
  40668e:	454c      	cmp	r4, r9
  406690:	46c6      	mov	lr, r8
  406692:	464d      	mov	r5, r9
  406694:	d315      	bcc.n	4066c2 <__udivmoddi4+0x2ae>
  406696:	d012      	beq.n	4066be <__udivmoddi4+0x2aa>
  406698:	b156      	cbz	r6, 4066b0 <__udivmoddi4+0x29c>
  40669a:	ebba 030e 	subs.w	r3, sl, lr
  40669e:	eb64 0405 	sbc.w	r4, r4, r5
  4066a2:	fa04 f707 	lsl.w	r7, r4, r7
  4066a6:	40cb      	lsrs	r3, r1
  4066a8:	431f      	orrs	r7, r3
  4066aa:	40cc      	lsrs	r4, r1
  4066ac:	6037      	str	r7, [r6, #0]
  4066ae:	6074      	str	r4, [r6, #4]
  4066b0:	2100      	movs	r1, #0
  4066b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4066b6:	4618      	mov	r0, r3
  4066b8:	e6f8      	b.n	4064ac <__udivmoddi4+0x98>
  4066ba:	4690      	mov	r8, r2
  4066bc:	e6e0      	b.n	406480 <__udivmoddi4+0x6c>
  4066be:	45c2      	cmp	sl, r8
  4066c0:	d2ea      	bcs.n	406698 <__udivmoddi4+0x284>
  4066c2:	ebb8 0e02 	subs.w	lr, r8, r2
  4066c6:	eb69 0503 	sbc.w	r5, r9, r3
  4066ca:	3801      	subs	r0, #1
  4066cc:	e7e4      	b.n	406698 <__udivmoddi4+0x284>
  4066ce:	4628      	mov	r0, r5
  4066d0:	e7d7      	b.n	406682 <__udivmoddi4+0x26e>
  4066d2:	4640      	mov	r0, r8
  4066d4:	e791      	b.n	4065fa <__udivmoddi4+0x1e6>
  4066d6:	4681      	mov	r9, r0
  4066d8:	e7be      	b.n	406658 <__udivmoddi4+0x244>
  4066da:	4601      	mov	r1, r0
  4066dc:	e778      	b.n	4065d0 <__udivmoddi4+0x1bc>
  4066de:	3802      	subs	r0, #2
  4066e0:	443c      	add	r4, r7
  4066e2:	e745      	b.n	406570 <__udivmoddi4+0x15c>
  4066e4:	4608      	mov	r0, r1
  4066e6:	e708      	b.n	4064fa <__udivmoddi4+0xe6>
  4066e8:	f1a8 0802 	sub.w	r8, r8, #2
  4066ec:	443d      	add	r5, r7
  4066ee:	e72b      	b.n	406548 <__udivmoddi4+0x134>

004066f0 <__aeabi_idiv0>:
  4066f0:	4770      	bx	lr
  4066f2:	bf00      	nop

004066f4 <sysfont_glyphs>:
	...
  406714:	0030 0030 0030 0030 0030 0030 0000 0030     0.0.0.0.0.0...0.
  406724:	0030 0000 0000 0000 0000 0000 006c 006c     0...........l.l.
  406734:	006c 006c 0000 0000 0000 0000 0000 0000     l.l.............
	...
  40674c:	0000 0028 0028 007c 0028 0028 007c 0028     ..(.(.|.(.(.|.(.
  40675c:	0028 0000 0000 0000 0000 0000 0010 003c     (.............<.
  40676c:	0040 0020 0010 0008 0004 0078 0010 0000     @. .......x.....
	...
  406784:	0000 007c 00a4 00a8 0050 0028 0054 0094     ..|.....P.(.T...
  406794:	0088 0000 0000 0000 0000 0000 0060 0090     ............`...
  4067a4:	0090 0090 0060 0094 0088 0088 0070 0000     ....`.......p...
	...
  4067bc:	0010 0010 0010 0000 0000 0000 0000 0000     ................
	...
  4067d8:	0008 0010 0020 0020 0020 0020 0020 0020     .... . . . . . .
  4067e8:	0010 0008 0000 0000 0000 0000 0020 0010     ............ ...
  4067f8:	0008 0008 0008 0008 0008 0008 0010 0020     .............. .
  406808:	0000 0000 0000 0028 0010 007c 0010 0028     ......(...|...(.
	...
  406830:	0010 0010 0010 00fe 0010 0010 0010 0000     ................
	...
  406858:	0010 0030 0020 0000 0000 0000 0000 0000     ..0. ...........
  406868:	0000 0000 0000 007c 0000 0000 0000 0000     ......|.........
	...
  40688c:	0000 0030 0030 0000 0000 0000 0000 0000     ..0.0...........
  40689c:	0000 0008 0008 0010 0010 0020 0020 0040     .......... . .@.
  4068ac:	0040 0000 0000 0000 0000 0000 0000 0078     @.............x.
  4068bc:	0084 008c 0094 00a4 00c4 0084 0078 0000     ............x...
	...
  4068d4:	0000 0010 0030 0050 0010 0010 0010 0010     ....0.P.........
  4068e4:	007c 0000 0000 0000 0000 0000 0000 0070     |.............p.
  4068f4:	0088 0008 0010 0020 0040 0080 00f8 0000     ...... .@.......
	...
  40690c:	0000 0070 0088 0008 0030 0008 0008 0088     ..p.....0.......
  40691c:	0070 0000 0000 0000 0000 0000 0000 0008     p...............
  40692c:	0018 0028 0048 0088 00fc 0008 0008 0000     ..(.H...........
	...
  406944:	0000 0078 0080 0080 00f0 0008 0008 0008     ..x.............
  406954:	00f0 0000 0000 0000 0000 0000 0000 0030     ..............0.
  406964:	0040 0080 00f0 0088 0088 0088 0070 0000     @...........p...
	...
  40697c:	0000 00f8 0008 0010 0010 0020 0020 0040     .......... . .@.
  40698c:	0040 0000 0000 0000 0000 0000 0000 0070     @.............p.
  40699c:	0088 0088 0070 0088 0088 0088 0070 0000     ....p.......p...
	...
  4069b4:	0000 0070 0088 0088 0088 0078 0008 0010     ..p.......x.....
  4069c4:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
  4069d4:	0000 0030 0030 0000 0000 0030 0030 0000     ..0.0.....0.0...
	...
  4069f0:	0000 0030 0030 0000 0000 0030 0030 0060     ..0.0.....0.0.`.
  406a00:	0040 0000 0000 0000 0000 0000 0008 0010     @...............
  406a10:	0020 0040 0020 0010 0008 0000 0000 0000      .@. ...........
	...
  406a2c:	007c 0000 007c 0000 0000 0000 0000 0000     |...|...........
	...
  406a44:	0040 0020 0010 0008 0010 0020 0040 0000     @. ....... .@...
	...
  406a5c:	0000 0030 0048 0008 0010 0020 0000 0000     ..0.H..... .....
  406a6c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
  406a7c:	003c 0042 009a 00aa 00aa 00be 0080 0078     <.B...........x.
	...
  406a94:	0000 0010 0028 0028 0044 007c 0044 0044     ....(.(.D.|.D.D.
  406aa4:	0044 0000 0000 0000 0000 0000 0000 00f8     D...............
  406ab4:	0084 0084 00f8 0084 0084 0084 00f8 0000     ................
	...
  406acc:	0000 003c 0040 0080 0080 0080 0080 0040     ..<.@.........@.
  406adc:	003c 0000 0000 0000 0000 0000 0000 00f0     <...............
  406aec:	0088 0084 0084 0084 0084 0088 00f0 0000     ................
	...
  406b04:	0000 00f8 0080 0080 00f0 0080 0080 0080     ................
  406b14:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406b24:	0080 0080 00f8 0080 0080 0080 0080 0000     ................
	...
  406b3c:	0000 003c 0040 0080 0080 009c 0084 0044     ..<.@.........D.
  406b4c:	0038 0000 0000 0000 0000 0000 0000 0088     8...............
  406b5c:	0088 0088 00f8 0088 0088 0088 0088 0000     ................
	...
  406b74:	0000 00f8 0020 0020 0020 0020 0020 0020     .... . . . . . .
  406b84:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406b94:	0008 0008 0008 0008 0008 0008 00f0 0000     ................
	...
  406bac:	0000 0084 0088 0090 00a0 00d0 0088 0084     ................
  406bbc:	0084 0000 0000 0000 0000 0000 0000 0080     ................
  406bcc:	0080 0080 0080 0080 0080 0080 00fc 0000     ................
	...
  406be4:	0000 0084 00cc 00cc 00b4 00b4 0084 0084     ................
  406bf4:	0084 0000 0000 0000 0000 0000 0000 0084     ................
  406c04:	00c4 00c4 00a4 00a4 0094 0094 008c 0000     ................
	...
  406c1c:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  406c2c:	0078 0000 0000 0000 0000 0000 0000 00f8     x...............
  406c3c:	0084 0084 0084 00f8 0080 0080 0080 0000     ................
	...
  406c54:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  406c64:	0078 0020 0018 0000 0000 0000 0000 00f8     x. .............
  406c74:	0084 0084 0084 00f8 0088 0084 0084 0000     ................
	...
  406c8c:	0000 007c 0080 0080 0060 0018 0004 0004     ..|.....`.......
  406c9c:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406cac:	0020 0020 0020 0020 0020 0020 0020 0000      . . . . . . ...
	...
  406cc4:	0000 0084 0084 0084 0084 0084 0084 0084     ................
  406cd4:	0078 0000 0000 0000 0000 0000 0000 0084     x...............
  406ce4:	0084 0084 0048 0048 0048 0030 0030 0000     ....H.H.H.0.0...
	...
  406cfc:	0000 0088 00a8 00a8 00a8 00a8 00a8 0050     ..............P.
  406d0c:	0050 0000 0000 0000 0000 0000 0000 0088     P...............
  406d1c:	0088 0050 0020 0020 0050 0088 0088 0000     ..P. . .P.......
	...
  406d34:	0000 0088 0088 0088 0050 0050 0020 0020     ........P.P. . .
  406d44:	0020 0000 0000 0000 0000 0000 0000 00fc      ...............
  406d54:	0004 0008 0010 0020 0040 0080 00fc 0000     ...... .@.......
	...
  406d6c:	0070 0040 0040 0040 0040 0040 0040 0040     p.@.@.@.@.@.@.@.
  406d7c:	0040 0040 0070 0000 0000 0000 0040 0040     @.@.p.......@.@.
  406d8c:	0020 0020 0020 0010 0010 0010 0008 0008      . . ...........
	...
  406da4:	0038 0008 0008 0008 0008 0008 0008 0008     8...............
  406db4:	0008 0008 0038 0000 0000 0000 0010 0028     ....8.........(.
  406dc4:	0044 0000 0000 0000 0000 0000 0000 0000     D...............
	...
  406dec:	0038 0000 0000 0000 0000 0000 0000 0020     8............. .
  406dfc:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...
  406e18:	0000 0070 0008 0008 0078 0088 007c 0000     ..p.....x...|...
	...
  406e30:	0080 0080 0080 00f8 0084 0084 0084 0084     ................
  406e40:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  406e50:	0000 0078 0080 0080 0080 0080 0078 0000     ..x.........x...
	...
  406e68:	0004 0004 0004 007c 0084 0084 0084 008c     ......|.........
  406e78:	0074 0000 0000 0000 0000 0000 0000 0000     t...............
  406e88:	0000 0078 0084 00fc 0080 0080 007c 0000     ..x.........|...
	...
  406ea0:	001c 0020 0020 00fc 0020 0020 0020 0020     .. . ... . . . .
  406eb0:	00fc 0000 0000 0000 0000 0000 0000 0000     ................
  406ec0:	0000 007c 0084 0084 0084 0084 007c 0004     ..|.........|...
  406ed0:	0078 0000 0000 0000 0080 0080 0080 00b8     x...............
  406ee0:	00c4 0084 0084 0084 0084 0000 0000 0000     ................
  406ef0:	0000 0000 0000 0010 0000 0070 0010 0010     ..........p.....
  406f00:	0010 0010 007c 0000 0000 0000 0000 0000     ....|...........
  406f10:	0000 0008 0000 0078 0008 0008 0008 0008     ......x.........
  406f20:	0008 0008 0008 0070 0000 0000 0080 0080     ......p.........
  406f30:	0080 0088 0090 00a0 00d0 0088 0088 0000     ................
	...
  406f48:	00e0 0020 0020 0020 0020 0020 0020 0020     .. . . . . . . .
  406f58:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  406f68:	0000 00a4 00fc 00a4 00a4 00a4 00a4 0000     ................
	...
  406f84:	0000 00b8 00c4 0084 0084 0084 0084 0000     ................
	...
  406fa0:	0000 0078 0084 0084 0084 0084 0078 0000     ..x.........x...
	...
  406fbc:	0000 00b8 00c4 0084 0084 0084 00f8 0080     ................
  406fcc:	0080 0000 0000 0000 0000 0000 0000 007c     ..............|.
  406fdc:	0084 0084 0084 0084 007c 0004 0004 0000     ........|.......
	...
  406ff4:	0000 00d8 0060 0040 0040 0040 00f0 0000     ....`.@.@.@.....
	...
  407010:	0000 0078 0080 0040 0030 0008 00f0 0000     ..x...@.0.......
	...
  40702c:	0020 00fc 0020 0020 0020 0020 001c 0000      ... . . . .....
	...
  407048:	0000 0088 0088 0088 0088 0088 007c 0000     ............|...
	...
  407064:	0000 0084 0084 0084 0048 0048 0030 0000     ........H.H.0...
	...
  407080:	0000 0088 00a8 00a8 00a8 00a8 0050 0000     ............P...
	...
  40709c:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
  4070b8:	0000 0084 0084 0048 0048 0030 0010 0020     ......H.H.0... .
  4070c8:	0040 0000 0000 0000 0000 0000 0000 00f8     @...............
  4070d8:	0008 0010 0020 0040 00f8 0000 0000 0000     .... .@.........
  4070e8:	0000 0000 0010 0020 0020 0010 0020 0020     ...... . ... . .
  4070f8:	0010 0020 0020 0010 0000 0000 0000 0000     .. . ...........
  407108:	0010 0010 0010 0010 0000 0000 0010 0010     ................
  407118:	0010 0010 0000 0000 0000 0000 0020 0010     ............ ...
  407128:	0010 0020 0010 0010 0020 0010 0010 0020     .. ..... ..... .
  407138:	0000 0000 07e4 0000 0004 0000 0006 0000     ................
  407148:	0001 0000 0012 0000 001e 0000 0001 0000     ................
  407158:	2d2a 2d2d 002d 2a2a 2d2d 002d 2a2a 2d2a     *----.**---.***-
  407168:	002d 2a2a 2a2a 002d 2a2a 2a2a 002a 0000     -.****-.*****...
  407178:	0035 0000 3031 0000 0031 0000 3225 3a64     5...10..1...%2d:
  407188:	3225 3a64 3225 0064                         %2d:%2d.

00407190 <_global_impure_ptr>:
  407190:	0028 2040 4e49 0046 6e69 0066 414e 004e     (.@ INF.inf.NAN.
  4071a0:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  4071b0:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  4071c0:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  4071d0:	296c 0000 0030 0000                         l)..0...

004071d8 <blanks.7223>:
  4071d8:	2020 2020 2020 2020 2020 2020 2020 2020                     

004071e8 <zeroes.7224>:
  4071e8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4071f8:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

00407208 <__mprec_bigtens>:
  407208:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  407218:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  407228:	bf3c 7f73 4fdd 7515                         <.s..O.u

00407230 <__mprec_tens>:
  407230:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  407240:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  407250:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  407260:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  407270:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  407280:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  407290:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  4072a0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  4072b0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  4072c0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  4072d0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  4072e0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  4072f0:	9db4 79d9 7843 44ea                         ...yCx.D

004072f8 <p05.6055>:
  4072f8:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  407308:	4f50 4953 0058 0000 002e 0000               POSIX.......

00407314 <_ctype_>:
  407314:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  407324:	2020 2020 2020 2020 2020 2020 2020 2020                     
  407334:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  407344:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  407354:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  407364:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  407374:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  407384:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  407394:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00407418 <_init>:
  407418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40741a:	bf00      	nop
  40741c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40741e:	bc08      	pop	{r3}
  407420:	469e      	mov	lr, r3
  407422:	4770      	bx	lr

00407424 <__init_array_start>:
  407424:	00403371 	.word	0x00403371

00407428 <__frame_dummy_init_array_entry>:
  407428:	00400165                                e.@.

0040742c <_fini>:
  40742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40742e:	bf00      	nop
  407430:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407432:	bc08      	pop	{r3}
  407434:	469e      	mov	lr, r3
  407436:	4770      	bx	lr

00407438 <__fini_array_start>:
  407438:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 66f4 0040 0e0a 7d20               .....f@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <rtt_pause>:
20400020:	0001 0000                                   ....

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	0cbc 2040                                   ..@ 

20400454 <__malloc_av_>:
	...
2040045c:	0454 2040 0454 2040 045c 2040 045c 2040     T.@ T.@ \.@ \.@ 
2040046c:	0464 2040 0464 2040 046c 2040 046c 2040     d.@ d.@ l.@ l.@ 
2040047c:	0474 2040 0474 2040 047c 2040 047c 2040     t.@ t.@ |.@ |.@ 
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 
2040084c:	0844 2040 0844 2040 084c 2040 084c 2040     D.@ D.@ L.@ L.@ 

2040085c <__malloc_sbrk_base>:
2040085c:	ffff ffff                                   ....

20400860 <__malloc_trim_threshold>:
20400860:	0000 0002                                   ....

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	5aa9 0040 5669 0040 0000 0000 7314 0040     .Z@.iV@......s@.
20400954:	7310 0040 71b4 0040 71b4 0040 71b4 0040     .s@..q@..q@..q@.
20400964:	71b4 0040 71b4 0040 71b4 0040 71b4 0040     .q@..q@..q@..q@.
20400974:	71b4 0040 71b4 0040 ffff ffff ffff ffff     .q@..q@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
